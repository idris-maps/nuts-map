(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
module.exports={"type":"FeatureCollection","features":[{"type":"Feature","properties":{"id":0,"nuts":"AT11","name":"Burgenland (A)","area":3962,"density":78.2,"edu_3":25.7,"gdp":6830,"gdp_ph":21700,"life_ex":81.1,"pop":287318,"unempl":4.8,"coords":[16.571617447083387,47.50059243350004]},"geometry":{"type":"Polygon","coordinates":[[[17.06662349999999,48.118739000000005],[17.096727365000078,48.023657703000026],[17.160797500000086,48.00665650000008],[17.093074000000087,47.708236],[16.749031000000087,47.68141650000007],[16.445455000000067,47.40720949900003],[16.516771000000148,47.14932300000004],[16.113848999999988,46.86906800000003],[15.996218500000083,46.835406000000035],[16.145594499999987,46.999805500000036],[16.171769500000067,47.42240000000007],[16.30349849999999,47.78519150000011],[17.06662349999999,48.118739000000005]]]}},{"type":"Feature","properties":{"id":1,"nuts":"AT12","name":"Niederösterreich","area":19186,"density":85.8,"edu_3":29.1,"gdp":47327,"gdp_ph":26600,"life_ex":81,"pop":1626262,"unempl":5.1,"coords":[15.936660001052687,48.27177748489478]},"geometry":{"type":"Polygon","coordinates":[[[15.54235750000015,48.90795700000007],[16.102875500000067,48.74553800000007],[16.644797500000067,48.78573800000004],[16.94120050000015,48.617000500000074],[16.949778000000066,48.53579200000007],[16.909761715000087,48.496346309000046],[17.06662349999999,48.118739000000005],[16.30349849999999,47.78519150000011],[16.171769500000067,47.42240000000007],[15.71914600000008,47.709883500000046],[15.41039900000007,47.78474650100003],[14.738772499000078,47.748530001000006],[14.456122999999991,48.04303700000003],[14.99204499999999,48.25592850000007],[14.690860499000081,48.58516650000007],[14.99685449900008,49.015290499],[15.54235750000015,48.90795700000007]],[[16.37649824500008,48.30172616200008],[16.227887829999986,48.13619579700003],[16.55529123299999,48.16856544400008],[16.37649824500008,48.30172616200008]]]}},{"type":"Feature","properties":{"id":2,"nuts":"AT13","name":"Wien","area":415,"density":4439,"edu_3":39.1,"gdp":77942,"gdp_ph":41300,"life_ex":80.1,"pop":1765575,"unempl":10.2,"coords":[16.386559102666684,48.20216246766673]},"geometry":{"type":"Polygon","coordinates":[[[16.37649824500008,48.30172616200008],[16.55529123299999,48.16856544400008],[16.227887829999986,48.13619579700003],[16.37649824500008,48.30172616200008]]]}},{"type":"Feature","properties":{"id":3,"nuts":"AT21","name":"Kärnten","area":9538,"density":59.4,"edu_3":28.8,"gdp":16936,"gdp_ph":27600,"life_ex":81.7,"pop":555743,"unempl":6,"coords":[13.68209386363644,46.808003772727325]},"geometry":{"type":"Polygon","coordinates":[[[13.78466700000007,46.94385600000004],[14.132562500000148,47.062342],[14.844475999999986,47.048099500000035],[15.065101000000084,46.65205300000008],[14.565175500000066,46.372453500000006],[13.714184999999986,46.522703500000034],[12.731389500000148,46.634291500000074],[12.69063550000007,46.65697200000011],[12.96348750000007,46.79864900000007],[12.656833500000147,47.09951750000005],[13.354519500000066,47.097104],[13.78466700000007,46.94385600000004]]]}},{"type":"Feature","properties":{"id":4,"nuts":"AT22","name":"Steiermark","area":16401,"density":74.6,"edu_3":25.7,"gdp":37413,"gdp_ph":28100,"life_ex":81.8,"pop":1214927,"unempl":4.9,"coords":[14.832312375062575,47.261361218937544]},"geometry":{"type":"Polygon","coordinates":[[[16.171769500000067,47.42240000000007],[16.145594499999987,46.999805500000036],[15.996218500000083,46.835406000000035],[15.988236000000086,46.745062000000075],[15.065101000000084,46.65205300000008],[14.844475999999986,47.048099500000035],[14.132562500000148,47.062342],[13.78466700000007,46.94385600000004],[13.94009750000015,47.13646200000011],[13.60758700000008,47.28356400000007],[13.585663000000068,47.474799500000074],[13.860312000000079,47.7272155],[14.326396002000081,47.60755450100004],[14.738772499000078,47.748530001000006],[15.41039900000007,47.78474650100003],[15.71914600000008,47.709883500000046],[16.171769500000067,47.42240000000007]]]}},{"type":"Feature","properties":{"id":5,"nuts":"AT31","name":"Oberösterreich","area":11980,"density":121.4,"edu_3":26.7,"gdp":50677,"gdp_ph":32500,"life_ex":81.4,"pop":1425982,"unempl":4,"coords":[13.92495982142862,48.08508767885719]},"geometry":{"type":"Polygon","coordinates":[[[14.690860499000081,48.58516650000007],[14.99204499999999,48.25592850000007],[14.456122999999991,48.04303700000003],[14.738772499000078,47.748530001000006],[14.326396002000081,47.60755450100004],[13.860312000000079,47.7272155],[13.585663000000068,47.474799500000074],[13.55086850000015,47.71411600000005],[13.280289000000067,47.95471450000008],[12.860444500000085,47.99663950000007],[12.944656998999989,48.20668400000011],[13.727576500999987,48.513027002],[13.839702999999986,48.771454500000004],[14.095727000000068,48.59236050000004],[14.690860499000081,48.58516650000007]]]}},{"type":"Feature","properties":{"id":6,"nuts":"AT32","name":"Salzburg","area":7156,"density":75.6,"edu_3":29.8,"gdp":21856,"gdp_ph":37500,"life_ex":82.2,"pop":534185,"unempl":3.5,"coords":[13.075098566666757,47.3971457333334]},"geometry":{"type":"Polygon","coordinates":[[[13.585663000000068,47.474799500000074],[13.60758700000008,47.28356400000007],[13.94009750000015,47.13646200000011],[13.78466700000007,46.94385600000004],[13.354519500000066,47.097104],[12.656833500000147,47.09951750000005],[12.240745500000088,47.069168500000046],[12.136014499999987,47.080667500000004],[12.469798000000083,47.32377400000007],[12.574938500000087,47.63232800000003],[13.00368950000015,47.463310500000034],[13.080323000000078,47.68716450000011],[12.860444500000085,47.99663950000007],[13.280289000000067,47.95471450000008],[13.55086850000015,47.71411600000005],[13.585663000000068,47.474799500000074]]]}},{"type":"Feature","properties":{"id":7,"nuts":"AT33","name":"Tirol","area":12640,"density":57.4,"edu_3":27,"gdp":26095,"gdp_ph":33400,"life_ex":82.4,"pop":721574,"unempl":3.2,"coords":[11.351620688533405,47.19377065766671]},"geometry":{"type":"Polygon","coordinates":[[[10.88615949999999,47.53683950000004],[11.280776000000088,47.40076050000005],[11.63243550000007,47.592404000000045],[12.264959500000174,47.732506],[12.574938500000087,47.63232800000003],[12.469798000000083,47.32377400000007],[12.136014499999987,47.080667500000004],[11.935665347000082,47.03714731000008],[11.621509538000083,47.01142394500005],[11.164432500000089,46.96581400000008],[11.022560000000084,46.76588350000003],[10.492115442999989,46.850543610000045],[10.46990000000008,46.85462650000011],[10.144776500000091,46.85171500000007],[10.178269500000084,47.2701265],[10.88615949999999,47.53683950000004]]]}},{"type":"Feature","properties":{"id":8,"nuts":"AT34","name":"Vorarlberg","area":2601,"density":147.6,"edu_3":25.6,"gdp":14051,"gdp_ph":34400,"life_ex":82.3,"pop":375323,"unempl":3.4,"coords":[9.831203500000058,47.24686733333338]},"geometry":{"type":"Polygon","coordinates":[[[10.178269500000084,47.2701265],[10.144776500000091,46.85171500000007],[9.60705200000001,47.06077050000005],[9.529979000000083,47.27094450000004],[9.561844500000092,47.504557000000034],[9.965299499999986,47.52309050000008],[10.178269500000084,47.2701265]]]}},{"type":"Feature","properties":{"id":9,"nuts":"BE10","name":"Région de Bruxelles-Capitale / Brussels Hoofdstedelijk Gewest","area":161,"density":7324.4,"edu_3":43.5,"gdp":69895,"gdp_ph":55600,"life_ex":80.6,"pop":1183841,"unempl":18.3,"coords":[4.374201947333394,50.843660998666735]},"geometry":{"type":"Polygon","coordinates":[[[4.464053417000088,50.801255138000045],[4.257041277000013,50.81665214600008],[4.401511148000083,50.91307571200008],[4.464053417000088,50.801255138000045]]]}},{"type":"Feature","properties":{"id":10,"nuts":"BE21","name":"Prov. Antwerpen","area":2867,"density":645.9,"edu_3":38.1,"gdp":68816,"gdp_ph":34800,"life_ex":81.5,"pop":1809412,"unempl":6.1,"coords":[4.604207214285736,51.26878292857147]},"geometry":{"type":"Polygon","coordinates":[[[5.23771650000009,51.26160050000004],[4.981574500000079,51.03488550000003],[4.240998999999988,51.03686900000008],[4.240627999999987,51.35293950000005],[4.24366950000001,51.3747295],[4.279564999999991,51.376017500000046],[5.0052980000000105,51.444439000000045],[5.23771650000009,51.26160050000004]]]}},{"type":"Feature","properties":{"id":11,"nuts":"BE22","name":"Prov. Limburg (B)","area":2422,"density":359,"edu_3":31.1,"gdp":23512,"gdp_ph":24900,"life_ex":82.1,"pop":858535,"unempl":5.6,"coords":[5.400254500500087,51.034109083333384]},"geometry":{"type":"Polygon","coordinates":[[[5.56628350200009,51.220836500000075],[5.826478001000083,51.16675550000011],[5.68762200000009,50.81192400000003],[5.101852500000092,50.70865250000003],[4.981574500000079,51.03488550000003],[5.23771650000009,51.26160050000004],[5.56628350200009,51.220836500000075]]]}},{"type":"Feature","properties":{"id":12,"nuts":"BE23","name":"Prov. Oost-Vlaanderen","area":2982,"density":498.2,"edu_3":36.7,"gdp":44280,"gdp_ph":27400,"life_ex":81.1,"pop":1472518,"unempl":4.3,"coords":[3.8506685000000545,51.060551916666725]},"geometry":{"type":"Polygon","coordinates":[[[4.240998999999988,51.03686900000008],[3.8957365000000834,50.73294450000003],[3.4597310000000903,50.76596850000004],[3.3806610000000887,51.27429950000004],[3.8862555000000896,51.20029050000011],[4.240627999999987,51.35293950000005],[4.240998999999988,51.03686900000008]]]}},{"type":"Feature","properties":{"id":13,"nuts":"BE24","name":"Prov. Vlaams-Brabant","area":2106,"density":526.4,"edu_3":45.8,"gdp":38684,"gdp_ph":31800,"life_ex":82,"pop":1109226,"unempl":5,"coords":[4.484413652181874,50.8201261934546]},"geometry":{"type":"Polygon","coordinates":[[[5.101852500000092,50.70865250000003],[5.019701000000083,50.750973000000045],[4.74861549100001,50.807348176000005],[4.116982341000011,50.71277695600003],[4.100483000000082,50.70595550000007],[3.8957365000000834,50.73294450000003],[4.240998999999988,51.03686900000008],[4.981574500000079,51.03488550000003],[5.101852500000092,50.70865250000003]],[[4.464053417000088,50.801255138000045],[4.401511148000083,50.91307571200008],[4.257041277000013,50.81665214600008],[4.464053417000088,50.801255138000045]]]}},{"type":"Feature","properties":{"id":14,"nuts":"BE25","name":"Prov. West-Vlaanderen","area":3144,"density":377,"edu_3":33,"gdp":37062,"gdp_ph":28500,"life_ex":81.5,"pop":1179373,"unempl":4.2,"coords":[3.051506250000074,51.00180300000003]},"geometry":{"type":"Polygon","coordinates":[[[3.3806610000000887,51.27429950000004],[3.4597310000000903,50.76596850000004],[3.176996000000088,50.75616450000007],[2.6349500000000887,50.81274400000001],[2.546011000000078,51.089382],[3.110688500000009,51.31225950000007],[3.3806610000000887,51.27429950000004]]]}},{"type":"Feature","properties":{"id":15,"nuts":"BE31","name":"Prov. Brabant Wallon","area":1091,"density":358.1,"edu_3":51.9,"gdp":12743,"gdp_ph":29800,"life_ex":82,"pop":391801,"unempl":8.8,"coords":[4.591131410833394,50.693317044333355]},"geometry":{"type":"Polygon","coordinates":[[[5.019701000000083,50.750973000000045],[4.983341000000081,50.64224250000001],[4.577538000000089,50.54228600000005],[4.1006106330000875,50.70427563400003],[4.116982341000011,50.71277695600003],[4.74861549100001,50.807348176000005],[5.019701000000083,50.750973000000045]]]}},{"type":"Feature","properties":{"id":16,"nuts":"BE32","name":"Prov. Hainaut","area":3786,"density":353.3,"edu_3":28.1,"gdp":29190,"gdp_ph":19900,"life_ex":78.3,"pop":1335063,"unempl":14.4,"coords":[3.980028219583398,50.437438302916725]},"geometry":{"type":"Polygon","coordinates":[[[3.8957365000000834,50.73294450000003],[4.100483000000082,50.70595550000007],[4.1006106330000875,50.70427563400003],[4.577538000000089,50.54228600000005],[4.328497000000084,50.27756100000005],[4.432493999999991,49.94161600000007],[4.233133000000009,49.957828500000005],[4.140853002000085,49.97876000100007],[4.027774500000078,50.35833050000011],[3.2864920000000097,50.52756900000003],[3.176996000000088,50.75616450000007],[3.4597310000000903,50.76596850000004],[3.8957365000000834,50.73294450000003]]]}},{"type":"Feature","properties":{"id":17,"nuts":"BE33","name":"Prov. Liège","area":3862,"density":285.4,"edu_3":33.1,"gdp":27232,"gdp_ph":22600,"life_ex":79.4,"pop":1098531,"unempl":12.3,"coords":[5.733444818181869,50.49918059090913]},"geometry":{"type":"Polygon","coordinates":[[[6.020998999999989,50.75429550000007],[6.263062999999988,50.64330700000005],[6.405028499999986,50.32330850000011],[6.13766250000009,50.129951500000004],[6.030488999999989,50.16418850000008],[6.024899500000089,50.18277950000004],[5.3932350000000895,50.37936400000001],[4.983341000000081,50.64224250000001],[5.019701000000083,50.750973000000045],[5.101852500000092,50.70865250000003],[5.68762200000009,50.81192400000003],[6.020998999999989,50.75429550000007]]]}},{"type":"Feature","properties":{"id":18,"nuts":"BE34","name":"Prov. Luxembourg (B)","area":4440,"density":62.7,"edu_3":35.1,"gdp":6148,"gdp_ph":20300,"life_ex":79.2,"pop":278651,"unempl":8.5,"coords":[5.6148998482857735,49.942513729857176]},"geometry":{"type":"Polygon","coordinates":[[[6.024899500000089,50.18277950000004],[5.969346438000088,50.173224609000044],[5.735759000000087,49.89698050000004],[5.818117000000086,49.546310500000004],[5.3935109999999895,49.61711100000008],[4.969430999999986,49.801826000000005],[5.3932350000000895,50.37936400000001],[6.024899500000089,50.18277950000004]]]}},{"type":"Feature","properties":{"id":19,"nuts":"BE35","name":"Prov. Namur","area":3666,"density":133.1,"edu_3":36.7,"gdp":11453,"gdp_ph":21500,"life_ex":78.7,"pop":487041,"unempl":8.9,"coords":[4.786149571285762,50.22566592857146]},"geometry":{"type":"Polygon","coordinates":[[[5.3932350000000895,50.37936400000001],[4.969430999999986,49.801826000000005],[4.8185109990000115,49.99476600000003],[4.432493999999991,49.94161600000007],[4.328497000000084,50.27756100000005],[4.577538000000089,50.54228600000005],[4.983341000000081,50.64224250000001],[5.3932350000000895,50.37936400000001]]]}},{"type":"Feature","properties":{"id":20,"nuts":"BG31","name":"Severozapaden","area":19070,"density":43.8,"edu_3":20.6,"gdp":2732,"gdp_ph":7200,"life_ex":73.7,"pop":810401,"unempl":14.2,"coords":[23.89399041188241,43.41511920582358]},"geometry":{"type":"Polygon","coordinates":[[[24.656784499999986,43.72298450000011],[25.292867500000085,43.65443400000004],[25.112494000000083,43.191320500000074],[24.877830999999986,43.015251000000035],[25.01453500000008,42.74802400000004],[25.00719550000008,42.73761900000011],[24.385927000000066,42.749953500000004],[24.16529150000008,42.92970150000008],[23.412767000000088,43.16052200000007],[23.005832500000082,43.19337100000007],[22.53352550000008,43.47106550000001],[22.357179500000086,43.8094825],[22.67516350000008,44.215663500000005],[22.923354999999987,44.10243600000007],[22.83943350199999,43.87215799900008],[23.73897149999999,43.80057900000003],[24.19868299999999,43.682461000000046],[24.656784499999986,43.72298450000011]]]}},{"type":"Feature","properties":{"id":21,"nuts":"BG32","name":"Severen tsentralen","area":14974,"density":57.8,"edu_3":22.7,"gdp":2999,"gdp_ph":7800,"life_ex":74.3,"pop":835813,"unempl":13.2,"coords":[26.083076321714348,43.4773491786429]},"geometry":{"type":"Polygon","coordinates":[[[27.27381050000008,44.12756850000011],[27.695410000000066,43.98734300000001],[26.71561150000008,43.455008500000076],[26.255114502000083,43.55492249900004],[25.94378549999999,43.38580100000007],[26.16741450000015,42.9521555],[26.005793499000077,42.79730900000004],[25.01453500000008,42.74802400000004],[24.877830999999986,43.015251000000035],[25.112494000000083,43.191320500000074],[25.292867500000085,43.65443400000004],[25.792328000999987,43.71363050100007],[26.105386501999988,43.966179001],[26.910686500000082,44.13394150000005],[27.27381050000008,44.12756850000011]]]}},{"type":"Feature","properties":{"id":22,"nuts":"BG33","name":"Severoiztochen","area":14487,"density":66.1,"edu_3":27,"gdp":4089,"gdp_ph":9400,"life_ex":74.6,"pop":954536,"unempl":12.6,"coords":[27.281266318363713,43.41333449990913]},"geometry":{"type":"Polygon","coordinates":[[[28.578883999999988,43.73873900000001],[28.450334000000083,43.38072600000004],[28.092376500000086,43.37621000000007],[27.882620000000088,42.8384135],[26.31811450000015,43.03439600000007],[26.16741450000015,42.9521555],[25.94378549999999,43.38580100000007],[26.255114502000083,43.55492249900004],[26.71561150000008,43.455008500000076],[27.695410000000066,43.98734300000001],[27.99426450000007,43.84296450000011],[28.578883999999988,43.73873900000001]]]}},{"type":"Feature","properties":{"id":23,"nuts":"BG34","name":"Yugoiztochen","area":19799,"density":54.9,"edu_3":20.9,"gdp":4606,"gdp_ph":9500,"life_ex":74.5,"pop":1063690,"unempl":11.9,"coords":[26.392633636533397,42.43729454980006]},"geometry":{"type":"Polygon","coordinates":[[[27.882620000000088,42.8384135],[27.512098498000086,42.55314249700007],[28.028011550000087,41.98329925000007],[27.44783799999999,41.966587000000004],[27.29349099999999,42.097187000000076],[26.561544500000082,41.926273500000036],[26.53805600000007,42.15419700000007],[25.87771699999999,42.13164300000011],[25.081143000000083,42.18393650000007],[25.153932000999987,42.45523550000007],[25.00719550000008,42.73761900000011],[25.01453500000008,42.74802400000004],[26.005793499000077,42.79730900000004],[26.16741450000015,42.9521555],[26.31811450000015,43.03439600000007],[27.882620000000088,42.8384135]]]}},{"type":"Feature","properties":{"id":24,"nuts":"BG41","name":"Yugozapaden","area":20307,"density":106.2,"edu_3":37.5,"gdp":18722,"gdp_ph":19600,"life_ex":75.7,"pop":2127618,"unempl":8.9,"coords":[23.367356499466748,42.314280500000066]},"geometry":{"type":"Polygon","coordinates":[[[24.385927000000066,42.749953500000004],[23.890488500000174,42.54626950000011],[23.77225999999999,42.181185500000026],[23.78621700000008,41.83354200000008],[24.060045000000088,41.52243400000003],[23.62459200100008,41.37637700100004],[22.93145200000015,41.34092700000011],[22.963579000000067,41.77475750000008],[22.867141500000088,42.02221250000008],[22.360206500000146,42.311157001000026],[22.536039499999987,42.8821145],[22.74850849100008,42.88968299800007],[23.005832500000082,43.19337100000007],[23.412767000000088,43.16052200000007],[24.16529150000008,42.92970150000008],[24.385927000000066,42.749953500000004]]]}},{"type":"Feature","properties":{"id":25,"nuts":"BG42","name":"Yuzhen tsentralen","area":22365,"density":66.7,"edu_3":21.4,"gdp":5357,"gdp_ph":8100,"life_ex":75.4,"pop":1453619,"unempl":12,"coords":[25.09426316666673,42.019587300000055]},"geometry":{"type":"Polygon","coordinates":[[[25.00719550000008,42.73761900000011],[25.153932000999987,42.45523550000007],[25.081143000000083,42.18393650000007],[25.87771699999999,42.13164300000011],[26.53805600000007,42.15419700000007],[26.561544500000082,41.926273500000036],[26.358526500000067,41.71183000000008],[26.127742999000077,41.35472100000004],[25.28801750000008,41.2359275],[24.525135000000148,41.56904200000008],[24.060045000000088,41.52243400000003],[23.78621700000008,41.83354200000008],[23.77225999999999,42.181185500000026],[23.890488500000174,42.54626950000011],[24.385927000000066,42.749953500000004],[25.00719550000008,42.73761900000011]]]}},{"type":"Feature","properties":{"id":26,"nuts":"CH01","name":"Région lémanique","area":8718.7,"density":185,"edu_3":40.7,"gdp":null,"gdp_ph":null,"life_ex":83.2,"pop":1545817,"unempl":6.7,"coords":[7.39986729166673,46.450429666583375]},"geometry":{"type":"Polygon","coordinates":[[[8.410401500000091,46.653023000000076],[8.477663000000092,46.52759950000001],[8.392279500000086,46.49473200000003],[8.384737000000086,46.45215250000007],[7.86357600000008,45.916698499000006],[7.044885999999991,45.922413000000006],[6.821064000000092,46.42715450000003],[6.064003000000071,46.416229000000044],[6.460011000000009,46.85155150000003],[6.716732000000093,46.90607050000003],[6.847783499999991,46.49366750000007],[7.315271000000081,46.34386450000011],[8.410401500000091,46.653023000000076]]]}},{"type":"Feature","properties":{"id":27,"nuts":"CH02","name":"Espace Mittelland","area":10062.2,"density":183.9,"edu_3":38.1,"gdp":null,"gdp_ph":null,"life_ex":82.5,"pop":1808480,"unempl":4.3,"coords":[7.316521321428626,47.08658357142862]},"geometry":{"type":"Polygon","coordinates":[[[7.375670000000071,47.41407400000003],[7.838673000000085,47.23441700000001],[7.877095000000082,46.8370855],[8.410401500000091,46.653023000000076],[7.315271000000081,46.34386450000011],[6.847783499999991,46.49366750000007],[6.716732000000093,46.90607050000003],[6.460011000000009,46.85155150000003],[6.955139000000088,47.24316800000008],[7.1303530000000706,47.50304050000011],[7.326466000000011,47.43985350000003],[7.375670000000071,47.41407400000003]],[[7.375670000000071,47.41407400000003],[7.4211395000000095,47.44638800000007],[7.380894000000012,47.431892500000004],[7.375670000000071,47.41407400000003]]]}},{"type":"Feature","properties":{"id":28,"nuts":"CH03","name":"Nordwestschweiz","area":1958.4,"density":563.1,"edu_3":41.4,"gdp":null,"gdp_ph":null,"life_ex":82.9,"pop":1104353,"unempl":4.3,"coords":[7.843608833333401,47.41672416666669]},"geometry":{"type":"Polygon","coordinates":[[[7.375670000000071,47.41407400000003],[7.4211395000000095,47.44638800000007],[7.589039000000071,47.58987800000003],[8.426434500000084,47.56754900000004],[8.410697000000084,47.248039000000006],[7.838673000000085,47.23441700000001],[7.375670000000071,47.41407400000003]]]}},{"type":"Feature","properties":{"id":29,"nuts":"CH04","name":"Zürich","area":1728.9,"density":853.2,"edu_3":47.7,"gdp":null,"gdp_ph":null,"life_ex":83,"pop":1425538,"unempl":4.1,"coords":[8.625000862272792,47.528344311181854]},"geometry":{"type":"Polygon","coordinates":[[[8.663354000000083,47.68589250000008],[8.670487500000092,47.684871000000044],[8.974819351000093,47.30717129700008],[8.80777950000001,47.22055700000004],[8.410697000000084,47.248039000000006],[8.426434500000084,47.56754900000004],[8.564285379000012,47.603424039000004],[8.558512000000093,47.595720957000026],[8.578767057000078,47.58386727000004],[8.613503697999988,47.645689860000005],[8.606369500000085,47.66900550000008],[8.663354000000083,47.68589250000008]]]}},{"type":"Feature","properties":{"id":30,"nuts":"CH05","name":"Ostschweiz","area":11521.2,"density":99.8,"edu_3":34.7,"gdp":null,"gdp_ph":null,"life_ex":82.7,"pop":1134781,"unempl":3.2,"coords":[9.395281401304413,46.988859161608765]},"geometry":{"type":"Polygon","coordinates":[[[9.255832000000083,47.65910650000001],[9.550561499999986,47.53716700000007],[9.561844500000092,47.504557000000034],[9.529979000000083,47.27094450000004],[9.500603347000009,47.07860179800008],[9.60705200000001,47.06077050000005],[10.144776500000091,46.85171500000007],[10.46990000000008,46.85462650000011],[10.441409500000077,46.752069500000005],[10.453147000000087,46.53189900000001],[10.23870700000009,46.63553900000011],[9.907911500000012,46.38066200000003],[9.159450499000087,46.16956199900011],[9.13131341799999,46.18675782000008],[9.04279050000008,46.58880250000004],[8.723987615000084,46.57483680300004],[8.678730500000086,46.57919250000003],[8.97066600000008,46.95945350000011],[8.80777950000001,47.22055700000004],[8.974819351000093,47.30717129700008],[8.670487500000092,47.684871000000044],[8.663354000000083,47.68589250000008],[8.606369500000085,47.66900550000008],[9.255832000000083,47.65910650000001]]]}},{"type":"Feature","properties":{"id":31,"nuts":"CH06","name":"Zentralschweiz","area":4483.1,"density":180.4,"edu_3":38,"gdp":null,"gdp_ph":null,"life_ex":83.2,"pop":774123,"unempl":3.5,"coords":[8.459188853555633,46.87029046688892]},"geometry":{"type":"Polygon","coordinates":[[[8.410697000000084,47.248039000000006],[8.80777950000001,47.22055700000004],[8.97066600000008,46.95945350000011],[8.678730500000086,46.57919250000003],[8.660994182000081,46.573247202000005],[8.477663000000092,46.52759950000001],[8.410401500000091,46.653023000000076],[7.877095000000082,46.8370855],[7.838673000000085,47.23441700000001],[8.410697000000084,47.248039000000006]]]}},{"type":"Feature","properties":{"id":32,"nuts":"CH07","name":"Ticino","area":2812.1,"density":125.5,"edu_3":35.2,"gdp":null,"gdp_ph":null,"life_ex":83.8,"pop":346539,"unempl":6.7,"coords":[8.743390325200057,46.37160172530004]},"geometry":{"type":"Polygon","coordinates":[[[9.074182925000088,46.101939755000046],[8.78823058900008,46.10270406700005],[8.696334022999991,46.10170010600001],[8.446127499999989,46.46369750000008],[8.392279500000086,46.49473200000003],[8.477663000000092,46.52759950000001],[8.660994182000081,46.573247202000005],[8.723987615000084,46.57483680300004],[9.04279050000008,46.58880250000004],[9.13131341799999,46.18675782000008],[9.074182925000088,46.101939755000046]]]}},{"type":"Feature","properties":{"id":33,"nuts":"CY00","name":"Κύπρος / Kıbrıs","area":9251,"density":93.5,"edu_3":40.3,"gdp":17979,"gdp_ph":23600,"life_ex":82.5,"pop":858000,"unempl":16.1,"coords":[33.22156050000006,35.06001906262503]},"geometry":{"type":"Polygon","coordinates":[[[33.00572199999999,34.612968499999994],[32.42790199999999,34.742473500000045],[32.31466300000008,34.995376500000035],[33.048935000000085,35.35910050000004],[33.48189550000009,35.33285150000005],[33.97960300000008,35.44871900000004],[33.90989300000007,35.172557999999995],[33.603870500000085,34.81610500100004],[33.00572199999999,34.612968499999994]]]}},{"type":"Feature","properties":{"id":34,"nuts":"CZ01","name":"Praha","area":496,"density":2564.9,"edu_3":40.3,"gdp":38672,"gdp_ph":42900,"life_ex":80.1,"pop":1243201,"unempl":2.5,"coords":[14.479801000000048,50.077541700000026]},"geometry":{"type":"Polygon","coordinates":[[[14.65911900000009,50.122606500000046],[14.64015599999999,49.994444000000044],[14.342758500000087,49.990632500000004],[14.22448399999999,50.102839500000044],[14.532487500000087,50.177186000000006],[14.65911900000009,50.122606500000046]]]}},{"type":"Feature","properties":{"id":35,"nuts":"CZ02","name":"Střední Čechy","area":11015,"density":120,"edu_3":21.7,"gdp":16867,"gdp_ph":18200,"life_ex":78.2,"pop":1302336,"unempl":5.1,"coords":[14.583110135277828,50.020084496944484]},"geometry":{"type":"Polygon","coordinates":[[[15.510495795999987,49.898448590000044],[15.49478313600008,49.86023436200003],[15.230470000000082,49.615024000000005],[14.934187404000085,49.55754534900001],[14.902320000000088,49.54444700000005],[14.00976399999999,49.551292000000046],[13.80830899899999,49.86793799300003],[13.40667750099999,50.08970600100008],[13.863879500000081,50.24407600000001],[14.16793148299999,50.33149651900004],[14.486469500000084,50.50502600000004],[14.931861616000077,50.61014463100008],[15.349828500000086,50.29843400000004],[15.510495795999987,49.898448590000044]],[[14.65911900000009,50.122606500000046],[14.532487500000087,50.177186000000006],[14.22448399999999,50.102839500000044],[14.342758500000087,49.990632500000004],[14.64015599999999,49.994444000000044],[14.65911900000009,50.122606500000046]]]}},{"type":"Feature","properties":{"id":36,"nuts":"CZ03","name":"Jihozápad","area":17618,"density":70.9,"edu_3":17.6,"gdp":15517,"gdp_ph":17600,"life_ex":78.4,"pop":1210176,"unempl":5.5,"coords":[14.093201156125055,49.325575624562546]},"geometry":{"type":"Polygon","coordinates":[[[13.40667750099999,50.08970600100008],[13.80830899899999,49.86793799300003],[14.00976399999999,49.551292000000046],[14.902320000000088,49.54444700000005],[14.931938000000088,49.549366500000076],[14.88822900000008,49.37584450000003],[15.597790500000087,49.07648350000011],[15.54235750000015,48.90795700000007],[14.99685449900008,49.015290499],[14.690860499000081,48.58516650000007],[14.095727000000068,48.59236050000004],[13.839702999999986,48.771454500000004],[13.170573499999989,49.17344500000007],[12.657204500000148,49.444980000000044],[12.40189950000007,49.75839250000007],[12.55101049999999,49.90508600000004],[13.40667750099999,50.08970600100008]]]}},{"type":"Feature","properties":{"id":37,"nuts":"CZ04","name":"Severozápad","area":8649,"density":133,"edu_3":14.3,"gdp":12977,"gdp_ph":15700,"life_ex":76.4,"pop":1125429,"unempl":8.7,"coords":[13.45706464850006,50.36418700220005]},"geometry":{"type":"Polygon","coordinates":[[[14.618829500000146,50.85781250000008],[14.486469500000084,50.50502600000004],[14.16793148299999,50.33149651900004],[13.863879500000081,50.24407600000001],[13.40667750099999,50.08970600100008],[12.55101049999999,49.90508600000004],[12.260798999999992,50.05815650000011],[12.100199000000174,50.31832800000001],[13.462718501000069,50.601829002000045],[13.65213200000008,50.730353500000035],[14.618829500000146,50.85781250000008]]]}},{"type":"Feature","properties":{"id":38,"nuts":"CZ05","name":"Severovýchod","area":12441,"density":123,"edu_3":17.9,"gdp":18340,"gdp_ph":16700,"life_ex":78.6,"pop":1506503,"unempl":6.3,"coords":[15.730949427333403,50.32121104833338]},"geometry":{"type":"Polygon","coordinates":[[[16.863270000000085,50.19812300000001],[16.71197749999999,49.999667500000044],[16.80406799900007,49.59881850000005],[16.420475000000067,49.58560650000004],[15.497105500000174,49.86117750000011],[15.510495795999987,49.898448590000044],[15.349828500000086,50.29843400000004],[14.931861616000077,50.61014463100008],[14.486469500000084,50.50502600000004],[14.618829500000146,50.85781250000008],[14.823362000000088,50.870550500000036],[15.277251000000149,50.894201002000045],[15.863336999000069,50.68134800200005],[16.44492199999999,50.579571000000044],[16.36098849999999,50.37923650000005],[16.863270000000085,50.19812300000001]]]}},{"type":"Feature","properties":{"id":39,"nuts":"CZ06","name":"Jihovýchod","area":13991,"density":122.5,"edu_3":23.3,"gdp":22466,"gdp_ph":18400,"life_ex":79.1,"pop":1680287,"unempl":5.9,"coords":[16.131789825882457,49.24903263011771]},"geometry":{"type":"Polygon","coordinates":[[[16.80406799900007,49.59881850000005],[17.13897200000008,49.32702850000004],[17.230286500000147,49.040411000000006],[17.646875499000174,48.85431950100008],[17.19401550200007,48.87546150000003],[16.94120050000015,48.617000500000074],[16.644797500000067,48.78573800000004],[16.102875500000067,48.74553800000007],[15.54235750000015,48.90795700000007],[15.597790500000087,49.07648350000011],[14.88822900000008,49.37584450000003],[14.931938000000088,49.549366500000076],[14.934187404000085,49.55754534900001],[15.230470000000082,49.615024000000005],[15.49478313600008,49.86023436200003],[15.497105500000174,49.86117750000011],[16.420475000000067,49.58560650000004],[16.80406799900007,49.59881850000005]]]}},{"type":"Feature","properties":{"id":40,"nuts":"CZ07","name":"Střední Morava","area":9230,"density":134.2,"edu_3":18.7,"gdp":14715,"gdp_ph":16500,"life_ex":78.1,"pop":1222655,"unempl":6.9,"coords":[17.51884470593342,49.636085021666695]},"geometry":{"type":"Polygon","coordinates":[[[17.429605000000066,50.25451300000003],[17.427887860000084,50.24289886700001],[17.476077500000088,49.873175],[17.991256725000085,49.512891455000045],[18.35740949999999,49.44041750000008],[18.40367299900015,49.39653000100003],[18.322906507000084,49.31516650100008],[18.070480500000087,49.03786100000008],[17.646875499000174,48.85431950100008],[17.230286500000147,49.040411000000006],[17.13897200000008,49.32702850000004],[16.80406799900007,49.59881850000005],[16.71197749999999,49.999667500000044],[16.863270000000085,50.19812300000001],[16.90792450000015,50.449454],[17.429605000000066,50.25451300000003]]]}},{"type":"Feature","properties":{"id":41,"nuts":"CZ08","name":"Moravskoslezsko","area":5427,"density":230.5,"edu_3":16.7,"gdp":15932,"gdp_ph":17800,"life_ex":77.1,"pop":1221832,"unempl":8.6,"coords":[18.069216513900074,49.822934827900035]},"geometry":{"type":"Polygon","coordinates":[[[18.004322000000087,50.03779800000001],[18.052692697000083,50.05036037900004],[18.583914830000083,49.879447776000006],[18.843764500000077,49.51835500000004],[18.451347027000082,49.398933302000046],[18.35740949999999,49.44041750000008],[17.991256725000085,49.512891455000045],[17.476077500000088,49.873175],[17.427887860000084,50.24289886700001],[17.50349250000008,50.27507100000008],[18.004322000000087,50.03779800000001]]]}},{"type":"Feature","properties":{"id":42,"nuts":"DE11","name":"Stuttgart","area":10557,"density":383.6,"edu_3":30.9,"gdp":157661,"gdp_ph":38000,"life_ex":82.3,"pop":3972881,"unempl":3.1,"coords":[9.598486807615444,49.041392577076984]},"geometry":{"type":"Polygon","coordinates":[[[10.083622999999989,49.542955500000005],[10.129171500000012,49.19572150000005],[10.409849500000092,48.97743550000007],[10.230779500000011,48.51051100000001],[9.944071500000092,48.63175550000011],[9.658433500000086,48.519310500000074],[9.15122949900001,48.60405550200011],[8.768902500000081,48.52184100000011],[8.932547000000085,48.99322650000005],[8.818233000000077,49.19449700000007],[9.593832000000077,49.39180850000008],[9.41092000000009,49.663508000000036],[9.64873600000007,49.79147750000004],[10.083622999999989,49.542955500000005]]]}},{"type":"Feature","properties":{"id":43,"nuts":"DE12","name":"Karlsruhe","area":6919,"density":400.9,"edu_3":29.9,"gdp":96563,"gdp_ph":34000,"life_ex":82,"pop":2702831,"unempl":3.5,"coords":[8.691336807769293,49.03249230769235]},"geometry":{"type":"Polygon","coordinates":[[[8.768902500000081,48.52184100000011],[8.737186500000092,48.377977000000044],[8.25997000000001,48.36688300000003],[8.24112199999999,48.629232],[7.959626502000077,48.718578000000036],[8.232571500000091,48.966507000000036],[8.507021998999988,49.43750050000003],[8.422439500000081,49.58338550000008],[9.103006000000079,49.57745600000004],[9.41092000000009,49.663508000000036],[9.593832000000077,49.39180850000008],[8.818233000000077,49.19449700000007],[8.932547000000085,48.99322650000005],[8.768902500000081,48.52184100000011]]]}},{"type":"Feature","properties":{"id":44,"nuts":"DE13","name":"Freiburg","area":9357,"density":237.7,"edu_3":27,"gdp":68817,"gdp_ph":30200,"life_ex":82.4,"pop":2174500,"unempl":3,"coords":[8.383823083000056,47.93490049223079]},"geometry":{"type":"Polygon","coordinates":[[[8.737186500000092,48.377977000000044],[9.255832000000083,47.65910650000001],[8.606369500000085,47.66900550000008],[8.613503697999988,47.645689860000005],[8.59560200000007,47.60554450000001],[8.562841000000077,47.599432500000034],[8.564285379000012,47.603424039000004],[8.426434500000084,47.56754900000004],[7.589039000000071,47.58987800000003],[7.577888000000087,48.121406500000035],[7.959626502000077,48.718578000000036],[8.24112199999999,48.629232],[8.25997000000001,48.36688300000003],[8.737186500000092,48.377977000000044]]]}},{"type":"Feature","properties":{"id":45,"nuts":"DE14","name":"Tübingen","area":8918,"density":204.4,"edu_3":30.5,"gdp":62350,"gdp_ph":33300,"life_ex":82.1,"pop":1781066,"unempl":2.6,"coords":[9.593642272636428,48.22915677290916]},"geometry":{"type":"Polygon","coordinates":[[[10.230779500000011,48.51051100000001],[9.967275500000085,48.37440450000008],[10.136457000000092,48.10845950000004],[10.12933600000008,47.67613650000004],[9.550561499999986,47.53716700000007],[9.255832000000083,47.65910650000001],[8.737186500000092,48.377977000000044],[8.768902500000081,48.52184100000011],[9.15122949900001,48.60405550200011],[9.658433500000086,48.519310500000074],[9.944071500000092,48.63175550000011],[10.230779500000011,48.51051100000001]]]}},{"type":"Feature","properties":{"id":46,"nuts":"DE21","name":"Oberbayern","area":17531,"density":257.2,"edu_3":37.1,"gdp":192397,"gdp_ph":42200,"life_ex":82.1,"pop":4469342,"unempl":2.5,"coords":[11.87621455538896,48.100522194611166]},"geometry":{"type":"Polygon","coordinates":[[[11.599516999000087,48.95120950100011],[11.706735000000066,48.6166465],[12.250551000000087,48.32194600000008],[12.483791000000082,48.42967550000003],[12.944656998999989,48.20668400000011],[12.860444500000085,47.99663950000007],[13.080323000000078,47.68716450000011],[13.00368950000015,47.463310500000034],[12.574938500000087,47.63232800000003],[12.264959500000174,47.732506],[11.63243550000007,47.592404000000045],[11.280776000000088,47.40076050000005],[10.88615949999999,47.53683950000004],[10.720653000000084,47.699099500000045],[10.848869000000093,48.14779100000004],[11.31080950000009,48.45226100000008],[10.93683949999999,48.86327600000004],[11.38571399899999,49.078858002000004],[11.599516999000087,48.95120950100011]]]}},{"type":"Feature","properties":{"id":47,"nuts":"DE22","name":"Niederbayern","area":10329,"density":116.3,"edu_3":21.1,"gdp":38694,"gdp_ph":31400,"life_ex":81,"pop":1189153,"unempl":2.8,"coords":[12.579480499909135,48.71789650027278]},"geometry":{"type":"Polygon","coordinates":[[[13.839702999999986,48.771454500000004],[13.727576500999987,48.513027002],[12.944656998999989,48.20668400000011],[12.483791000000082,48.42967550000003],[12.250551000000087,48.32194600000008],[11.706735000000066,48.6166465],[11.599516999000087,48.95120950100011],[11.86934400000007,49.020406500000036],[12.192710000000147,48.79325250000011],[12.58912749999999,49.09911450000004],[13.170573499999989,49.17344500000007],[13.839702999999986,48.771454500000004]]]}},{"type":"Feature","properties":{"id":48,"nuts":"DE23","name":"Oberpfalz","area":9690,"density":112,"edu_3":25.2,"gdp":36336,"gdp_ph":32500,"life_ex":80.6,"pop":1077991,"unempl":2.7,"coords":[12.089529769076977,49.36807015407697]},"geometry":{"type":"Polygon","coordinates":[[[12.55101049999999,49.90508600000004],[12.40189950000007,49.75839250000007],[12.657204500000148,49.444980000000044],[13.170573499999989,49.17344500000007],[12.58912749999999,49.09911450000004],[12.192710000000147,48.79325250000011],[11.86934400000007,49.020406500000036],[11.599516999000087,48.95120950100011],[11.38571399899999,49.078858002000004],[11.334081500000082,49.30269300000003],[11.59145749999999,49.485027],[11.560448500000149,49.714291],[12.260798999999992,50.05815650000011],[12.55101049999999,49.90508600000004]]]}},{"type":"Feature","properties":{"id":49,"nuts":"DE24","name":"Oberfranken","area":7231,"density":147,"edu_3":24.4,"gdp":32105,"gdp_ph":29000,"life_ex":80.2,"pop":1056365,"unempl":4,"coords":[11.323925666666732,50.060900277777826]},"geometry":{"type":"Polygon","coordinates":[[[11.921447500000085,50.42464750000005],[12.100199000000174,50.31832800000001],[12.260798999999992,50.05815650000011],[11.560448500000149,49.714291],[11.146328000000011,49.58878150000007],[10.55143600000008,49.755772500000035],[10.859339000000091,50.073638000000074],[10.729201999999987,50.230005500000004],[10.78613200000001,50.38448200000005],[11.921447500000085,50.42464750000005]]]}},{"type":"Feature","properties":{"id":50,"nuts":"DE25","name":"Mittelfranken","area":7245,"density":239.2,"edu_3":27.8,"gdp":59155,"gdp_ph":33300,"life_ex":81.1,"pop":1707376,"unempl":3.1,"coords":[10.912894899900039,49.350481150200025]},"geometry":{"type":"Polygon","coordinates":[[[11.560448500000149,49.714291],[11.59145749999999,49.485027],[11.334081500000082,49.30269300000003],[11.38571399899999,49.078858002000004],[10.93683949999999,48.86327600000004],[10.409849500000092,48.97743550000007],[10.129171500000012,49.19572150000005],[10.083622999999989,49.542955500000005],[10.55143600000008,49.755772500000035],[11.146328000000011,49.58878150000007],[11.560448500000149,49.714291]]]}},{"type":"Feature","properties":{"id":51,"nuts":"DE26","name":"Unterfranken","area":8531,"density":153.9,"edu_3":25.7,"gdp":42738,"gdp_ph":31400,"life_ex":81.4,"pop":1297992,"unempl":2.9,"coords":[9.90793341666672,50.02232975000002]},"geometry":{"type":"Polygon","coordinates":[[[10.729201999999987,50.230005500000004],[10.859339000000091,50.073638000000074],[10.55143600000008,49.755772500000035],[10.083622999999989,49.542955500000005],[9.64873600000007,49.79147750000004],[9.41092000000009,49.663508000000036],[9.103006000000079,49.57745600000004],[9.01826100000008,50.111604],[9.51246400000008,50.094355500000006],[9.732938499999989,50.3558165],[10.041401500000092,50.51666700000004],[10.203874000000013,50.55470100000008],[10.729201999999987,50.230005500000004]]]}},{"type":"Feature","properties":{"id":52,"nuts":"DE27","name":"Schwaben","area":9993,"density":180.6,"edu_3":25.2,"gdp":57891,"gdp_ph":31300,"life_ex":81.4,"pop":1806025,"unempl":3,"coords":[10.345214500000054,48.01293964285719]},"geometry":{"type":"Polygon","coordinates":[[[10.178269500000084,47.2701265],[9.965299499999986,47.52309050000008],[9.561844500000092,47.504557000000034],[9.550561499999986,47.53716700000007],[10.12933600000008,47.67613650000004],[10.136457000000092,48.10845950000004],[9.967275500000085,48.37440450000008],[10.230779500000011,48.51051100000001],[10.409849500000092,48.97743550000007],[10.93683949999999,48.86327600000004],[11.31080950000009,48.45226100000008],[10.848869000000093,48.14779100000004],[10.720653000000084,47.699099500000045],[10.88615949999999,47.53683950000004],[10.178269500000084,47.2701265]]]}},{"type":"Feature","properties":{"id":53,"nuts":"DE30","name":"Berlin","area":892,"density":4001.1,"edu_3":36.1,"gdp":101815,"gdp_ph":28300,"life_ex":81,"pop":3421829,"unempl":9.8,"coords":[13.364040508250035,52.52196100100002]},"geometry":{"type":"Polygon","coordinates":[[[13.627629410000083,52.47165572800003],[13.16383546099999,52.39698415600003],[13.153776099999988,52.595100073000026],[13.51092106200008,52.624104047],[13.627629410000083,52.47165572800003]]]}},{"type":"Feature","properties":{"id":54,"nuts":"DE40","name":"Brandenburg","area":29654,"density":84.5,"edu_3":27.7,"gdp":56852,"gdp_ph":22000,"life_ex":80.4,"pop":2449193,"unempl":6.7,"coords":[13.38246320136007,52.46863650020005]},"geometry":{"type":"Polygon","coordinates":[[[14.41215700000015,53.329635999000004],[14.127624000000083,52.83166250000005],[14.565063000000066,52.624497000000076],[14.534361999999987,52.395008000000075],[14.75522699999999,52.070025000000044],[14.611003000000068,51.857009000000005],[14.729862000000082,51.581777000000045],[14.139565000000147,51.543986500000074],[14.003716500000081,51.39544700000005],[13.210150000000084,51.40473600000007],[13.051025000000067,51.647677000000044],[13.123426501000068,51.85689949900001],[12.216783000000078,52.17006850000007],[12.143359500000088,52.53663250000011],[12.23405700000015,52.85937750000011],[11.597784499999989,53.03592650000007],[11.265732000000071,53.12197800000007],[12.057339500000069,53.349342000000036],[12.976881000000077,53.197366500000044],[13.523199000000147,53.32030300300005],[13.827101500000083,53.49871350000001],[14.41215700000015,53.329635999000004]],[[13.627629410000083,52.47165572800003],[13.51092106200008,52.624104047],[13.153776099999988,52.595100073000026],[13.16383546099999,52.39698415600003],[13.627629410000083,52.47165572800003]]]}},{"type":"Feature","properties":{"id":55,"nuts":"DE50","name":"Bremen","area":419,"density":1585.6,"edu_3":26.5,"gdp":27135,"gdp_ph":39700,"life_ex":80.2,"pop":657391,"unempl":6.6,"coords":[8.70419383400006,53.094257166666715]},"geometry":{"type":"Polygon","coordinates":[[[8.915827000000093,53.01102150000003],[8.711424000000079,53.04463000000004],[8.48533050200001,53.22712000000007],[8.915827000000093,53.01102150000003]]]}},{"type":"Feature","properties":{"id":56,"nuts":"DE60","name":"Hamburg","area":755,"density":2411,"edu_3":33.6,"gdp":94071,"gdp_ph":50700,"life_ex":81.3,"pop":1746342,"unempl":5,"coords":[10.068739500000087,53.57634416666669]},"geometry":{"type":"Polygon","coordinates":[[[10.308312000000086,53.4332215],[9.729669000000086,53.55757500000004],[10.168237500000089,53.73823600000003],[10.308312000000086,53.4332215]]]}},{"type":"Feature","properties":{"id":57,"nuts":"DE71","name":"Darmstadt","area":7445,"density":521,"edu_3":32,"gdp":160276,"gdp_ph":40500,"life_ex":81.8,"pop":3822479,"unempl":4.5,"coords":[8.815407399900058,50.093225749900036]},"geometry":{"type":"Polygon","coordinates":[[[9.479113000000012,50.44068550000003],[9.732938499999989,50.3558165],[9.51246400000008,50.094355500000006],[9.01826100000008,50.111604],[9.103006000000079,49.57745600000004],[8.422439500000081,49.58338550000008],[8.343030500000083,49.94050600000003],[7.7739970000000085,50.06654000000003],[8.122167999000084,50.277487499000074],[8.646656500000091,50.484421000000026],[9.479113000000012,50.44068550000003]]]}},{"type":"Feature","properties":{"id":58,"nuts":"DE72","name":"Gießen","area":5381,"density":192.7,"edu_3":25.8,"gdp":30123,"gdp_ph":28000,"life_ex":81,"pop":1023150,"unempl":4.5,"coords":[8.792102285428639,50.648862857000054]},"geometry":{"type":"Polygon","coordinates":[[[9.479113000000012,50.44068550000003],[8.646656500000091,50.484421000000026],[8.122167999000084,50.277487499000074],[8.125776500000086,50.68581400000011],[8.477891999000093,50.969047500000045],[9.109958000000091,50.91897750000004],[9.583152000000013,50.765607000000045],[9.479113000000012,50.44068550000003]]]}},{"type":"Feature","properties":{"id":59,"nuts":"DE73","name":"Kassel","area":8289,"density":146.3,"edu_3":22.5,"gdp":37290,"gdp_ph":29600,"life_ex":80.8,"pop":1199796,"unempl":4.4,"coords":[9.545794227181869,50.97282795454549]},"geometry":{"type":"Polygon","coordinates":[[[9.928523000000013,51.37518550000004],[10.20721350000008,51.19090700000004],[10.032434500000079,51.01104650000008],[10.041401500000092,50.51666700000004],[9.732938499999989,50.3558165],[9.479113000000012,50.44068550000003],[9.583152000000013,50.765607000000045],[9.109958000000091,50.91897750000004],[8.477891999000093,50.969047500000045],[8.970653500000083,51.50677350000001],[9.44045700000001,51.650394000000006],[9.928523000000013,51.37518550000004]]]}},{"type":"Feature","properties":{"id":60,"nuts":"DE80","name":"Mecklenburg-Vorpommern","area":23212,"density":70,"edu_3":24.1,"gdp":35714,"gdp_ph":21100,"life_ex":79.9,"pop":1596505,"unempl":9.6,"coords":[12.498334406250088,53.69241693762504]},"geometry":{"type":"Polygon","coordinates":[[[14.267542000000077,53.69780650000007],[14.41215700000015,53.329635999000004],[13.827101500000083,53.49871350000001],[13.523199000000147,53.32030300300005],[12.976881000000077,53.197366500000044],[12.057339500000069,53.349342000000036],[11.265732000000071,53.12197800000007],[10.59504700000008,53.363927500000045],[10.910742500000083,53.57232400000004],[10.903661500000084,53.956822000000045],[11.479406000000012,53.938743000000045],[11.68028600000008,54.15288050000004],[12.128960000000149,54.18693100000007],[12.524746500000077,54.48567650000007],[13.477056500000174,54.118344000000036],[13.94349249999999,53.78787700000004],[14.267542000000077,53.69780650000007]]]}},{"type":"Feature","properties":{"id":61,"nuts":"DE91","name":"Braunschweig","area":8100,"density":198.1,"edu_3":25.3,"gdp":52118,"gdp_ph":31300,"life_ex":80.6,"pop":1574936,"unempl":5.5,"coords":[10.223379833250041,52.07355820816673]},"geometry":{"type":"Polygon","coordinates":[[[10.759314499999988,52.79583050000011],[11.08550249999999,52.22880900000007],[10.647516000000081,52.04169250000007],[10.701372000000077,51.642187500000034],[9.928523000000013,51.37518550000004],[9.44045700000001,51.650394000000006],[9.417317500000081,51.64726950000005],[9.70521500000001,51.87753199900004],[10.196448500000088,51.95765800000004],[10.080739500000078,52.33973650000007],[10.273742500000083,52.51064000000008],[10.444409998999987,52.81576349900007],[10.759314499999988,52.79583050000011]]]}},{"type":"Feature","properties":{"id":62,"nuts":"DE92","name":"Hannover","area":9048,"density":236.5,"edu_3":25.2,"gdp":66259,"gdp_ph":29900,"life_ex":80.9,"pop":2099079,"unempl":5.2,"coords":[9.298142923076988,52.36404603838466]},"geometry":{"type":"Polygon","coordinates":[[[10.273742500000083,52.51064000000008],[10.080739500000078,52.33973650000007],[10.196448500000088,51.95765800000004],[9.70521500000001,51.87753199900004],[9.417317500000081,51.64726950000005],[9.448157000000009,51.79479950000007],[9.075461999999987,52.234117000000026],[9.125475500000078,52.41233850000003],[8.296840000000088,52.45649100000003],[8.31143300000008,52.687685000000045],[8.711424000000079,53.04463000000004],[8.915827000000093,53.01102150000003],[9.317776500000093,52.75868000000003],[10.273742500000083,52.51064000000008]]]}},{"type":"Feature","properties":{"id":63,"nuts":"DE93","name":"Lüneburg","area":15495,"density":109.1,"edu_3":21.6,"gdp":37270,"gdp_ph":21300,"life_ex":80.6,"pop":1670199,"unempl":4,"coords":[9.898873781375055,53.22243718737504]},"geometry":{"type":"Polygon","coordinates":[[[9.023407000000077,53.87965750000001],[9.31289950100009,53.85318899900011],[9.729669000000086,53.55757500000004],[10.308312000000086,53.4332215],[10.59504700000008,53.363927500000045],[11.265732000000071,53.12197800000007],[11.597784499999989,53.03592650000007],[11.293993000000086,52.874877000000026],[10.759314499999988,52.79583050000011],[10.444409998999987,52.81576349900007],[10.273742500000083,52.51064000000008],[9.317776500000093,52.75868000000003],[8.915827000000093,53.01102150000003],[8.48533050200001,53.22712000000007],[8.49265299999999,53.47412750000001],[8.566082500000078,53.84546],[9.023407000000077,53.87965750000001]]]}},{"type":"Feature","properties":{"id":64,"nuts":"DE94","name":"Weser-Ems","area":14971,"density":166.1,"edu_3":20.6,"gdp":70136,"gdp_ph":27300,"life_ex":80.6,"pop":2446345,"unempl":4.1,"coords":[7.79655586673339,52.885332699933365]},"geometry":{"type":"Polygon","coordinates":[[[8.49265299999999,53.47412750000001],[8.48533050200001,53.22712000000007],[8.711424000000079,53.04463000000004],[8.31143300000008,52.687685000000045],[8.296840000000088,52.45649100000003],[8.388116000000082,52.108025000000026],[8.097203500000091,52.05776050000003],[7.71374449999999,52.40104800100005],[7.06575550000008,52.24128350000001],[6.71005750000009,52.62780550000011],[7.092739499000089,52.83819599900005],[7.209258000000091,53.243786],[7.023717500000089,53.48348499900004],[7.31734800000001,53.68354550000004],[8.03271749999999,53.705002000000036],[8.49265299999999,53.47412750000001]]]}},{"type":"Feature","properties":{"id":65,"nuts":"DEA1","name":"Düsseldorf","area":5292,"density":975.8,"edu_3":23.8,"gdp":183446,"gdp_ph":34400,"life_ex":80.3,"pop":5088748,"unempl":6.3,"coords":[6.573051625000073,51.483806250000036]},"geometry":{"type":"Polygon","coordinates":[[[6.4074870000000885,51.828095500000074],[6.940550500000086,51.71556250000003],[7.10420049999999,51.4812675],[7.30669350000008,51.238875500000006],[6.5790255000000855,51.01808300000005],[6.1748640000000705,51.184414000000004],[6.118231500000093,51.656051500000046],[5.9533605000000875,51.74810050000008],[6.4074870000000885,51.828095500000074]]]}},{"type":"Feature","properties":{"id":66,"nuts":"DEA2","name":"Köln","area":7364,"density":601.6,"edu_3":28.3,"gdp":147296,"gdp_ph":32400,"life_ex":81.1,"pop":4333015,"unempl":5.3,"coords":[6.792365500100035,50.77933020010005]},"geometry":{"type":"Polygon","coordinates":[[[7.785898000000088,50.939914000000044],[7.659471000999986,50.77070450100007],[6.927900999999991,50.55861850000008],[6.800711500000091,50.361781500000006],[6.405028499999986,50.32330850000011],[6.263062999999988,50.64330700000005],[6.020998999999989,50.75429550000007],[6.1748640000000705,51.184414000000004],[6.5790255000000855,51.01808300000005],[7.30669350000008,51.238875500000006],[7.785898000000088,50.939914000000044]]]}},{"type":"Feature","properties":{"id":67,"nuts":"DEA3","name":"Münster","area":6917,"density":375.5,"edu_3":22.7,"gdp":74761,"gdp_ph":27800,"life_ex":80.6,"pop":2574148,"unempl":4.9,"coords":[7.360108722222268,51.92371838900003]},"geometry":{"type":"Polygon","coordinates":[[[8.097203500000091,52.05776050000003],[8.320283499999988,51.72550800000005],[7.831305500000013,51.74436000000003],[7.10420049999999,51.4812675],[6.940550500000086,51.71556250000003],[6.4074870000000885,51.828095500000074],[6.760448000000082,52.11858000000001],[7.06575550000008,52.24128350000001],[7.71374449999999,52.40104800100005],[8.097203500000091,52.05776050000003]]]}},{"type":"Feature","properties":{"id":68,"nuts":"DEA4","name":"Detmold","area":6525,"density":311.3,"edu_3":21.7,"gdp":63795,"gdp_ph":30300,"life_ex":80.9,"pop":2024392,"unempl":5,"coords":[8.84978513636369,51.91280568181821]},"geometry":{"type":"Polygon","coordinates":[[[9.417317500000081,51.64726950000005],[9.44045700000001,51.650394000000006],[8.970653500000083,51.50677350000001],[8.767671000000092,51.44738600000011],[8.320283499999988,51.72550800000005],[8.097203500000091,52.05776050000003],[8.388116000000082,52.108025000000026],[8.296840000000088,52.45649100000003],[9.125475500000078,52.41233850000003],[9.075461999999987,52.234117000000026],[9.448157000000009,51.79479950000007],[9.417317500000081,51.64726950000005]]]}},{"type":"Feature","properties":{"id":69,"nuts":"DEA5","name":"Arnsberg","area":8012,"density":453.2,"edu_3":20.9,"gdp":106796,"gdp_ph":28300,"life_ex":80,"pop":3551553,"unempl":5.7,"coords":[8.076708222111169,51.304327333333376]},"geometry":{"type":"Polygon","coordinates":[[[8.320283499999988,51.72550800000005],[8.767671000000092,51.44738600000011],[8.970653500000083,51.50677350000001],[8.477891999000093,50.969047500000045],[8.125776500000086,50.68581400000011],[7.785898000000088,50.939914000000044],[7.30669350000008,51.238875500000006],[7.10420049999999,51.4812675],[7.831305500000013,51.74436000000003],[8.320283499999988,51.72550800000005]]]}},{"type":"Feature","properties":{"id":70,"nuts":"DEB1","name":"Koblenz","area":8073,"density":182.3,"edu_3":21.9,"gdp":41172,"gdp_ph":26900,"life_ex":80.5,"pop":1474378,"unempl":4,"coords":[7.520288681727325,50.24035781809096]},"geometry":{"type":"Polygon","coordinates":[[[8.125776500000086,50.68581400000011],[8.122167999000084,50.277487499000074],[7.7739970000000085,50.06654000000003],[7.968769500000093,49.854130001000044],[7.276622500000087,49.54862349900003],[7.0279800000000705,49.63943850000004],[7.25388049899999,49.94088399900011],[6.800711500000091,50.361781500000006],[6.927900999999991,50.55861850000008],[7.659471000999986,50.77070450100007],[7.785898000000088,50.939914000000044],[8.125776500000086,50.68581400000011]]]}},{"type":"Feature","properties":{"id":71,"nuts":"DEB2","name":"Trier","area":4924,"density":104.2,"edu_3":25.7,"gdp":13404,"gdp_ph":25300,"life_ex":81.4,"pop":519136,"unempl":3,"coords":[6.624006946285773,49.93190071928576]},"geometry":{"type":"Polygon","coordinates":[[[6.800711500000091,50.361781500000006],[7.25388049899999,49.94088399900011],[7.0279800000000705,49.63943850000004],[6.380041000000091,49.55114000000003],[6.36274462500009,49.576801036000006],[6.13766250000009,50.129951500000004],[6.405028499999986,50.32330850000011],[6.800711500000091,50.361781500000006]]]}},{"type":"Feature","properties":{"id":72,"nuts":"DEB3","name":"Rheinhessen-Pfalz","area":6851,"density":294.1,"edu_3":26.7,"gdp":61123,"gdp_ph":29400,"life_ex":80.9,"pop":2000852,"unempl":3.9,"coords":[7.947651777888954,49.512517222222264]},"geometry":{"type":"Polygon","coordinates":[[[8.422439500000081,49.58338550000008],[8.507021998999988,49.43750050000003],[8.232571500000091,48.966507000000036],[7.635655502000077,49.05397100000005],[7.368758000000071,49.16149150000007],[7.276622500000087,49.54862349900003],[7.968769500000093,49.854130001000044],[7.7739970000000085,50.06654000000003],[8.343030500000083,49.94050600000003],[8.422439500000081,49.58338550000008]]]}},{"type":"Feature","properties":{"id":73,"nuts":"DEC0","name":"Saarland","area":2569,"density":392.3,"edu_3":19.9,"gdp":31713,"gdp_ph":30200,"life_ex":80.2,"pop":990718,"unempl":5.8,"coords":[6.790613901142925,49.44013082585718]},"geometry":{"type":"Polygon","coordinates":[[[7.0279800000000705,49.63943850000004],[7.276622500000087,49.54862349900003],[7.368758000000071,49.16149150000007],[6.738339000000082,49.163669500000026],[6.367102499999987,49.46948250000003],[6.375454308000087,49.54707028200005],[6.380041000000091,49.55114000000003],[7.0279800000000705,49.63943850000004]]]}},{"type":"Feature","properties":{"id":74,"nuts":"DED2","name":"Dresden","area":7931,"density":204.6,"edu_3":31,"gdp":37639,"gdp_ph":22400,"life_ex":81.3,"pop":1590927,"unempl":7.4,"coords":[14.150056444444537,51.2198909444445]},"geometry":{"type":"Polygon","coordinates":[[[14.974183000000068,51.363950000000045],[14.823362000000088,50.870550500000036],[14.618829500000146,50.85781250000008],[13.65213200000008,50.730353500000035],[13.198708000000067,51.230405500000074],[13.210150000000084,51.40473600000007],[14.003716500000081,51.39544700000005],[14.139565000000147,51.543986500000074],[14.729862000000082,51.581777000000045],[14.974183000000068,51.363950000000045]]]}},{"type":"Feature","properties":{"id":75,"nuts":"DED4","name":"Chemnitz","area":6524,"density":229.1,"edu_3":24.8,"gdp":33873,"gdp_ph":21500,"life_ex":80.7,"pop":1468954,"unempl":6.3,"coords":[12.765656125125108,50.78806293775003]},"geometry":{"type":"Polygon","coordinates":[[[13.65213200000008,50.730353500000035],[13.462718501000069,50.601829002000045],[12.100199000000174,50.31832800000001],[11.921447500000085,50.42464750000005],[12.27868000000015,50.809596500000026],[12.617355000000174,50.980793000000006],[12.894009000000068,51.2085505],[13.198708000000067,51.230405500000074],[13.65213200000008,50.730353500000035]]]}},{"type":"Feature","properties":{"id":76,"nuts":"DED5","name":"Leipzig","area":3965,"density":255.4,"edu_3":30,"gdp":24508,"gdp_ph":23700,"life_ex":80.6,"pop":986504,"unempl":8.3,"coords":[12.779288857142944,51.299120142857184]},"geometry":{"type":"Polygon","coordinates":[[[13.051025000000067,51.647677000000044],[13.210150000000084,51.40473600000007],[13.198708000000067,51.230405500000074],[12.894009000000068,51.2085505],[12.617355000000174,50.980793000000006],[12.28483600000007,51.090358500000036],[12.198939000000081,51.53132050000005],[13.051025000000067,51.647677000000044]]]}},{"type":"Feature","properties":{"id":77,"nuts":"DEE0","name":"Sachsen-Anhalt","area":20452,"density":111.9,"edu_3":23.7,"gdp":51817,"gdp_ph":21500,"life_ex":79.4,"pop":2244577,"unempl":8.8,"coords":[11.706523500062566,52.016257968687555]},"geometry":{"type":"Polygon","coordinates":[[[13.051025000000067,51.647677000000044],[12.198939000000081,51.53132050000005],[12.28483600000007,51.090358500000036],[11.666950000000071,51.11078550000008],[11.321404500000085,51.41080000000011],[10.978113000000093,51.42688500000003],[10.701372000000077,51.642187500000034],[10.647516000000081,52.04169250000007],[11.08550249999999,52.22880900000007],[10.759314499999988,52.79583050000011],[11.293993000000086,52.874877000000026],[11.597784499999989,53.03592650000007],[12.23405700000015,52.85937750000011],[12.143359500000088,52.53663250000011],[12.216783000000078,52.17006850000007],[13.123426501000068,51.85689949900001],[13.051025000000067,51.647677000000044]]]}},{"type":"Feature","properties":{"id":78,"nuts":"DEF0","name":"Schleswig-Holstein","area":15800,"density":180.1,"edu_3":23.4,"gdp":75892,"gdp_ph":25900,"life_ex":80.7,"pop":2815955,"unempl":4.6,"coords":[9.842518400200072,54.09944889993338]},"geometry":{"type":"Polygon","coordinates":[[[9.420411000000087,54.831928000000005],[9.95779500000009,54.77924200000007],[10.02646999999999,54.549968500000034],[11.094543499999986,54.199920500000076],[10.903661500000084,53.956822000000045],[10.910742500000083,53.57232400000004],[10.59504700000008,53.363927500000045],[10.308312000000086,53.4332215],[10.168237500000089,53.73823600000003],[9.729669000000086,53.55757500000004],[9.31289950100009,53.85318899900011],[9.023407000000077,53.87965750000001],[8.658673502000084,54.26617150000004],[8.892347000000086,54.59789900000004],[8.635560000000083,54.911651500000005],[9.420411000000087,54.831928000000005]]]}},{"type":"Feature","properties":{"id":79,"nuts":"DEG0","name":"Thüringen","area":16173,"density":136.3,"edu_3":27,"gdp":48897,"gdp_ph":21200,"life_ex":80.2,"pop":2160840,"unempl":6,"coords":[11.046595900000073,50.94393653333338]},"geometry":{"type":"Polygon","coordinates":[[[12.28483600000007,51.090358500000036],[12.617355000000174,50.980793000000006],[12.27868000000015,50.809596500000026],[11.921447500000085,50.42464750000005],[10.78613200000001,50.38448200000005],[10.729201999999987,50.230005500000004],[10.203874000000013,50.55470100000008],[10.041401500000092,50.51666700000004],[10.032434500000079,51.01104650000008],[10.20721350000008,51.19090700000004],[9.928523000000013,51.37518550000004],[10.701372000000077,51.642187500000034],[10.978113000000093,51.42688500000003],[11.321404500000085,51.41080000000011],[11.666950000000071,51.11078550000008],[12.28483600000007,51.090358500000036]]]}},{"type":"Feature","properties":{"id":80,"nuts":"DK01","name":"Hovedstaden","area":2558,"density":681.8,"edu_3":47.6,"gdp":89604,"gdp_ph":38300,"life_ex":80.2,"pop":1749405,"unempl":7.1,"coords":[12.355414125000088,55.77394375000002]},"geometry":{"type":"Polygon","coordinates":[[[12.363400500000068,55.594043500000026],[12.08959100000007,55.78086450000001],[12.286852000000067,56.129230500000006],[12.681813000000147,55.59163650000005],[12.363400500000068,55.594043500000026]]]}},{"type":"Feature","properties":{"id":81,"nuts":"DK02","name":"Sjælland","area":7223,"density":113.1,"edu_3":29,"gdp":24753,"gdp_ph":22000,"life_ex":79.7,"pop":816726,"unempl":6.3,"coords":[11.827332571428611,55.4874122144286]},"geometry":{"type":"Polygon","coordinates":[[[12.08959100000007,55.78086450000001],[12.363400500000068,55.594043500000026],[12.454378999999989,55.33089500000003],[11.818906000000084,55.032443],[11.244183499999991,55.20795750100001],[11.150046500000087,55.58624250000008],[11.670821499999988,55.879439500000046],[12.08959100000007,55.78086450000001]]]}},{"type":"Feature","properties":{"id":82,"nuts":"DK03","name":"Syddanmark","area":12256,"density":98.1,"edu_3":29.9,"gdp":45856,"gdp_ph":27800,"life_ex":80.6,"pop":1202509,"unempl":6.7,"coords":[9.039182100000051,55.444738100000066]},"geometry":{"type":"Polygon","coordinates":[[[9.672071499999987,55.71215050000001],[9.592829500000079,55.41881550000011],[9.73775950000001,54.98752950000011],[9.420411000000087,54.831928000000005],[8.635560000000083,54.911651500000005],[8.619640500000088,55.42790350000007],[8.075344000000086,55.55805550000008],[8.180329500000084,55.83074200000004],[9.07088250000001,55.84445400000004],[9.38699299999999,55.92415100000011],[9.672071499999987,55.71215050000001]]]}},{"type":"Feature","properties":{"id":83,"nuts":"DK04","name":"Midtjylland","area":13005,"density":98,"edu_3":33.1,"gdp":48912,"gdp_ph":28200,"life_ex":80.9,"pop":1277538,"unempl":6.1,"coords":[9.529046770384651,56.22557523176925]},"geometry":{"type":"Polygon","coordinates":[[[9.672071499999987,55.71215050000001],[9.38699299999999,55.92415100000011],[9.07088250000001,55.84445400000004],[8.180329500000084,55.83074200000004],[8.120933001999987,56.546570005000035],[8.70234099999999,56.58517850000004],[8.949549499000085,56.79810699900003],[9.751562500000091,56.55636000000004],[10.112222511999988,56.624534509],[10.95898050000008,56.442161500000026],[10.750315502000092,56.23087300000003],[10.209364000000079,56.135681000000034],[10.012063000000012,55.70151500000003],[9.672071499999987,55.71215050000001]]]}},{"type":"Feature","properties":{"id":84,"nuts":"DK05","name":"Nordjylland","area":7879,"density":73.7,"edu_3":27.1,"gdp":21853,"gdp_ph":27500,"life_ex":80.1,"pop":581057,"unempl":6.4,"coords":[9.364504222222312,57.091083000000054]},"geometry":{"type":"Polygon","coordinates":[[[8.405194500000079,56.67562550000008],[8.228488000000084,56.78437400000007],[8.58964350000008,57.122071500000004],[9.39941450100008,57.16381600000011],[9.961119000000082,57.59778600000004],[10.56111200000015,57.44741800000003],[10.332819000000086,56.989303500000005],[10.017487499000083,57.08725350000009],[8.78526000000008,56.95209900000003],[8.405194500000079,56.67562550000008]]]}},{"type":"Feature","properties":{"id":85,"nuts":"EE00","name":"Eesti","area":45227,"density":30.3,"edu_3":38.8,"gdp":16216,"gdp_ph":17400,"life_ex":77.5,"pop":1315819,"unempl":7.4,"coords":[25.873513289526393,58.54889226321059]},"geometry":{"type":"Polygon","coordinates":[[[27.351579001000147,57.518237001000045],[26.92589950000007,57.633320000000026],[26.499849500000067,57.52450950000011],[26.205723000000148,57.71500000000003],[25.19941200000008,58.085575000000006],[24.352817499999986,57.87655650000005],[24.47882750000008,58.06758550000001],[23.74599500000008,58.34105450000004],[23.520893000000086,58.57408400000003],[23.48500800000008,59.19073750000007],[24.362847499999987,59.47118500000005],[25.42665200100015,59.48999800100009],[25.77609799999999,59.57282850000007],[26.620900500000147,59.5510175],[26.96107400000008,59.43594850000011],[28.208416500000084,59.38471750000011],[27.359166499999986,58.78722200000004],[27.561666500000086,58.377500000000026],[27.553926999000083,57.83187649900009],[27.351579001000147,57.518237001000045]]]}},{"type":"Feature","properties":{"id":86,"nuts":"EL11","name":"Anatoliki Makedonia","area":14157,"density":43.8,"edu_3":20.5,"gdp":8228,"gdp_ph":14200,"life_ex":80,"pop":606225,"unempl":24.2,"coords":[25.191641302588305,41.17402555823533]},"geometry":{"type":"Polygon","coordinates":[[[26.358526500000067,41.71183000000008],[26.60289549999999,41.598148500000036],[26.62684999999999,41.34576100000007],[26.32620250000008,41.255321500000036],[26.364515499000078,41.02061099900004],[26.034823144000086,40.72952598900008],[25.06924450000008,41.00498200000004],[24.798677500000082,40.845684000000006],[24.394415001000084,40.93347150100004],[24.07414250000008,40.71839550000004],[23.867746500000067,40.7787285],[24.11433050000008,40.95747350000005],[23.62459200100008,41.37637700100004],[24.060045000000088,41.52243400000003],[24.525135000000148,41.56904200000008],[25.28801750000008,41.2359275],[26.127742999000077,41.35472100000004],[26.358526500000067,41.71183000000008]]]}},{"type":"Feature","properties":{"id":87,"nuts":"EL12","name":"Kentriki Makedonia","area":19147,"density":100.8,"edu_3":27.3,"gdp":28095,"gdp_ph":15600,"life_ex":81.3,"pop":1899389,"unempl":28.7,"coords":[22.995797643500087,40.68674739250004]},"geometry":{"type":"Polygon","coordinates":[[[23.867746500000067,40.7787285],[23.693813500000147,40.674484500000005],[23.861864000000082,40.37016300000005],[23.33757399999999,40.22373950000011],[22.917488000000077,40.38072600000004],[22.547895501000085,40.14546199900008],[22.66243000700007,39.975547995],[22.115207500000082,40.18994900000007],[21.788551500000068,40.93132800000001],[22.059028500000068,41.15023400000007],[22.419193500000148,41.11932350000001],[22.93145200000015,41.34092700000011],[23.62459200100008,41.37637700100004],[24.11433050000008,40.95747350000005],[23.867746500000067,40.7787285]]]}},{"type":"Feature","properties":{"id":88,"nuts":"EL13","name":"Dytiki Makedonia","area":9451,"density":30.4,"edu_3":22.3,"gdp":5371,"gdp_ph":20000,"life_ex":81.3,"pop":278214,"unempl":27.6,"coords":[21.377926500000054,40.33154693762505]},"geometry":{"type":"Polygon","coordinates":[[[22.115207500000082,40.18994900000007],[21.909355000000147,39.92378250000007],[21.29648449999999,39.85777300000001],[21.095916999999986,39.87945950100004],[20.776747000000086,40.34915900000004],[21.057818000000083,40.66602350000011],[20.98333149999999,40.85490100000004],[21.788551500000068,40.93132800000001],[22.115207500000082,40.18994900000007]]]}},{"type":"Feature","properties":{"id":89,"nuts":"EL14","name":"Thessalia","area":14037,"density":52.8,"edu_3":26.3,"gdp":9906,"gdp_ph":14200,"life_ex":81.8,"pop":736379,"unempl":25.4,"coords":[22.08873710764295,39.44740542821434]},"geometry":{"type":"Polygon","coordinates":[[[22.66243000700007,39.975547995],[22.935264499999988,39.57392900000008],[22.821161499999988,39.27750750000007],[23.018066500000174,39.002655000000004],[22.514013500000146,39.04854950100008],[22.287609000000174,39.23698800000011],[22.044340000000147,39.08403000000004],[21.686184000000083,39.25179300000008],[21.39690400000015,39.16447849900004],[21.373546500000174,39.17473600000011],[21.181752999999986,39.501957000000004],[21.29648449999999,39.85777300000001],[21.909355000000147,39.92378250000007],[22.115207500000082,40.18994900000007],[22.66243000700007,39.975547995]]]}},{"type":"Feature","properties":{"id":90,"nuts":"EL21","name":"Ipeiros","area":9203,"density":37.8,"edu_3":24.6,"gdp":4499,"gdp_ph":13800,"life_ex":82.6,"pop":340240,"unempl":26.8,"coords":[20.795564550000062,39.68918345000004]},"geometry":{"type":"Polygon","coordinates":[[[21.29648449999999,39.85777300000001],[21.181752999999986,39.501957000000004],[21.373546500000174,39.17473600000011],[20.70841999999999,39.042644499000005],[20.300678500000174,39.315735000000075],[20.231426000000084,39.68453600000004],[20.312795500000078,39.99008200000003],[20.67787750000008,40.0957525],[20.776747000000086,40.34915900000004],[21.095916999999986,39.87945950100004],[21.29648449999999,39.85777300000001]]]}},{"type":"Feature","properties":{"id":91,"nuts":"EL22","name":"Ionia Nisia","area":2307,"density":91,"edu_3":17.7,"gdp":3717,"gdp_ph":18900,"life_ex":81.6,"pop":207134,"unempl":21.4,"coords":[20.581734759666706,38.18267308733336]},"geometry":{"type":"Polygon","coordinates":[[[20.620509279000146,38.312282761000006],[20.785442499999988,38.05712500100003],[20.339252499999986,38.178611500000045],[20.620509279000146,38.312282761000006]]]}},{"type":"Feature","properties":{"id":92,"nuts":"EL23","name":"Dytiki Ellada","area":11350,"density":61.2,"edu_3":22.6,"gdp":9595,"gdp_ph":14900,"life_ex":80.9,"pop":676670,"unempl":28.7,"coords":[21.769609666555613,37.88434438833339]},"geometry":{"type":"Polygon","coordinates":[[[22.37297250000009,38.1422235],[22.056346999999988,37.78089900000003],[21.79453100100008,37.790801994000034],[21.898080999000086,37.40179850000008],[21.680232999999987,37.37743400000008],[21.297595999000066,37.76603300100008],[21.371532500000086,38.21834200000001],[21.60522250000008,38.14289100000008],[21.849971500000066,38.338676500000076],[22.37297250000009,38.1422235]]]}},{"type":"Feature","properties":{"id":93,"nuts":"EL24","name":"Sterea Ellada","area":15549,"density":36.4,"edu_3":17.9,"gdp":9542,"gdp_ph":18100,"life_ex":82.2,"pop":558222,"unempl":26.8,"coords":[22.48241966686677,38.74058913340006]},"geometry":{"type":"Polygon","coordinates":[[[23.018066500000174,39.002655000000004],[23.03462200000007,38.75635500000004],[23.56011699999999,38.502598000000035],[23.690418002000087,38.34029750000008],[23.12617900000015,38.16840000000008],[22.90647899999999,38.182899500000076],[22.417677000000083,38.43217850000008],[21.999883500000067,38.50835400000011],[21.982557501000088,38.69247450100005],[21.571245000000147,38.73678600000011],[21.39690400000015,39.16447849900004],[21.686184000000083,39.25179300000008],[22.044340000000147,39.08403000000004],[22.287609000000174,39.23698800000011],[22.514013500000146,39.04854950100008],[23.018066500000174,39.002655000000004]]]}},{"type":"Feature","properties":{"id":94,"nuts":"EL25","name":"Peloponnisos","area":15490,"density":38.1,"edu_3":19.3,"gdp":8978,"gdp_ph":16200,"life_ex":82,"pop":583818,"unempl":23.4,"coords":[22.272336286000073,37.355636143142924]},"geometry":{"type":"Polygon","coordinates":[[[21.680232999999987,37.37743400000008],[21.898080999000086,37.40179850000008],[21.79453100100008,37.790801994000034],[22.056346999999988,37.78089900000003],[22.37297250000009,38.1422235],[22.72454400000015,38.036590500000045],[23.119928501000146,37.729675501000074],[22.727743002000068,37.486248008000075],[23.110904500000146,36.774006000000085],[22.82819599999999,36.68687450000009],[22.296413500000085,36.81394600000009],[21.93219550100008,36.983608500000074],[21.704893000000084,36.81129050100007],[21.56572550000007,37.163509500000075],[21.680232999999987,37.37743400000008]]]}},{"type":"Feature","properties":{"id":95,"nuts":"EL30","name":"Aττική","area":3808,"density":1021.6,"edu_3":36.3,"gdp":100317,"gdp_ph":26900,"life_ex":81.1,"pop":3856059,"unempl":27.3,"coords":[23.55078457185724,38.07401442885722]},"geometry":{"type":"Polygon","coordinates":[[[23.179695000000066,37.95159900000009],[23.117222002000148,38.06102800100007],[23.12617900000015,38.16840000000008],[23.690418002000087,38.34029750000008],[23.956989499000088,38.28348150100004],[24.08447849999999,37.796074000000075],[23.70051000000015,37.91722100000008],[23.179695000000066,37.95159900000009]]]}},{"type":"Feature","properties":{"id":96,"nuts":"EL41","name":"Βόρειο Αιγαίο","area":3836,"density":53.2,"edu_3":25.3,"gdp":3009,"gdp_ph":15800,"life_ex":82.1,"pop":198109,"unempl":22.3,"coords":[26.236245327000074,39.13850013266673]},"geometry":{"type":"Polygon","coordinates":[[[26.411202975000066,39.31371640000003],[26.397785000000084,38.96265050000011],[25.899748006000067,39.139133498000035],[26.411202975000066,39.31371640000003]]]}},{"type":"Feature","properties":{"id":97,"nuts":"EL42","name":"Νότιο Αιγαίο","area":5286,"density":64.5,"edu_3":17.8,"gdp":7076,"gdp_ph":22300,"life_ex":82.3,"pop":333848,"unempl":20.1,"coords":[27.882803761666747,36.076511810333415]},"geometry":{"type":"Polygon","coordinates":[[[27.76842328500007,35.88622043100008],[27.805092000000087,36.270454500000085],[28.07489600000008,36.072860500000075],[27.76842328500007,35.88622043100008]]]}},{"type":"Feature","properties":{"id":98,"nuts":"EL43","name":"Κρήτη","area":8336,"density":75.5,"edu_3":22,"gdp":10197,"gdp_ph":17300,"life_ex":82.3,"pop":629397,"unempl":24,"coords":[24.779915714272793,35.281445054727335]},"geometry":{"type":"Polygon","coordinates":[[[24.01737384900008,35.51666810200008],[24.259481500000078,35.364483000000035],[24.69955999999999,35.427409999999995],[25.047146000000083,35.344337499999995],[25.64605499999999,35.341594500000085],[26.02382850000015,35.228660500000075],[26.193916500000086,35.01488150000009],[24.839851508000066,34.94110500000008],[24.722517000000067,35.09254450000007],[23.51702300000008,35.303707000000074],[23.612320000000068,35.520504000000074],[24.01737384900008,35.51666810200008]]]}},{"type":"Feature","properties":{"id":99,"nuts":"ES11","name":"Galicia","area":29575,"density":93.9,"edu_3":33.4,"gdp":55940,"gdp_ph":21800,"life_ex":82.9,"pop":2747226,"unempl":21.7,"coords":[-7.952891093588196,42.7475981011177]},"geometry":{"type":"Polygon","coordinates":[[[-7.081972592999961,43.46148672100003],[-7.130709499999966,43.33017750000005],[-6.824166997999953,42.915012500000046],[-7.077029999999951,42.50816350000008],[-6.733939999999961,42.35909649900003],[-6.983513499999958,41.97290400000003],[-7.396796999999992,41.82673650000004],[-8.082896999999917,42.02845400000007],[-8.527473499999957,42.07764050000003],[-8.863185999999956,41.872066500000074],[-8.795470999999992,42.636284000000046],[-9.02932199999995,42.70161800000011],[-9.287556499999994,43.044845499000076],[-8.828840999999954,43.32880800000004],[-8.556806499999993,43.3105625],[-8.311845499999919,43.54540600000007],[-7.687619999999953,43.78990550000003],[-7.081972592999961,43.46148672100003]]]}},{"type":"Feature","properties":{"id":100,"nuts":"ES12","name":"Principado de Asturias","area":10602,"density":100.5,"edu_3":38.7,"gdp":22472,"gdp_ph":22700,"life_ex":82.5,"pop":1058975,"unempl":21.1,"coords":[-6.0202852182726785,43.29732121509095]},"geometry":{"type":"Polygon","coordinates":[[[-4.512300999999951,43.39320400000008],[-4.8061136479999504,43.18193407400008],[-4.850127454999921,43.19495260900004],[-5.763860215999955,42.970069960000046],[-6.359071999999969,43.05951700000003],[-6.824166997999953,42.915012500000046],[-7.130709499999966,43.33017750000005],[-7.081972592999961,43.46148672100003],[-6.914180499999958,43.57272700000004],[-6.121293990999959,43.55568700200004],[-5.859339499999919,43.63576500000005],[-4.512300999999951,43.39320400000008]]]}},{"type":"Feature","properties":{"id":101,"nuts":"ES13","name":"Cantabria","area":5327,"density":111.9,"edu_3":37.4,"gdp":12754,"gdp_ph":23500,"life_ex":83.4,"pop":587682,"unempl":19.4,"coords":[-4.087404294333298,43.175671508111186]},"geometry":{"type":"Polygon","coordinates":[[[-3.153337999999991,43.35322200000007],[-3.417681499999958,43.13336950000007],[-3.945488000999916,43.00571849900007],[-4.081358999999992,42.76141750000011],[-4.4475740009999924,43.05847550000004],[-4.841038499999968,43.180709500000034],[-4.8061136479999504,43.18193407400008],[-4.512300999999951,43.39320400000008],[-3.581744998999966,43.51299300000011],[-3.153337999999991,43.35322200000007]]]}},{"type":"Feature","properties":{"id":102,"nuts":"ES21","name":"País Vasco","area":7275,"density":301.7,"edu_3":47,"gdp":64857,"gdp_ph":32500,"life_ex":83.7,"pop":2167166,"unempl":16.3,"coords":[-2.5131897253999567,43.04238682270004]},"geometry":{"type":"Polygon","coordinates":[[[-1.7859779999999148,43.35047900000001],[-1.7289029999999173,43.29608900000011],[-2.2102834999999175,42.94987100000003],[-2.420718999999991,42.489269500000034],[-2.433433253999965,42.490064727000004],[-2.8581174999999917,42.638168500000006],[-3.417681499999958,43.13336950000007],[-3.153337999999991,43.35322200000007],[-2.945426499999968,43.43557350000003],[-2.1780169999999544,43.287761500000045],[-1.7859779999999148,43.35047900000001]]]}},{"type":"Feature","properties":{"id":103,"nuts":"ES22","name":"Comunidad Foral de Navarra","area":10390,"density":61.6,"edu_3":42.7,"gdp":18144,"gdp_ph":31100,"life_ex":84,"pop":636450,"unempl":15.7,"coords":[-1.7269924569999504,42.525977233000056]},"geometry":{"type":"Polygon","coordinates":[[[-0.7245009999999183,42.92015849900008],[-1.3415049999999553,42.42391600000008],[-1.4157669999999598,41.91692750000004],[-1.8471834999999714,42.00798800000007],[-1.8805499979999922,42.02128626200005],[-1.7062555759999611,42.20409052000008],[-2.4121939529999565,42.484993782000004],[-2.420718999999991,42.489269500000034],[-2.2102834999999175,42.94987100000003],[-1.7289029999999173,43.29608900000011],[-1.3090554999999142,43.07115950000011],[-0.7245009999999183,42.92015849900008]]]}},{"type":"Feature","properties":{"id":104,"nuts":"ES23","name":"La Rioja","area":5045,"density":63,"edu_3":36.9,"gdp":7986,"gdp_ph":27200,"life_ex":84,"pop":315223,"unempl":18.2,"coords":[-2.3664710439166377,42.23101289608337]},"geometry":{"type":"Polygon","coordinates":[[[-2.8581174999999917,42.638168500000006],[-2.433433253999965,42.490064727000004],[-2.4121939529999565,42.484993782000004],[-1.7062555759999611,42.20409052000008],[-1.8805499979999922,42.02128626200005],[-1.8488397029999533,42.00062404000005],[-1.8527310749999515,41.98332186600004],[-1.9086654879999685,41.94681761500004],[-2.4412749999999903,42.13647050000003],[-2.885615529999967,42.02666401000005],[-3.129415999999992,42.19943600000005],[-3.040559449999961,42.640216931000026],[-2.8581174999999917,42.638168500000006]]]}},{"type":"Feature","properties":{"id":105,"nuts":"ES24","name":"Aragón","area":47721,"density":28.1,"edu_3":35.7,"gdp":33307,"gdp_ph":27000,"life_ex":83.4,"pop":1331301,"unempl":20.2,"coords":[-1.0667385116249584,41.40942310029172]},"geometry":{"type":"Polygon","coordinates":[[[-0.3133419999999205,42.849365000000034],[-0.008859997999991265,42.68466550100004],[0.6601269999999886,42.69095250000004],[0.7448885000000871,42.30115500000011],[0.17078950000001214,40.732837000000075],[-0.29323250199996664,40.611046000000044],[-0.2799974999999506,40.369499500000074],[-0.6798269999999604,40.04568500000005],[-1.1423614999999927,39.971855500000004],[-1.1651539999999727,40.010109],[-1.4488314999999545,40.14535850000004],[-1.8063439999999673,40.398247000000026],[-1.5389714999999171,40.65810000000005],[-1.617433499999919,40.943741000000045],[-2.051689999999951,41.14685800000001],[-2.169052999999991,41.32257450000003],[-1.775364500999956,41.72478100100011],[-1.8565394999999683,41.96638850000011],[-1.8527310749999515,41.98332186600004],[-1.8488397029999533,42.00062404000005],[-1.8471834999999714,42.00798800000007],[-1.4157669999999598,41.91692750000004],[-1.3415049999999553,42.42391600000008],[-0.7245009999999183,42.92015849900008],[-0.3133419999999205,42.849365000000034]]]}},{"type":"Feature","properties":{"id":106,"nuts":"ES30","name":"Comunidad de Madrid","area":8028,"density":803.5,"edu_3":47.2,"gdp":188445,"gdp_ph":31500,"life_ex":84.8,"pop":6378297,"unempl":18.7,"coords":[-3.6885533124999625,40.49375687500005]},"geometry":{"type":"Polygon","coordinates":[[[-4.5789009999999735,40.21715750000004],[-3.9377914999999177,40.92713500000008],[-3.53957299999999,41.16499350000004],[-3.4588569999999663,40.78128300000003],[-3.130406999999991,40.40515400000007],[-3.052824999999956,40.09935900000005],[-3.6193679999999517,40.057657000000006],[-4.190703999999954,40.29731600000008],[-4.5789009999999735,40.21715750000004]]]}},{"type":"Feature","properties":{"id":107,"nuts":"ES41","name":"Castilla y León","area":94227,"density":26.8,"edu_3":34.5,"gdp":55331,"gdp_ph":23800,"life_ex":84,"pop":2495689,"unempl":20.8,"coords":[-4.630805138918882,41.834166625027066]},"geometry":{"type":"Polygon","coordinates":[[[-3.417681499999958,43.13336950000007],[-2.8581174999999917,42.638168500000006],[-3.040559449999961,42.640216931000026],[-3.129415999999992,42.19943600000005],[-2.885615529999967,42.02666401000005],[-2.4412749999999903,42.13647050000003],[-1.9086654879999685,41.94681761500004],[-1.8565394999999683,41.96638850000011],[-1.775364500999956,41.72478100100011],[-2.169052999999991,41.32257450000003],[-2.051689999999951,41.14685800000001],[-2.4189089999999567,41.057716500000026],[-2.9066789999999685,41.32764050000003],[-3.53957299999999,41.16499350000004],[-3.9377914999999177,40.92713500000008],[-4.5789009999999735,40.21715750000004],[-5.336016499999971,40.11585600000001],[-6.198729499999956,40.48147600000004],[-6.677819999999969,40.25100700000007],[-6.865143999999958,40.270694502000026],[-6.793930499999959,40.6617435],[-6.929903499999966,41.02946650000007],[-6.438078999999959,41.3053395],[-6.189351999999957,41.57504650000004],[-6.541842999999972,41.680423500000074],[-6.5459714999999505,41.930687000000034],[-6.983513499999958,41.97290400000003],[-6.733939999999961,42.35909649900003],[-7.077029999999951,42.50816350000008],[-6.824166997999953,42.915012500000046],[-6.359071999999969,43.05951700000003],[-5.763860215999955,42.970069960000046],[-4.850127454999921,43.19495260900004],[-4.841038499999968,43.180709500000034],[-4.4475740009999924,43.05847550000004],[-4.081358999999992,42.76141750000011],[-3.945488000999916,43.00571849900007],[-3.417681499999958,43.13336950000007]]]}},{"type":"Feature","properties":{"id":108,"nuts":"ES42","name":"Castilla-La Mancha","area":79417,"density":26.4,"edu_3":27.2,"gdp":37113,"gdp_ph":19300,"life_ex":83.5,"pop":2075197,"unempl":29,"coords":[-2.763011303648606,39.58154557559463]},"geometry":{"type":"Polygon","coordinates":[[[-2.051689999999951,41.14685800000001],[-1.617433499999919,40.943741000000045],[-1.5389714999999171,40.65810000000005],[-1.8063439999999673,40.398247000000026],[-1.4488314999999545,40.14535850000004],[-1.1651539999999727,40.010109],[-1.1423614999999927,39.971855500000004],[-1.5043349979999903,39.56391900000003],[-1.1649624999999162,39.310527500000035],[-1.2667104999999594,39.051032500000076],[-0.959358999999921,38.94458750000007],[-1.026869999999974,38.65550950000011],[-1.1156322289999707,38.71191114300001],[-1.4876584999999523,38.56331650000004],[-1.505074795999974,38.36049823100001],[-2.079934545999919,38.27346060900004],[-2.3323701659999188,38.05702031400003],[-2.341601999999966,38.026020000000074],[-2.4815759999999614,38.393101],[-2.7620689999999684,38.532779500000004],[-3.4248264999999662,38.40683000000007],[-4.44933599999996,38.40061200000008],[-5.04699599999995,38.729133500000046],[-4.96254799999997,39.05877700000008],[-4.708266499999951,39.20991150000003],[-5.202112499999913,39.59206400000011],[-5.406152999999961,39.87777300000005],[-5.336016499999971,40.11585600000001],[-4.5789009999999735,40.21715750000004],[-4.190703999999954,40.29731600000008],[-3.6193679999999517,40.057657000000006],[-3.052824999999956,40.09935900000005],[-3.130406999999991,40.40515400000007],[-3.4588569999999663,40.78128300000003],[-3.53957299999999,41.16499350000004],[-2.9066789999999685,41.32764050000003],[-2.4189089999999567,41.057716500000026],[-2.051689999999951,41.14685800000001]]]}},{"type":"Feature","properties":{"id":109,"nuts":"ES43","name":"Extremadura","area":41634,"density":27,"edu_3":26.8,"gdp":16954,"gdp_ph":16700,"life_ex":82.2,"pop":1096421,"unempl":29.8,"coords":[-6.29328734999995,39.22804455020007]},"geometry":{"type":"Polygon","coordinates":[[[-5.336016499999971,40.11585600000001],[-5.406152999999961,39.87777300000005],[-5.202112499999913,39.59206400000011],[-4.708266499999951,39.20991150000003],[-4.96254799999997,39.05877700000008],[-5.04699599999995,38.729133500000046],[-5.36973999999995,38.57939550000003],[-5.953753999999918,37.995395500000086],[-6.5824094999999545,38.02089700200003],[-6.931738499999966,38.20837800000007],[-7.31663599999996,38.43987650000008],[-7.262021499999918,38.70799000000011],[-6.9513914999999145,39.02407050000011],[-7.241259999999954,39.20853050000011],[-7.294675999999953,39.455993500000034],[-7.542928999999958,39.66281500000008],[-7.015404999999959,39.67085650000007],[-6.865143999999958,40.270694502000026],[-6.677819999999969,40.25100700000007],[-6.198729499999956,40.48147600000004],[-5.336016499999971,40.11585600000001]]]}},{"type":"Feature","properties":{"id":110,"nuts":"ES51","name":"Cataluña","area":32091,"density":232.9,"edu_3":37,"gdp":194285,"gdp_ph":28400,"life_ex":83.4,"pop":7416237,"unempl":20.3,"coords":[1.6275424646667243,41.99016676500005]},"geometry":{"type":"Polygon","coordinates":[[[1.4425660000000846,42.60366800000003],[1.72580099999999,42.50440200000003],[2.4833175000000836,42.33979400000004],[2.870213500000091,42.46774300000004],[3.17480400000008,42.43537500000011],[3.203154500000011,41.89169750000008],[2.2704220000000817,41.460800500000005],[2.119573000000088,41.29206100000005],[0.9665129700000819,41.02842347500007],[0.5152385000000095,40.5229185],[0.17078950000001214,40.732837000000075],[0.7448885000000871,42.30115500000011],[0.6601269999999886,42.69095250000004],[0.7084250000000907,42.861252000000036],[1.3573040000000844,42.71942200000001],[1.4425660000000846,42.60366800000003]]]}},{"type":"Feature","properties":{"id":111,"nuts":"ES52","name":"Comunidad Valenciana","area":23256,"density":215.7,"edu_3":32,"gdp":99372,"gdp_ph":21200,"life_ex":82.8,"pop":4956427,"unempl":25.8,"coords":[-0.5819487557894367,39.365720525578986]},"geometry":{"type":"Polygon","coordinates":[[[0.17078950000001214,40.732837000000075],[0.5152385000000095,40.5229185],[0.05175950000008811,40.03761700000007],[-0.335751499999958,39.42460650100003],[-0.1994059889999562,39.05849848500003],[0.20127249999998753,38.731224000000026],[-0.5049094989999503,38.33337800100003],[-0.6558304999999507,37.98289850000003],[-0.9810188719999928,38.02836849900001],[-1.0015144999999563,38.572681500000044],[-1.026869999999974,38.65550950000011],[-0.959358999999921,38.94458750000007],[-1.2667104999999594,39.051032500000076],[-1.1649624999999162,39.310527500000035],[-1.5043349979999903,39.56391900000003],[-1.1423614999999927,39.971855500000004],[-0.6798269999999604,40.04568500000005],[-0.2799974999999506,40.369499500000074],[-0.29323250199996664,40.611046000000044],[0.17078950000001214,40.732837000000075]]]}},{"type":"Feature","properties":{"id":112,"nuts":"ES53","name":"Illes Balears","area":4992,"density":223,"edu_3":27.9,"gdp":25968,"gdp_ph":25300,"life_ex":82.9,"pop":1115841,"unempl":20,"coords":[2.924037083500044,39.64640656983338]},"geometry":{"type":"Polygon","coordinates":[[[3.1442465160000097,39.92108292800003],[3.457225500000078,39.744079500000026],[3.068549499999989,39.266598000000045],[2.7512445000000127,39.50377300000008],[2.344436000000087,39.58722700000004],[2.7785204850000866,39.85567899100005],[3.1442465160000097,39.92108292800003]]]}},{"type":"Feature","properties":{"id":113,"nuts":"ES61","name":"Andalucía","area":87597,"density":97,"edu_3":27.6,"gdp":141603,"gdp_ph":18300,"life_ex":81.8,"pop":8388875,"unempl":34.8,"coords":[-4.643122626199954,37.455890036300055]},"geometry":{"type":"Polygon","coordinates":[[[-2.341601999999966,38.026020000000074],[-2.2972592049999605,37.989799184999995],[-2.0210665939999615,37.878094962999995],[-1.8484569999999678,37.46071600000003],[-1.630032999999969,37.375183000000035],[-2.1840114999999685,36.71930300000008],[-2.3680915009999524,36.841457499000086],[-2.7005909999999176,36.68272400000008],[-3.249850499999951,36.75468450000008],[-4.394469999999956,36.72227850000009],[-4.638161499999967,36.50709150000009],[-5.17634549899995,36.41466150100008],[-5.608429999999913,36.00705350000008],[-6.034228999999954,36.180981000000074],[-6.387675999999914,36.62863150000008],[-6.514539498999966,36.971805499000084],[-7.051857999999953,37.208423499999995],[-7.420054682999961,37.238277683000035],[-7.490613304999954,37.51755825700003],[-7.51269149999996,37.52625650000007],[-7.421201999999965,37.759178000000034],[-6.931738499999966,38.20837800000007],[-6.5824094999999545,38.02089700200003],[-5.953753999999918,37.995395500000086],[-5.36973999999995,38.57939550000003],[-5.04699599999995,38.729133500000046],[-4.44933599999996,38.40061200000008],[-3.4248264999999662,38.40683000000007],[-2.7620689999999684,38.532779500000004],[-2.4815759999999614,38.393101],[-2.341601999999966,38.026020000000074]]]}},{"type":"Feature","properties":{"id":114,"nuts":"ES62","name":"Región de Murcia","area":11314,"density":129.5,"edu_3":27.1,"gdp":27177,"gdp_ph":19700,"life_ex":82.7,"pop":1461803,"unempl":26.6,"coords":[-1.5648578395384203,38.033878033923095]},"geometry":{"type":"Polygon","coordinates":[[[-1.0015144999999563,38.572681500000044],[-0.9810188719999928,38.02836849900001],[-0.71780899999996,37.60692200000004],[-1.325323505999961,37.562442497000035],[-1.630032999999969,37.375183000000035],[-1.8484569999999678,37.46071600000003],[-2.0210665939999615,37.878094962999995],[-2.2972592049999605,37.989799184999995],[-2.3323701659999188,38.05702031400003],[-2.079934545999919,38.27346060900004],[-1.505074795999974,38.36049823100001],[-1.4876584999999523,38.56331650000004],[-1.1156322289999707,38.71191114300001],[-1.0015144999999563,38.572681500000044]]]}},{"type":"Feature","properties":{"id":118,"nuts":"FI19","name":"Länsi-Suomi","area":64763,"density":23.5,"edu_3":39.2,"gdp":43180,"gdp_ph":26300,"life_ex":81.4,"pop":1374403,"unempl":8.7,"coords":[23.920716507148207,62.533246903518574]},"geometry":{"type":"Polygon","coordinates":[[[23.02716999900008,63.78893550200007],[23.649357000000066,63.67086400000011],[23.82946000000007,63.28615550000001],[24.354879500000067,63.11867550000011],[25.250943693000067,63.61238089400007],[26.070795000000146,63.35456450000004],[26.040077000000082,62.93590550000005],[26.59904849899999,62.61082050200008],[26.779932000000088,62.35113150000001],[26.220206999999988,62.11873600000007],[26.41480999999999,61.972744000000034],[26.314542999999986,61.608550999000045],[25.92643950200008,61.781539999000074],[25.43743500000008,61.486770500000034],[24.912306000000086,61.415775499000006],[23.71417549800009,61.009637000000026],[22.01246050000009,60.90082950000004],[21.420018500000083,61.04733250000007],[21.55657400000007,61.66188800000003],[21.294014000000146,62.00103000000007],[21.36630050000008,62.37107100000003],[21.11179150199999,62.48865900000004],[21.794338000000067,63.26276800000011],[22.39293649999999,63.33485400000001],[22.517580000000066,63.65238550000004],[22.91852300000008,63.779059000000075],[22.93323050000015,63.77460250000007],[23.02716999900008,63.78893550200007]]]}},{"type":"Feature","properties":{"id":119,"nuts":"FI1B","name":"Helsinki-Uusimaa","area":9568,"density":173.3,"edu_3":50.2,"gdp":71242,"gdp_ph":38300,"life_ex":81.7,"pop":1585473,"unempl":7.3,"coords":[24.89944855544451,60.37134622222228]},"geometry":{"type":"Polygon","coordinates":[[[26.449201499999987,60.49351500000009],[25.78688949900007,60.23727400000007],[25.585438000000067,60.31098550000007],[23.723388500000084,59.939007000000004],[23.028000000000077,60.10158850000005],[23.648756000000077,60.20136250000007],[23.962423500000085,60.638191000000006],[25.61069850000007,60.671604],[26.300241500000084,60.74858850000004],[26.449201499999987,60.49351500000009]]]}},{"type":"Feature","properties":{"id":120,"nuts":"FI1C","name":"Etelä-Suomi","area":35376,"density":36.6,"edu_3":38.1,"gdp":35718,"gdp_ph":25600,"life_ex":80.8,"pop":1161882,"unempl":9.4,"coords":[25.549197459960077,61.00600569988004]},"geometry":{"type":"Polygon","coordinates":[[[26.449201499999987,60.49351500000009],[26.300241500000084,60.74858850000004],[25.61069850000007,60.671604],[23.962423500000085,60.638191000000006],[23.648756000000077,60.20136250000007],[23.028000000000077,60.10158850000005],[22.454047500000087,60.26655950000003],[21.876381000000066,60.55118550000009],[21.341676500000148,60.68395250000009],[21.420018500000083,61.04733250000007],[22.01246050000009,60.90082950000004],[23.71417549800009,61.009637000000026],[24.912306000000086,61.415775499000006],[25.43743500000008,61.486770500000034],[25.92643950200008,61.781539999000074],[26.314542999999986,61.608550999000045],[26.286012500000083,61.36743150000001],[27.03141600000015,61.15187850000001],[27.583852998999987,61.35530100000011],[28.252014000000088,61.37950150000009],[29.22023750000008,61.560054500000035],[30.14408300000008,61.852688],[29.24462500000007,61.27056500000003],[28.81922700000007,61.12152850000007],[27.739664500000174,60.48421100000007],[26.449201499999987,60.49351500000009]]]}},{"type":"Feature","properties":{"id":121,"nuts":"FI1D","name":"Pohjois- ja Itä-Suomi","area":227148,"density":6.4,"edu_3":36.8,"gdp":37342,"gdp_ph":23900,"life_ex":80.4,"pop":1300846,"unempl":10,"coords":[26.576627183606625,65.61739917854104]},"geometry":{"type":"Polygon","coordinates":[[[28.930023000000148,69.05181100000004],[28.433912000000078,68.53969600000005],[28.64674199999999,68.19625850000003],[29.326880999999986,68.07456200000007],[29.931038000000086,67.52314800000005],[29.072904500000078,66.99545300000003],[30.067625000000078,65.89881900000009],[29.733185000000077,65.47274800000008],[29.599845499999986,64.99478150000004],[30.043375000000083,64.79272450000008],[30.044838000000084,64.40209200000007],[30.52816750000008,64.04872900000004],[29.97179600000007,63.757225000000005],[30.48523850000015,63.46689600000008],[31.239374000000083,63.21815850000007],[31.586267499000087,62.90905750100001],[31.16255550000008,62.4459875],[30.14408300000008,61.852688],[29.22023750000008,61.560054500000035],[28.252014000000088,61.37950150000009],[27.583852998999987,61.35530100000011],[27.03141600000015,61.15187850000001],[26.286012500000083,61.36743150000001],[26.314542999999986,61.608550999000045],[26.41480999999999,61.972744000000034],[26.220206999999988,62.11873600000007],[26.779932000000088,62.35113150000001],[26.59904849899999,62.61082050200008],[26.040077000000082,62.93590550000005],[26.070795000000146,63.35456450000004],[25.250943693000067,63.61238089400007],[24.354879500000067,63.11867550000011],[23.82946000000007,63.28615550000001],[23.649357000000066,63.67086400000011],[23.02716999900008,63.78893550200007],[23.383634500000085,63.921665000000075],[24.551698499999986,64.81771850000007],[25.396448000000078,65.00402050000008],[25.206651500000078,65.56237050000004],[24.155144500000148,65.81602700000008],[23.645824500000174,66.30152150000004],[23.99474900000007,66.81873300000001],[23.554495000000088,67.16745750000007],[23.763651000000067,67.42978650000003],[23.477470500000067,67.84262100000001],[23.64795500100007,67.96245549900004],[22.80002200000007,68.39357750000005],[22.039846499000078,68.48089600100008],[20.550380507000085,69.06008150000008],[21.62640750500009,69.27656549700004],[22.34022350000015,68.82723250000004],[23.167879000000084,68.6286695],[23.98326850000015,68.82743050000005],[24.91674050000009,68.6052325],[25.77711499899999,69.01918799900011],[25.97596999999999,69.610588],[26.490956500000067,69.94511400000005],[27.55446999899999,70.05963149900003],[29.13257400100008,69.69545749800011],[29.336273500000146,69.47834000000009],[28.831802500000066,69.22450250000003],[28.930023000000148,69.05181100000004]]]}},{"type":"Feature","properties":{"id":122,"nuts":"FI20","name":"Åland","area":1580,"density":18.4,"edu_3":32,"gdp":1174,"gdp_ph":34600,"life_ex":82.5,"pop":28666,"unempl":0,"coords":[19.93978961275011,60.257964789000056]},"geometry":{"type":"Polygon","coordinates":[[[20.120507452000084,60.36802965600003],[20.27516149900015,60.28509500000007],[19.751495500000146,60.09330350000005],[19.611994000000067,60.285431000000074],[20.120507452000084,60.36802965600003]]]}},{"type":"Feature","properties":{"id":123,"nuts":"FR10","name":"Île de France","area":12012.3,"density":997.2,"edu_3":44,"gdp":608648,"gdp_ph":45600,"life_ex":83.8,"pop":12005077,"unempl":9.6,"coords":[2.5326727918333938,48.63074745858338]},"geometry":{"type":"Polygon","coordinates":[[[3.485183001000081,48.85190950200007],[3.414789000000013,48.390270000000044],[3.0494535000000837,48.3600275],[2.9363160000000903,48.16339100000005],[2.5705600000000857,48.14081550000003],[2.402662499999991,48.32072050000005],[1.9940895000000864,48.28658700000011],[1.5773755010000912,48.70268650100007],[1.5015265000000113,48.941055500000004],[1.7043590000000108,49.23219700000004],[2.59052850000009,49.079654500000004],[3.165230500000092,49.09965500000004],[3.485183001000081,48.85190950200007]]]}},{"type":"Feature","properties":{"id":124,"nuts":"FR21","name":"Champagne-Ardenne","area":25605.8,"density":52.3,"edu_3":23.2,"gdp":34745,"gdp_ph":23200,"life_ex":81.2,"pop":1338122,"unempl":11.1,"coords":[4.698947083555597,48.79661405566671]},"geometry":{"type":"Polygon","coordinates":[[[4.969430999999986,49.801826000000005],[5.3935109999999895,49.61711100000008],[4.942383001000081,49.18676749900004],[4.888758000000081,48.81721100000004],[5.710848500000083,48.21993250000003],[5.884723500000092,47.926048500000036],[5.685610500000081,47.683147500000075],[5.374080002000085,47.60453800000005],[4.9685680010000794,47.687324501000035],[4.789415999999989,48.007866000000035],[3.894036000000085,47.929291000000035],[3.414789000000013,48.390270000000044],[3.485183001000081,48.85190950200007],[3.647597499999989,49.31595600000003],[4.047974500000009,49.40564350000011],[4.233133000000009,49.957828500000005],[4.432493999999991,49.94161600000007],[4.8185109990000115,49.99476600000003],[4.969430999999986,49.801826000000005]]]}},{"type":"Feature","properties":{"id":125,"nuts":"FR22","name":"Picardie","area":19399.5,"density":99.3,"edu_3":22,"gdp":44932,"gdp_ph":20800,"life_ex":80.6,"pop":1927387,"unempl":11.5,"coords":[2.8919699169167097,49.59398904191672]},"geometry":{"type":"Polygon","coordinates":[[[4.140853002000085,49.97876000100007],[4.233133000000009,49.957828500000005],[4.047974500000009,49.40564350000011],[3.647597499999989,49.31595600000003],[3.485183001000081,48.85190950200007],[3.165230500000092,49.09965500000004],[2.59052850000009,49.079654500000004],[1.7043590000000108,49.23219700000004],[1.7848454999999888,49.75790400000011],[1.3796979999999905,50.06501000000003],[1.6415395000000785,50.35215000000011],[2.8826970000000927,50.03120050000007],[4.140853002000085,49.97876000100007]]]}},{"type":"Feature","properties":{"id":126,"nuts":"FR23","name":"Haute-Normandie","area":12317.4,"density":150.2,"edu_3":24.7,"gdp":49619,"gdp_ph":24000,"life_ex":81.2,"pop":1851909,"unempl":11.8,"coords":[1.0402491670000353,49.272635111222264]},"geometry":{"type":"Polygon","coordinates":[[[1.7043590000000108,49.23219700000004],[1.5015265000000113,48.941055500000004],[1.3298295020000808,48.76101300100004],[0.8148244999999861,48.670162000000005],[0.3861090010000794,48.910549],[0.29722450000008394,49.42986300000007],[0.16382600000008551,49.68596250000007],[1.3796979999999905,50.06501000000003],[1.7848454999999888,49.75790400000011],[1.7043590000000108,49.23219700000004]]]}},{"type":"Feature","properties":{"id":127,"nuts":"FR24","name":"Centre","area":39150.9,"density":65.8,"edu_3":27.4,"gdp":65494,"gdp_ph":22800,"life_ex":82.3,"pop":2577474,"unempl":9.5,"coords":[1.6871745683636887,47.72078895463642]},"geometry":{"type":"Polygon","coordinates":[[[2.9363160000000903,48.16339100000005],[3.009889500000071,47.90559750000003],[2.873695000000083,47.329101500000036],[3.0747744999999895,47.02999500000004],[3.032063000000079,46.79491050000007],[2.5980994999999893,46.66499700000003],[2.2810435000000098,46.42040650000007],[1.1772785000000852,46.38394550000007],[0.692105500000082,46.97445700000003],[0.32481500000008623,46.93080900000007],[0.053741000000087524,47.164612000000034],[0.25911900099998775,47.61229700000007],[0.8486345000000881,47.94145950000001],[0.7976580000000126,48.19445800000011],[0.9677400000000773,48.52388000000008],[0.8148244999999861,48.670162000000005],[1.3298295020000808,48.76101300100004],[1.5015265000000113,48.941055500000004],[1.5773755010000912,48.70268650100007],[1.9940895000000864,48.28658700000011],[2.402662499999991,48.32072050000005],[2.5705600000000857,48.14081550000003],[2.9363160000000903,48.16339100000005]]]}},{"type":"Feature","properties":{"id":128,"nuts":"FR25","name":"Basse-Normandie","area":17589.3,"density":84,"edu_3":24.4,"gdp":35136,"gdp_ph":21200,"life_ex":82,"pop":1478211,"unempl":8.1,"coords":[-0.3965474662666092,48.89998323326674]},"geometry":{"type":"Polygon","coordinates":[[[0.29722450000008394,49.42986300000007],[0.3861090010000794,48.910549],[0.8148244999999861,48.670162000000005],[0.9677400000000773,48.52388000000008],[0.7976580000000126,48.19445800000011],[0.28355050200008236,48.48144550000001],[-0.15576849999996512,48.52038950000011],[-0.764655999999917,48.43658850000003],[-1.070164499999919,48.50849550000004],[-1.571089497999992,48.62644200000011],[-1.6053569999999695,49.20558150000011],[-1.855007499999914,49.64282249900003],[-1.266492498999952,49.695598500000074],[-1.1196199999999124,49.355568000000005],[-0.08716299999991861,49.29790500000007],[0.29722450000008394,49.42986300000007]]]}},{"type":"Feature","properties":{"id":129,"nuts":"FR26","name":"Bourgogne","area":31582,"density":51.9,"edu_3":27.5,"gdp":41837,"gdp_ph":22700,"life_ex":81.9,"pop":1638492,"unempl":10.6,"coords":[4.122345214285769,47.19800750004765]},"geometry":{"type":"Polygon","coordinates":[[[3.414789000000013,48.390270000000044],[3.894036000000085,47.929291000000035],[4.789415999999989,48.007866000000035],[4.9685680010000794,47.687324501000035],[5.374080002000085,47.60453800000005],[5.480364500000093,47.21830750000004],[5.255232500000091,46.97988900000007],[5.440603500000009,46.637913000000026],[5.310563000999991,46.446769501000006],[4.934746999999987,46.513321000000076],[4.707478501000082,46.284705997],[4.289787999999987,46.170826000000034],[3.899538500000091,46.27590950000007],[3.6294220000000905,46.74945450000007],[3.2044314950000796,46.678749002000075],[3.032063000000079,46.79491050000007],[3.0747744999999895,47.02999500000004],[2.873695000000083,47.329101500000036],[3.009889500000071,47.90559750000003],[2.9363160000000903,48.16339100000005],[3.0494535000000837,48.3600275],[3.414789000000013,48.390270000000044]]]}},{"type":"Feature","properties":{"id":130,"nuts":"FR30","name":"Nord - Pas-de-Calais","area":12414.1,"density":326.8,"edu_3":29.1,"gdp":100311,"gdp_ph":22100,"life_ex":79.8,"pop":4058332,"unempl":13.7,"coords":[2.8798073335556307,50.5306503334445]},"geometry":{"type":"Polygon","coordinates":[[[3.176996000000088,50.75616450000007],[3.2864920000000097,50.52756900000003],[4.027774500000078,50.35833050000011],[4.140853002000085,49.97876000100007],[2.8826970000000927,50.03120050000007],[1.6415395000000785,50.35215000000011],[1.580953000000079,50.869552500000026],[2.546011000000078,51.089382],[2.6349500000000887,50.81274400000001],[3.176996000000088,50.75616450000007]]]}},{"type":"Feature","properties":{"id":131,"nuts":"FR41","name":"Lorraine","area":23547.4,"density":99.7,"edu_3":28.1,"gdp":55250,"gdp_ph":20900,"life_ex":81.4,"pop":2346292,"unempl":11.7,"coords":[6.3211378571429195,48.763660750214335]},"geometry":{"type":"Polygon","coordinates":[[[5.818117000000086,49.546310500000004],[6.367102499999987,49.46948250000003],[6.738339000000082,49.163669500000026],[7.368758000000071,49.16149150000007],[7.635655502000077,49.05397100000005],[7.102025500000082,48.45146949900004],[7.198286997000082,48.31047050500007],[6.846174999999988,47.82294100000007],[6.601246500000087,47.94437400000007],[5.884723500000092,47.926048500000036],[5.710848500000083,48.21993250000003],[4.888758000000081,48.81721100000004],[4.942383001000081,49.18676749900004],[5.3935109999999895,49.61711100000008],[5.818117000000086,49.546310500000004]]]}},{"type":"Feature","properties":{"id":132,"nuts":"FR42","name":"Alsace","area":8280.2,"density":225.4,"edu_3":30.4,"gdp":52916,"gdp_ph":25400,"life_ex":82.2,"pop":1868773,"unempl":10,"coords":[7.450010041750055,48.07136633366671]},"geometry":{"type":"Polygon","coordinates":[[[7.635655502000077,49.05397100000005],[8.232571500000091,48.966507000000036],[7.959626502000077,48.718578000000036],[7.577888000000087,48.121406500000035],[7.589039000000071,47.58987800000003],[7.4211395000000095,47.44638800000007],[7.380894000000012,47.431892500000004],[7.326466000000011,47.43985350000003],[7.1303530000000706,47.50304050000011],[6.846174999999988,47.82294100000007],[7.198286997000082,48.31047050500007],[7.102025500000082,48.45146949900004],[7.635655502000077,49.05397100000005]]]}},{"type":"Feature","properties":{"id":133,"nuts":"FR43","name":"Franche-Comté","area":16202.3,"density":72.7,"edu_3":27.4,"gdp":28569,"gdp_ph":21600,"life_ex":82.4,"pop":1178937,"unempl":9.8,"coords":[5.988751500200055,47.120482966733384]},"geometry":{"type":"Polygon","coordinates":[[[6.846174999999988,47.82294100000007],[7.1303530000000706,47.50304050000011],[6.955139000000088,47.24316800000008],[6.460011000000009,46.85155150000003],[6.064003000000071,46.416229000000044],[5.869189000000091,46.264980500000036],[5.473978499999987,46.26434700000004],[5.310563000999991,46.446769501000006],[5.440603500000009,46.637913000000026],[5.255232500000091,46.97988900000007],[5.480364500000093,47.21830750000004],[5.374080002000085,47.60453800000005],[5.685610500000081,47.683147500000075],[5.884723500000092,47.926048500000036],[6.601246500000087,47.94437400000007],[6.846174999999988,47.82294100000007]]]}},{"type":"Feature","properties":{"id":134,"nuts":"FR51","name":"Pays de la Loire","area":32081.8,"density":114.6,"edu_3":30.4,"gdp":97948,"gdp_ph":24100,"life_ex":82.9,"pop":3689465,"unempl":8.5,"coords":[-0.7674110831666007,47.49452105555559]},"geometry":{"type":"Polygon","coordinates":[[[0.7976580000000126,48.19445800000011],[0.8486345000000881,47.94145950000001],[0.25911900099998775,47.61229700000007],[0.053741000000087524,47.164612000000034],[-0.4927154999999175,47.08336650000007],[-0.7323024999999177,46.82142650000003],[-0.6435389999999188,46.31945050000007],[-1.1294059999999604,46.310272000000026],[-1.8123444999999663,46.49341950000007],[-2.14198499999992,46.81897350000003],[-1.9804129999999134,47.028908],[-2.458492999999919,47.448120000000074],[-1.657644999999917,47.70951450000007],[-1.0166699999999196,48.00818250000003],[-1.070164499999919,48.50849550000004],[-0.764655999999917,48.43658850000003],[-0.15576849999996512,48.52038950000011],[0.28355050200008236,48.48144550000001],[0.7976580000000126,48.19445800000011]]]}},{"type":"Feature","properties":{"id":135,"nuts":"FR52","name":"Bretagne","area":27207.9,"density":120,"edu_3":33.6,"gdp":81158,"gdp_ph":22400,"life_ex":81.6,"pop":3273343,"unempl":7.4,"coords":[-2.987960366533281,48.28089220040006]},"geometry":{"type":"Polygon","coordinates":[[[-1.571089497999992,48.62644200000011],[-1.070164499999919,48.50849550000004],[-1.0166699999999196,48.00818250000003],[-1.657644999999917,47.70951450000007],[-2.458492999999919,47.448120000000074],[-2.85914249999999,47.62301250000007],[-4.347686999999951,47.84900300000007],[-4.267858999999959,48.13038650000004],[-4.795437998999915,48.414295002000074],[-4.752967499999954,48.543918500000075],[-4.080644999999919,48.69043750000003],[-3.8582184999999924,48.62875750100011],[-3.0851414999999918,48.86811850000004],[-2.6863985009999567,48.49315250300003],[-2.3118459999999175,48.67154700000003],[-1.571089497999992,48.62644200000011]]]}},{"type":"Feature","properties":{"id":136,"nuts":"FR53","name":"Poitou-Charentes","area":25809.5,"density":69.5,"edu_3":26,"gdp":43616,"gdp_ph":21800,"life_ex":82,"pop":1796434,"unempl":10.9,"coords":[-0.085876968687435,46.20266346881255]},"geometry":{"type":"Polygon","coordinates":[[[1.1772785000000852,46.38394550000007],[0.7947480000000837,46.21404650000011],[0.942577500000084,45.958229000000074],[0.6297415000000797,45.71456900000004],[0.13094700100000978,45.207931501000076],[-0.14223399999997355,45.08993900000007],[-0.7082309999999552,45.327480500000036],[-1.2100299999999606,45.69680800000003],[-1.0615274999999542,46.04527300000001],[-1.1294059999999604,46.310272000000026],[-0.6435389999999188,46.31945050000007],[-0.7323024999999177,46.82142650000003],[-0.4927154999999175,47.08336650000007],[0.053741000000087524,47.164612000000034],[0.32481500000008623,46.93080900000007],[0.692105500000082,46.97445700000003],[1.1772785000000852,46.38394550000007]]]}},{"type":"Feature","properties":{"id":137,"nuts":"FR61","name":"Aquitaine","area":41308.4,"density":80.4,"edu_3":32.8,"gdp":87672,"gdp_ph":23900,"life_ex":82.9,"pop":3335134,"unempl":9,"coords":[-0.23596994989994471,44.26313589990006]},"geometry":{"type":"Polygon","coordinates":[[[1.44826000000009,45.01931400000001],[1.0574844999999868,44.42767349800005],[0.6615755000000831,44.02452850000003],[-0.15324299999991808,43.93998350000004],[-0.2821164989999545,43.643074001],[-0.0024849999999503325,43.44508349900008],[-0.3133419999999205,42.849365000000034],[-0.7245009999999183,42.92015849900008],[-1.3090554999999142,43.07115950000011],[-1.7289029999999173,43.29608900000011],[-1.7859779999999148,43.35047900000001],[-1.4482074999999668,43.642273000000046],[-1.31638099999995,44.12883750000003],[-1.1541734999999562,45.48175800000007],[-0.7082309999999552,45.327480500000036],[-0.14223399999997355,45.08993900000007],[0.13094700100000978,45.207931501000076],[0.6297415000000797,45.71456900000004],[1.1670054999999877,45.52452100000005],[1.2544380000000785,45.1585005],[1.44826000000009,45.01931400000001]]]}},{"type":"Feature","properties":{"id":138,"nuts":"FR62","name":"Midi-Pyrénées","area":45347.9,"density":65.2,"edu_3":41.8,"gdp":77798,"gdp_ph":23800,"life_ex":83.4,"pop":2967153,"unempl":9,"coords":[1.5949243847308179,43.66834030765389]},"geometry":{"type":"Polygon","coordinates":[[[2.0629080000000783,44.97650550000003],[2.1765530000000126,44.63547150000011],[2.478800500000091,44.64813250000003],[2.8596740000000125,44.87446600000004],[2.981678499999987,44.64468000000011],[3.1204760000000817,44.26174950000001],[3.4509775000000786,44.022537],[3.0606804999999895,43.69280250000003],[2.6166450000000907,43.56537650000007],[2.5657830000000104,43.42295850000005],[1.8172650000000772,43.410648500000036],[1.946262499999989,43.1224555],[1.9685365000000843,42.61642450000011],[1.7860985000000085,42.57365800000008],[1.4425660000000846,42.60366800000003],[1.3573040000000844,42.71942200000001],[0.7084250000000907,42.861252000000036],[0.6601269999999886,42.69095250000004],[-0.008859997999991265,42.68466550100004],[-0.3133419999999205,42.849365000000034],[-0.0024849999999503325,43.44508349900008],[-0.2821164989999545,43.643074001],[-0.15324299999991808,43.93998350000004],[0.6615755000000831,44.02452850000003],[1.0574844999999868,44.42767349800005],[1.44826000000009,45.01931400000001],[2.0629080000000783,44.97650550000003]]]}},{"type":"Feature","properties":{"id":139,"nuts":"FR63","name":"Limousin","area":16942.3,"density":43.5,"edu_3":29.4,"gdp":17302,"gdp_ph":20800,"life_ex":82,"pop":735880,"unempl":9.2,"coords":[1.6030203750000638,45.72070408333338]},"geometry":{"type":"Polygon","coordinates":[[[2.2810435000000098,46.42040650000007],[2.602696500000093,46.03287500000005],[2.3880140000000836,45.82736950000003],[2.487533500000012,45.41816700000004],[2.0629080000000783,44.97650550000003],[1.44826000000009,45.01931400000001],[1.2544380000000785,45.1585005],[1.1670054999999877,45.52452100000005],[0.6297415000000797,45.71456900000004],[0.942577500000084,45.958229000000074],[0.7947480000000837,46.21404650000011],[1.1772785000000852,46.38394550000007],[2.2810435000000098,46.42040650000007]]]}},{"type":"Feature","properties":{"id":140,"nuts":"FR71","name":"Rhône-Alpes","area":43698.2,"density":147,"edu_3":37.2,"gdp":193266,"gdp_ph":27300,"life_ex":83.5,"pop":6448921,"unempl":8.7,"coords":[5.3729134360370905,45.48808961674078]},"geometry":{"type":"Polygon","coordinates":[[[5.310563000999991,46.446769501000006],[5.473978499999987,46.26434700000004],[5.869189000000091,46.264980500000036],[6.064003000000071,46.416229000000044],[6.821064000000092,46.42715450000003],[7.044885999999991,45.922413000000006],[6.820172500000012,45.83692550000001],[7.051689773000078,45.48610915300003],[7.104360000000071,45.46707550000008],[7.079940000000079,45.21277250000003],[6.629997500000087,45.109329],[6.364879000000087,45.07017150000007],[5.738009500000089,44.64059450000008],[5.498786000000081,44.11571500000008],[5.060239999000089,44.30761349900007],[4.64922750000008,44.27035900000004],[4.258898999000081,44.264423502],[3.86253099999999,44.74387000000007],[4.154796500000089,44.87310050000008],[4.3765610000000095,45.14435950000001],[4.308201000000082,45.37098300000008],[3.9845029999999895,45.49517800000001],[3.710634000000084,45.783184000000006],[3.899538500000091,46.27590950000007],[4.289787999999987,46.170826000000034],[4.707478501000082,46.284705997],[4.934746999999987,46.513321000000076],[5.310563000999991,46.446769501000006]]]}},{"type":"Feature","properties":{"id":141,"nuts":"FR72","name":"Auvergne","area":26012.9,"density":52.2,"edu_3":25.8,"gdp":33191,"gdp_ph":21900,"life_ex":81.9,"pop":1359402,"unempl":7.3,"coords":[3.16305518159096,45.54065152281823]},"geometry":{"type":"Polygon","coordinates":[[[3.899538500000091,46.27590950000007],[3.710634000000084,45.783184000000006],[3.9845029999999895,45.49517800000001],[4.308201000000082,45.37098300000008],[4.3765610000000095,45.14435950000001],[4.154796500000089,44.87310050000008],[3.86253099999999,44.74387000000007],[3.4044070000000772,44.956928500000004],[3.103124500000092,44.884636],[2.981678499999987,44.64468000000011],[2.8596740000000125,44.87446600000004],[2.478800500000091,44.64813250000003],[2.1765530000000126,44.63547150000011],[2.0629080000000783,44.97650550000003],[2.487533500000012,45.41816700000004],[2.3880140000000836,45.82736950000003],[2.602696500000093,46.03287500000005],[2.2810435000000098,46.42040650000007],[2.5980994999999893,46.66499700000003],[3.032063000000079,46.79491050000007],[3.2044314950000796,46.678749002000075],[3.6294220000000905,46.74945450000007],[3.899538500000091,46.27590950000007]]]}},{"type":"Feature","properties":{"id":142,"nuts":"FR81","name":"Languedoc-Roussillon","area":27375.8,"density":100.2,"edu_3":31.5,"gdp":63103,"gdp_ph":20900,"life_ex":82.5,"pop":2757558,"unempl":12.2,"coords":[3.108874459960041,43.53132738008005]},"geometry":{"type":"Polygon","coordinates":[[[3.86253099999999,44.74387000000007],[4.258898999000081,44.264423502],[4.64922750000008,44.27035900000004],[4.838822500000077,43.98503500000007],[4.230280999999991,43.46018600000008],[4.0376520000000085,43.55633150000003],[3.567806499999989,43.397529500000076],[3.1487380000000087,43.139328000000035],[3.0518334999999865,42.543953000000045],[3.17480400000008,42.43537500000011],[2.870213500000091,42.46774300000004],[2.4833175000000836,42.33979400000004],[1.72580099999999,42.50440200000003],[1.7860985000000085,42.57365800000008],[1.9685365000000843,42.61642450000011],[1.946262499999989,43.1224555],[1.8172650000000772,43.410648500000036],[2.5657830000000104,43.42295850000005],[2.6166450000000907,43.56537650000007],[3.0606804999999895,43.69280250000003],[3.4509775000000786,44.022537],[3.1204760000000817,44.26174950000001],[2.981678499999987,44.64468000000011],[3.103124500000092,44.884636],[3.4044070000000772,44.956928500000004],[3.86253099999999,44.74387000000007]]]}},{"type":"Feature","properties":{"id":143,"nuts":"FR82","name":"Provence-Alpes-Côte d'Azur","area":31399.6,"density":157.9,"edu_3":35.1,"gdp":143966,"gdp_ph":26000,"life_ex":82.9,"pop":4964859,"unempl":10,"coords":[6.184009187375064,44.13705415625006]},"geometry":{"type":"Polygon","coordinates":[[[6.629997500000087,45.109329],[7.029920500000088,44.72976300000005],[6.8566470000000095,44.53307700000005],[7.008531500000089,44.23524100000003],[7.714058999000088,44.06158000100007],[7.529827000000012,43.78400800000003],[6.971833000000089,43.54545200000007],[6.697630500000088,43.26647200000011],[6.125455499999987,43.07827000000003],[4.230280999999991,43.46018600000008],[4.838822500000077,43.98503500000007],[4.64922750000008,44.27035900000004],[5.060239999000089,44.30761349900007],[5.498786000000081,44.11571500000008],[5.738009500000089,44.64059450000008],[6.364879000000087,45.07017150000007],[6.629997500000087,45.109329]]]}},{"type":"Feature","properties":{"id":144,"nuts":"FR83","name":"Corse","area":8679.8,"density":37,"edu_3":24.1,"gdp":8080,"gdp_ph":22800,"life_ex":82.5,"pop":323092,"unempl":9.8,"coords":[9.015956074375051,42.15828168675004]},"geometry":{"type":"Polygon","coordinates":[[[9.471748094000077,42.73443499400008],[9.549904000000083,42.104038],[9.215981500000083,41.40951150000001],[8.809309001000088,41.556976500000076],[8.747044499999987,42.049530000000004],[8.561142999999987,42.17160800000005],[8.666671000000093,42.51559850000007],[9.10584750000001,42.72455600000001],[9.471748094000077,42.73443499400008]]]}},{"type":"Feature","properties":{"id":315,"nuts":"HR04","name":"Kontinentalna Hrvatska","area":null,"density":89.3,"edu_3":20.9,"gdp":30297,"gdp_ph":15600,"life_ex":77.1,"pop":2840901,"unempl":17.3,"coords":[16.8797433903847,45.57874340411546]},"geometry":{"type":"Polygon","coordinates":[[[16.76149969800008,46.37854642800005],[16.886160397999987,46.29109250800008],[17.39507501099999,45.930709499000045],[17.596059645999986,45.91895615000004],[17.78910457699999,45.81737629700001],[18.510458000000085,45.78448850000001],[18.821306000000078,45.91438300000004],[18.900764500000236,45.56938950000011],[19.19459599999999,45.17894850000005],[19.109465500000084,44.969871000000126],[18.43037799999999,45.105064500000026],[17.833118500000154,45.04837800000007],[16.975048000000157,45.228115000000116],[16.49717700000008,45.21178450000019],[16.354521000000233,45.00334500000008],[16.014978500000154,45.21757500000021],[15.56069550000015,44.88255300000003],[15.425077116000068,44.95569757700008],[15.017143011000087,45.12289049600008],[14.961522005000148,45.273318996],[15.307857337000087,45.45745536600003],[15.404803500000071,45.79267100000004],[15.682719351000088,45.879965189000075],[15.79135400000007,46.259281000000044],[16.05564100000015,46.37957],[16.59680499999999,46.47590250100001],[16.76149969800008,46.37854642800005]]]}},{"type":"Feature","properties":{"id":314,"nuts":"HR03","name":"Jadranska Hrvatska","area":null,"density":56.9,"edu_3":22.4,"gdp":14087,"gdp_ph":14700,"life_ex":79.3,"pop":1405908,"unempl":17.2,"coords":[15.330539755833415,44.62496021108337]},"geometry":{"type":"Polygon","coordinates":[[[15.226380500000147,45.427231000000006],[14.961522005000148,45.273318996],[15.017143011000087,45.12289049600008],[15.425077116000068,44.95569757700008],[15.56069550000015,44.88255300000003],[16.054773500000067,44.61238850000001],[16.318475500000147,44.11448300000001],[17.007986499999987,43.57624050000004],[17.282499500000085,43.46776200000011],[17.516533000000067,42.952503000000036],[16.895801500000147,43.389206],[15.97534850000008,43.630306500000074],[15.454544000000084,43.923973000000046],[15.16111000000015,44.186409000000026],[15.289471507999991,44.36322799700008],[14.896002000000067,44.69689950000003],[14.827959000000078,45.11303350000003],[14.332406000000077,45.355255],[13.978348000000068,44.84024800000003],[13.636775000000085,45.06962200000004],[13.583067000000085,45.47741000000008],[14.118177500000087,45.48104500000011],[14.596143000000069,45.62716300000011],[14.816714999999988,45.46017850000004],[15.226380500000147,45.427231000000006]]]}},{"type":"Feature","properties":{"id":149,"nuts":"HU10","name":"Közép-Magyarország","area":6916,"density":427.9,"edu_3":35.3,"gdp":48297,"gdp_ph":27600,"life_ex":77,"pop":2965413,"unempl":6.2,"coords":[19.330212500100043,47.51850374980003]},"geometry":{"type":"Polygon","coordinates":[[[18.928392000000088,48.05683250000004],[19.086134499999986,47.83817050000005],[19.44618349999999,47.80224400000003],[19.66632899999999,47.588550000000026],[19.99046250000015,47.34662800000001],[20.094639000000086,47.00742650000001],[19.587165500999987,47.12092549800008],[18.965907499999986,47.02896500000003],[18.688433500000087,47.57706750000003],[18.848478000000085,47.81822800000003],[18.928392000000088,48.05683250000004]]]}},{"type":"Feature","properties":{"id":150,"nuts":"HU21","name":"Közép-Dunántúl","area":11086,"density":96.7,"edu_3":17.6,"gdp":9524,"gdp_ph":14800,"life_ex":75.5,"pop":1069190,"unempl":5.6,"coords":[18.14801727290915,47.24509259072731]},"geometry":{"type":"Polygon","coordinates":[[[18.965907499999986,47.02896500000003],[18.92509700000008,46.8571685],[18.462383999999986,46.7396655],[18.06663800000007,46.96973650000007],[17.419067500000068,46.75065650000005],[17.19813250000007,47.26408750000007],[17.422600999999986,47.47807900000004],[17.737528002000147,47.47290749800004],[17.893923000000086,47.73945700000007],[18.848478000000085,47.81822800000003],[18.688433500000087,47.57706750000003],[18.965907499999986,47.02896500000003]]]}},{"type":"Feature","properties":{"id":151,"nuts":"HU22","name":"Nyugat-Dunántúl","area":11328,"density":86.9,"edu_3":19.7,"gdp":10031,"gdp_ph":17100,"life_ex":76.1,"pop":984521,"unempl":4.6,"coords":[17.025735418750067,47.19665312037505]},"geometry":{"type":"Polygon","coordinates":[[[17.247427499999986,48.012009000000035],[17.893923000000086,47.73945700000007],[17.737528002000147,47.47290749800004],[17.422600999999986,47.47807900000004],[17.19813250000007,47.26408750000007],[17.419067500000068,46.75065650000005],[17.17976150000007,46.432292500000074],[16.87604350000015,46.32060250000001],[16.76149969800008,46.37854642800005],[16.59680499999999,46.47590250100001],[16.113848999999988,46.86906800000003],[16.516771000000148,47.14932300000004],[16.445455000000067,47.40720949900003],[16.749031000000087,47.68141650000007],[17.093074000000087,47.708236],[17.160797500000086,48.00665650000008],[17.247427499999986,48.012009000000035]]]}},{"type":"Feature","properties":{"id":152,"nuts":"HU23","name":"Dél-Dunántúl","area":14198,"density":64.9,"edu_3":17.9,"gdp":6191,"gdp_ph":11200,"life_ex":75.2,"pop":917492,"unempl":7.8,"coords":[17.911457010153892,46.3103994195385]},"geometry":{"type":"Polygon","coordinates":[[[18.92509700000008,46.8571685],[18.921786000000083,46.3080645],[18.821306000000078,45.91438300000004],[18.510458000000085,45.78448850000001],[17.78910457699999,45.81737629700001],[17.596059645999986,45.91895615000004],[17.39507501099999,45.930709499000045],[16.886160397999987,46.29109250800008],[16.87604350000015,46.32060250000001],[17.17976150000007,46.432292500000074],[17.419067500000068,46.75065650000005],[18.06663800000007,46.96973650000007],[18.462383999999986,46.7396655],[18.92509700000008,46.8571685]]]}},{"type":"Feature","properties":{"id":153,"nuts":"HU31","name":"Észak-Magyarország","area":13429,"density":88.1,"edu_3":17.1,"gdp":7011,"gdp_ph":10000,"life_ex":74.2,"pop":1176894,"unempl":10.4,"coords":[20.37839862493756,48.06982975006255]},"geometry":{"type":"Polygon","coordinates":[[[22.12107750000007,48.37831150000011],[21.452520000000078,48.17985600000003],[21.035947500000077,47.746328500000004],[20.39415649899999,47.42046350100003],[20.20890850000015,47.60728],[19.66632899999999,47.588550000000026],[19.44618349999999,47.80224400000003],[19.086134499999986,47.83817050000005],[18.928392000000088,48.05683250000004],[19.01432249999999,48.07773650000007],[19.898740500000088,48.16631700000005],[20.32570150000015,48.27279850000011],[20.463936999999987,48.46396700000008],[20.850424000000146,48.58163150000007],[21.440056000000084,48.58523300000007],[21.72154750000007,48.35155600000007],[22.12107750000007,48.37831150000011]]]}},{"type":"Feature","properties":{"id":154,"nuts":"HU32","name":"Észak-Alföld","area":17729,"density":83.9,"edu_3":17.7,"gdp":9331,"gdp_ph":10700,"life_ex":75.4,"pop":1484375,"unempl":11.8,"coords":[21.127077940705963,47.52157926476475]},"geometry":{"type":"Polygon","coordinates":[[[22.89627050000007,47.954120500000045],[22.32036000000008,47.75202950000005],[22.022939497000067,47.517848994000076],[21.65926950000008,47.02256000000003],[21.247242502000148,47.009748],[20.992097500000085,47.23228800000004],[20.727598500000084,46.94553100300004],[20.17520049400008,46.75448100300008],[20.094639000000086,47.00742650000001],[19.99046250000015,47.34662800000001],[19.66632899999999,47.588550000000026],[20.20890850000015,47.60728],[20.39415649899999,47.42046350100003],[21.035947500000077,47.746328500000004],[21.452520000000078,48.17985600000003],[22.12107750000007,48.37831150000011],[22.15530600000008,48.40339650000004],[22.89627050000007,47.954120500000045]]]}},{"type":"Feature","properties":{"id":155,"nuts":"HU33","name":"Dél-Alföld","area":18338,"density":70,"edu_3":18.9,"gdp":8536,"gdp_ph":11100,"life_ex":75.6,"pop":1279480,"unempl":9,"coords":[20.15574558741183,46.63073297047064]},"geometry":{"type":"Polygon","coordinates":[[[21.65926950000008,47.02256000000003],[21.441489999999988,46.65145100000001],[21.06595050000007,46.24272900000011],[20.775579500000077,46.27592850000008],[20.264296000000087,46.1263735],[19.567619489000066,46.17871849400001],[19.415429999999986,46.04571900000008],[18.821306000000078,45.91438300000004],[18.921786000000083,46.3080645],[18.92509700000008,46.8571685],[18.965907499999986,47.02896500000003],[19.587165500999987,47.12092549800008],[20.094639000000086,47.00742650000001],[20.17520049400008,46.75448100300008],[20.727598500000084,46.94553100300004],[20.992097500000085,47.23228800000004],[21.247242502000148,47.009748],[21.65926950000008,47.02256000000003]]]}},{"type":"Feature","properties":{"id":156,"nuts":"IE01","name":"Border, Midland and Western","area":33252,"density":38.5,"edu_3":34.8,"gdp":29299,"gdp_ph":21500,"life_ex":81.3,"pop":1232783,"unempl":12.3,"coords":[-7.953063539639966,53.992320140160054]},"geometry":{"type":"Polygon","coordinates":[[[-7.258475999999973,55.06670000000008],[-7.703411499999959,54.60828800000007],[-8.177717998999952,54.46497350000004],[-7.5659559999999715,54.12651450000004],[-7.02863549999995,54.42130650000007],[-6.623778499999958,54.03654850000004],[-6.2680154999999615,54.102337000000034],[-6.247097999999966,53.722454500000026],[-6.730528499999991,53.91763050000003],[-6.954973999999993,53.65391550000007],[-6.980562499999991,53.314294000000075],[-7.195731499999965,52.89394049900011],[-7.734649499999961,52.85836250000003],[-7.919855500999972,53.10307750100003],[-8.27847399899997,53.018681501],[-9.009308499999918,53.14081750000008],[-10.185444493999967,53.41246400400007],[-9.640685499999961,53.78204450000004],[-9.991458498999918,54.10296949900004],[-9.811660999999958,54.34174300000001],[-8.824401999999992,54.25301800000011],[-8.28429399999996,54.47842650000007],[-8.58794499999999,54.60648000000003],[-8.45382849799995,54.99837550000001],[-7.369696500999993,55.382640500000036],[-7.258475999999973,55.06670000000008]]]}},{"type":"Feature","properties":{"id":157,"nuts":"IE02","name":"Southern and Eastern","area":36545,"density":92.7,"edu_3":43.1,"gdp":133300,"gdp_ph":36300,"life_ex":81,"pop":3372718,"unempl":10.9,"coords":[-8.120163795181787,52.62001520468186]},"geometry":{"type":"Polygon","coordinates":[[[-6.247097999999966,53.722454500000026],[-6.014684499999959,52.95220900000007],[-6.355570998999951,52.40414800100007],[-6.71429599999999,52.21643850000004],[-7.443065999999959,52.12721950000008],[-7.586489000999961,51.99140000000003],[-8.952306499999992,51.5346945],[-9.380689493999967,51.46958200100005],[-9.649664499999972,51.673586],[-10.057692499999973,51.65405400000003],[-10.459701999999993,52.17968100000007],[-9.95556499999995,52.232326],[-9.546329499999956,52.640865500000075],[-9.476365499999957,52.94095650000003],[-9.009308499999918,53.14081750000008],[-8.27847399899997,53.018681501],[-7.919855500999972,53.10307750100003],[-7.734649499999961,52.85836250000003],[-7.195731499999965,52.89394049900011],[-6.980562499999991,53.314294000000075],[-6.954973999999993,53.65391550000007],[-6.730528499999991,53.91763050000003],[-6.247097999999966,53.722454500000026]]]}},{"type":"Feature","properties":{"id":158,"nuts":"IS00","name":"Ísland","area":103000,"density":3.2,"edu_3":37,"gdp":null,"gdp_ph":null,"life_ex":82.1,"pop":325671,"unempl":4.9,"coords":[-18.608074263289442,65.26845500610531]},"geometry":{"type":"Polygon","coordinates":[[[-16.06927500699996,66.514462234],[-15.761126997999952,66.28001550000005],[-14.96734099999992,66.28271750000005],[-15.086550999999957,66.03884900000003],[-14.790302999999994,65.83809300000007],[-13.60683549999996,65.51123800000005],[-13.769553999999971,65.30821800000007],[-13.49510349999997,65.07561350000009],[-13.982592999999952,64.73374100000001],[-14.402052499999968,64.7331125],[-14.499197499999951,64.43702900100004],[-15.957111999999967,64.13526100000007],[-16.63996500099995,63.79902700000008],[-17.31055649999996,63.77630000000005],[-18.17774499999996,63.458596],[-19.12683349999992,63.40072500000008],[-20.18847949999997,63.53625500000004],[-21.20998499999996,63.87888700000008],[-22.342319499999974,63.85562500000009],[-21.835132499999958,64.28953050000007],[-22.67272299999999,65.00157800000011],[-22.47525399999992,65.23787100000004],[-21.95592549999992,65.40169200000008],[-23.200695999999994,65.54753350000004],[-23.881793999999957,65.40726000000001],[-24.09997999999996,65.80514800000009],[-23.137037498999973,66.43065650000003],[-22.57645599999995,66.46562350000005],[-21.29025699999997,65.92701349900003],[-20.937694499999992,65.57770650000003],[-20.32385699999992,65.6253375],[-20.432946999999956,66.01723350000009],[-19.705638998999973,65.86212099900007],[-18.786063999999953,66.19364700000003],[-17.93338700099997,66.14770200000004],[-17.412398999999994,65.99227150000007],[-16.49687850099997,66.19733100000008],[-16.569771498999955,66.48026849900003],[-16.06927500699996,66.514462234]]]}},{"type":"Feature","properties":{"id":159,"nuts":"ITC1","name":"Piemonte","area":25387,"density":173.5,"edu_3":16.2,"gdp":125997,"gdp_ph":27600,"life_ex":82.7,"pop":4436798,"unempl":11.3,"coords":[8.031122000956584,45.2184565262609]},"geometry":{"type":"Polygon","coordinates":[[[9.201438000000081,44.68648150000007],[9.20316299999999,44.61373150000003],[8.261617500000085,44.51956550000003],[8.01558700000001,44.11069500000008],[7.714058999000088,44.06158000100007],[7.008531500000089,44.23524100000003],[6.8566470000000095,44.53307700000005],[7.029920500000088,44.72976300000005],[6.629997500000087,45.109329],[7.079940000000079,45.21277250000003],[7.104360000000071,45.46707550000008],[7.137519000000083,45.51626600000003],[7.939366000000092,45.64323400000001],[7.86357600000008,45.916698499000006],[8.384737000000086,46.45215250000007],[8.446127499999989,46.46369750000008],[8.696334022999991,46.10170010600001],[8.714930500000008,46.09729849900003],[8.554483500000089,45.77721350000007],[8.84289650000008,45.39383300000003],[8.497851500000081,45.2917635],[8.63465700000009,45.04067250000003],[8.898066500000084,45.05065899900001],[9.201438000000081,44.68648150000007]]]}},{"type":"Feature","properties":{"id":160,"nuts":"ITC2","name":"Valle d'Aosta/Vallée d'Aoste","area":3261,"density":39.3,"edu_3":15.2,"gdp":4328,"gdp_ph":33000,"life_ex":83,"pop":128591,"unempl":8.9,"coords":[7.309534878833389,45.72027435866668]},"geometry":{"type":"Polygon","coordinates":[[[7.86357600000008,45.916698499000006],[7.939366000000092,45.64323400000001],[7.137519000000083,45.51626600000003],[7.051689773000078,45.48610915300003],[6.820172500000012,45.83692550000001],[7.044885999999991,45.922413000000006],[7.86357600000008,45.916698499000006]]]}},{"type":"Feature","properties":{"id":161,"nuts":"ITC3","name":"Liguria","area":5416,"density":291.5,"edu_3":19.3,"gdp":43998,"gdp_ph":26700,"life_ex":82.5,"pop":1591939,"unempl":10.8,"coords":[8.74491986363641,44.19774345463641]},"geometry":{"type":"Polygon","coordinates":[[[9.20316299999999,44.61373150000003],[9.686701500000083,44.36593650000003],[10.018758999999989,44.04444500000011],[9.832752999000093,44.04994200100003],[9.22982800200009,44.34826649900003],[8.745085499999988,44.42732600000011],[7.956738000000087,43.84968200000003],[7.529827000000012,43.78400800000003],[7.714058999000088,44.06158000100007],[8.01558700000001,44.11069500000008],[8.261617500000085,44.51956550000003],[9.20316299999999,44.61373150000003]]]}},{"type":"Feature","properties":{"id":162,"nuts":"ITC4","name":"Lombardia","area":23864,"density":414.2,"edu_3":17.9,"gdp":337161,"gdp_ph":33200,"life_ex":83.5,"pop":9973397,"unempl":8.2,"coords":[9.793257075291736,45.69903539008339]},"geometry":{"type":"Polygon","coordinates":[[[10.453147000000087,46.53189900000001],[10.606044929000092,46.45775436700001],[10.607581007000078,46.37960050800001],[10.45367500000009,45.97681050000003],[10.80737185800001,45.834856168000044],[10.840159500000084,45.83276450000011],[10.631034500000084,45.609509],[10.703076500000009,45.34135800000007],[11.426752000000079,44.95008850000005],[10.56855850000008,44.90833300000003],[9.98895250000001,45.13211050000007],[9.43901050000008,45.09343700000011],[9.201438000000081,44.68648150000007],[8.898066500000084,45.05065899900001],[8.63465700000009,45.04067250000003],[8.497851500000081,45.2917635],[8.84289650000008,45.39383300000003],[8.554483500000089,45.77721350000007],[8.714930500000008,46.09729849900003],[8.78823058900008,46.10270406700005],[9.074182925000088,46.101939755000046],[9.159450499000087,46.16956199900011],[9.907911500000012,46.38066200000003],[10.23870700000009,46.63553900000011],[10.453147000000087,46.53189900000001]]]}},{"type":"Feature","properties":{"id":163,"nuts":"ITF1","name":"Abruzzo","area":10833,"density":122.2,"edu_3":16.5,"gdp":30073,"gdp_ph":21900,"life_ex":82.9,"pop":1333939,"unempl":12.6,"coords":[13.904516299800097,42.179158800000046]},"geometry":{"type":"Polygon","coordinates":[[[14.779550500000084,42.06982800000003],[14.57061850000008,41.82115950000011],[14.284202499000088,41.91078199900011],[13.94101450000008,41.687977000000046],[13.573834500000146,41.75434850000005],[13.296276000000148,41.94861200000008],[13.17842850000008,42.479332],[13.357769999000084,42.694092001],[13.916707000000088,42.894607500000006],[14.146761000000083,42.530849500000045],[14.779550500000084,42.06982800000003]]]}},{"type":"Feature","properties":{"id":164,"nuts":"ITF2","name":"Molise","area":4461,"density":70.4,"edu_3":17,"gdp":6414,"gdp_ph":19700,"life_ex":82.8,"pop":314725,"unempl":15.2,"coords":[14.53774768737508,41.716153187375056]},"geometry":{"type":"Polygon","coordinates":[[[15.00761200000008,41.48638550000004],[14.60303900000008,41.36396400000001],[13.97790800000007,41.46248250000008],[13.94101450000008,41.687977000000046],[14.284202499000088,41.91078199900011],[14.57061850000008,41.82115950000011],[14.779550500000084,42.06982800000003],[15.138036500000084,41.926647],[15.00761200000008,41.48638550000004]]]}},{"type":"Feature","properties":{"id":165,"nuts":"ITF3","name":"Campania","area":13670,"density":425.7,"edu_3":14.3,"gdp":93635,"gdp_ph":15700,"life_ex":81.1,"pop":5869965,"unempl":21.7,"coords":[14.94944319993341,40.78561506673338]},"geometry":{"type":"Polygon","coordinates":[[[15.00761200000008,41.48638550000004],[15.29450349999999,41.091530000000034],[15.542872499000083,41.055858501000046],[15.378330000000147,40.840748000000076],[15.538860500000084,40.4880445],[15.806431000000174,40.27226250000007],[15.64531400000007,40.04295350000007],[15.353712000000087,39.99994300000003],[14.943398500000086,40.275341000000026],[14.785253500000067,40.667416],[14.56973099999999,40.61571500000008],[14.032570000000078,40.898987000000034],[13.762112500000086,41.22259500000007],[13.97790800000007,41.46248250000008],[14.60303900000008,41.36396400000001],[15.00761200000008,41.48638550000004]]]}},{"type":"Feature","properties":{"id":166,"nuts":"ITF4","name":"Puglia","area":19541,"density":208.3,"edu_3":14,"gdp":69974,"gdp_ph":16700,"life_ex":83.1,"pop":4090266,"unempl":21.5,"coords":[16.752677999950045,40.84578800005005]},"geometry":{"type":"Polygon","coordinates":[[[16.866497000000066,40.398063500000035],[16.724899500000078,40.71383300000011],[16.413774499999988,40.70186600000011],[15.870262000000082,41.139919500000076],[15.542872499000083,41.055858501000046],[15.29450349999999,41.091530000000034],[15.00761200000008,41.48638550000004],[15.138036500000084,41.926647],[16.08420749999999,41.941505500000005],[15.90098400000008,41.61598950000007],[16.02477449899999,41.425770001000046],[17.176124499999986,41.02887700000008],[17.515005000000087,40.814255],[17.998768001000087,40.64882649900011],[18.52059150000008,40.10699800000003],[18.390821499999987,39.81763450000011],[18.04749849999999,39.9287645],[17.904426500000085,40.256454500000075],[17.50381300000015,40.29700100000008],[17.12808799999999,40.51958100000007],[16.866497000000066,40.398063500000035]]]}},{"type":"Feature","properties":{"id":167,"nuts":"ITF5","name":"Basilicata","area":10073,"density":57.3,"edu_3":15.1,"gdp":10744,"gdp_ph":17900,"life_ex":82.8,"pop":578391,"unempl":14.7,"coords":[16.04117125008342,40.46918612500006]},"geometry":{"type":"Polygon","coordinates":[[[16.866497000000066,40.398063500000035],[16.643856000000085,40.119072000000074],[16.308138002000078,39.93456649900003],[15.75482000000008,39.923046],[15.64531400000007,40.04295350000007],[15.806431000000174,40.27226250000007],[15.538860500000084,40.4880445],[15.378330000000147,40.840748000000076],[15.542872499000083,41.055858501000046],[15.870262000000082,41.139919500000076],[16.413774499999988,40.70186600000011],[16.724899500000078,40.71383300000011],[16.866497000000066,40.398063500000035]]]}},{"type":"Feature","properties":{"id":168,"nuts":"ITF6","name":"Calabria","area":15222,"density":129.4,"edu_3":15.2,"gdp":33055,"gdp_ph":16100,"life_ex":82.5,"pop":1980533,"unempl":23.4,"coords":[16.34644926620007,38.96517169986672]},"geometry":{"type":"Polygon","coordinates":[[[15.75482000000008,39.923046],[16.308138002000078,39.93456649900003],[16.643856000000085,40.119072000000074],[16.486088003000077,39.78242850500004],[17.157869500000146,39.40039750000011],[17.10111599999999,38.90484600000008],[16.79815648799999,38.903472994000026],[16.53563100000008,38.706360000000075],[16.58198150000007,38.46979900000008],[16.16164599999999,38.128010000000074],[16.064786500000082,37.92541100000008],[15.764063000000078,37.916027000000085],[15.635700001000174,38.231631999],[16.182613500000087,38.74783300000007],[16.02027349900007,39.38467400100001],[15.75482000000008,39.923046]]]}},{"type":"Feature","properties":{"id":169,"nuts":"ITG1","name":"Sicilia","area":25833,"density":195.4,"edu_3":13.3,"gdp":83956,"gdp_ph":16300,"life_ex":81.9,"pop":5094937,"unempl":22.2,"coords":[14.032599705470655,37.63441558905887]},"geometry":{"type":"Polygon","coordinates":[[[15.571682000000067,38.233314500000006],[15.085452001000078,37.48190700100008],[15.314803000000069,37.036995000999994],[15.081151000000148,36.648551999999995],[14.491841492000077,36.78752901200008],[14.337752500000079,37.001644000000084],[13.903536000000088,37.095741500000074],[12.952436500000147,37.568630000000084],[12.679458500000067,37.559200500000074],[12.424266999999986,37.80206700000008],[12.509988000000078,38.017463500000076],[12.87867349999999,38.02911800000004],[13.318324999999987,38.22421250000008],[13.708664000000084,37.978550000000084],[14.29298399999999,38.0070915],[14.915974500000146,38.19258450000001],[15.087206000000066,38.12046450000008],[15.571682000000067,38.233314500000006]]]}},{"type":"Feature","properties":{"id":170,"nuts":"ITG2","name":"Sardegna","area":24100,"density":68.6,"edu_3":13.1,"gdp":33075,"gdp_ph":19300,"life_ex":82.8,"pop":1663859,"unempl":18.6,"coords":[9.0039711314286,40.05046804457148]},"geometry":{"type":"Polygon","coordinates":[[[9.425248842000087,41.15476362700008],[9.82674750000001,40.51214650000003],[9.631596500000086,40.27619550000003],[9.688112499999988,39.98548150000005],[9.579672999000081,39.17611299900011],[9.096641498999986,39.21451549900007],[8.859897499999988,38.87748700000003],[8.360557500000084,39.03753300000011],[8.379404999999991,39.37383300000005],[8.550853499999988,39.88582600000001],[8.48297500000001,40.28540399900007],[8.13548750000001,40.73791150000011],[8.80277749999999,40.93102250000004],[9.23562250000009,41.258320000000026],[9.425248842000087,41.15476362700008]]]}},{"type":"Feature","properties":{"id":171,"nuts":"ITH1","name":"Provincia Autonoma di Bolzano/Bozen","area":7398,"density":69.3,"edu_3":16.2,"gdp":19234,"gdp_ph":36900,"life_ex":83.9,"pop":515714,"unempl":4.4,"coords":[11.471173400375067,46.747667938562536]},"geometry":{"type":"Polygon","coordinates":[[[12.240745500000088,47.069168500000046],[12.450508469000084,46.67265568900001],[12.43413650000008,46.66836550000005],[12.195874511000085,46.61653698600003],[11.89451416899999,46.52581061000001],[11.828146000000089,46.50882700000008],[10.621950500000082,46.448120000000046],[10.606044929000092,46.45775436700001],[10.453147000000087,46.53189900000001],[10.441409500000077,46.752069500000005],[10.492115442999989,46.850543610000045],[11.022560000000084,46.76588350000003],[11.164432500000089,46.96581400000008],[11.621509538000083,47.01142394500005],[11.935665347000082,47.03714731000008],[12.136014499999987,47.080667500000004],[12.240745500000088,47.069168500000046]]]}},{"type":"Feature","properties":{"id":172,"nuts":"ITH2","name":"Provincia Autonoma di Trento","area":6207,"density":85.9,"edu_3":18.3,"gdp":16563,"gdp_ph":30500,"life_ex":83.9,"pop":536237,"unempl":6.9,"coords":[11.187704351111178,46.189666619111144]},"geometry":{"type":"Polygon","coordinates":[[[11.828146000000089,46.50882700000008],[11.834508395000086,46.47639497800003],[11.948858137999991,46.17545353400004],[11.699662762000088,46.095764384000006],[10.887585500000085,45.811172500000026],[10.80737185800001,45.834856168000044],[10.45367500000009,45.97681050000003],[10.607581007000078,46.37960050800001],[10.621950500000082,46.448120000000046],[11.828146000000089,46.50882700000008]]]}},{"type":"Feature","properties":{"id":173,"nuts":"ITH3","name":"Veneto","area":18407,"density":266.4,"edu_3":15.4,"gdp":149527,"gdp_ph":29600,"life_ex":83.4,"pop":4926818,"unempl":7.5,"coords":[11.951959072200065,45.95257178405005]},"geometry":{"type":"Polygon","coordinates":[[[12.69063550000007,46.65697200000011],[12.731389500000148,46.634291500000074],[12.322118999999986,46.266872500000034],[12.425833500000067,45.94735700000007],[13.101107500000069,45.64321150000001],[12.146244000000081,45.39063950000008],[12.394313000000068,44.79444500000011],[12.280868500000082,44.94177250000007],[11.426752000000079,44.95008850000005],[10.703076500000009,45.34135800000007],[10.631034500000084,45.609509],[10.840159500000084,45.83276450000011],[10.887585500000085,45.811172500000026],[11.699662762000088,46.095764384000006],[11.948858137999991,46.17545353400004],[11.834508395000086,46.47639497800003],[11.89451416899999,46.52581061000001],[12.195874511000085,46.61653698600003],[12.43413650000008,46.66836550000005],[12.450508469000084,46.67265568900001],[12.69063550000007,46.65697200000011]]]}},{"type":"Feature","properties":{"id":174,"nuts":"ITH4","name":"Friuli-Venezia Giulia","area":7862,"density":155.9,"edu_3":17.2,"gdp":36628,"gdp_ph":29000,"life_ex":82.6,"pop":1229363,"unempl":8,"coords":[13.12828512525006,46.08423987500004]},"geometry":{"type":"Polygon","coordinates":[[[13.714184999999986,46.522703500000034],[13.375492501999986,46.29823250000004],[13.722823500000146,45.59472550000004],[13.633330500000085,45.766525],[13.101107500000069,45.64321150000001],[12.425833500000067,45.94735700000007],[12.322118999999986,46.266872500000034],[12.731389500000148,46.634291500000074],[13.714184999999986,46.522703500000034]]]}},{"type":"Feature","properties":{"id":175,"nuts":"ITH5","name":"Emilia-Romagna","area":22453,"density":196.5,"edu_3":18.7,"gdp":142609,"gdp_ph":31400,"life_ex":83.4,"pop":4446354,"unempl":8.3,"coords":[11.039567823529481,44.515044500000066]},"geometry":{"type":"Polygon","coordinates":[[[11.426752000000079,44.95008850000005],[12.280868500000082,44.94177250000007],[12.394313000000068,44.79444500000011],[12.239776500000147,44.70605850000004],[12.38353900000007,44.22449500000005],[12.750171500000079,43.96815850000007],[12.283786000000077,43.76490800000005],[11.710172500000084,43.87744500000008],[11.37778850000015,44.1991615],[10.917724499999991,44.062771000000026],[9.81993700000001,44.46642300000008],[9.686701500000083,44.36593650000003],[9.20316299999999,44.61373150000003],[9.201438000000081,44.68648150000007],[9.43901050000008,45.09343700000011],[9.98895250000001,45.13211050000007],[10.56855850000008,44.90833300000003],[11.426752000000079,44.95008850000005]]]}},{"type":"Feature","properties":{"id":176,"nuts":"ITI1","name":"Toscana","area":22988,"density":161.9,"edu_3":17.4,"gdp":106013,"gdp_ph":27600,"life_ex":83.4,"pop":3750511,"unempl":10.1,"coords":[10.92955673333339,43.58658020000004]},"geometry":{"type":"Polygon","coordinates":[[[12.283786000000077,43.76490800000005],[12.21380049999999,43.610847500000034],[11.894973000000078,42.83466700000008],[11.44997500000008,42.37781150000001],[10.951675500000079,42.73757950000004],[10.499392000000086,42.93544750000001],[10.528791500000011,43.23176950000004],[10.330446500000079,43.47382750000003],[10.25942800000007,43.81566300000003],[10.018758999999989,44.04444500000011],[9.686701500000083,44.36593650000003],[9.81993700000001,44.46642300000008],[10.917724499999991,44.062771000000026],[11.37778850000015,44.1991615],[11.710172500000084,43.87744500000008],[12.283786000000077,43.76490800000005]]]}},{"type":"Feature","properties":{"id":177,"nuts":"ITI2","name":"Umbria","area":8464,"density":105.3,"edu_3":20.1,"gdp":21533,"gdp_ph":23200,"life_ex":83.3,"pop":896742,"unempl":11.3,"coords":[12.583302750333397,42.98677758316671]},"geometry":{"type":"Polygon","coordinates":[[[13.189494000000082,42.73244850000003],[12.526766000000066,42.364700500000026],[11.894973000000078,42.83466700000008],[12.21380049999999,43.610847500000034],[12.77895550000008,43.41339850000003],[12.895827502000088,42.96460349900008],[13.189494000000082,42.73244850000003]]]}},{"type":"Feature","properties":{"id":178,"nuts":"ITI3","name":"Marche","area":9401,"density":164.8,"edu_3":18.6,"gdp":40877,"gdp_ph":25500,"life_ex":83.6,"pop":1553138,"unempl":10.1,"coords":[13.001610555666739,43.28801511111115]},"geometry":{"type":"Polygon","coordinates":[[[13.916707000000088,42.894607500000006],[13.357769999000084,42.694092001],[13.189494000000082,42.73244850000003],[12.895827502000088,42.96460349900008],[12.77895550000008,43.41339850000003],[12.21380049999999,43.610847500000034],[12.283786000000077,43.76490800000005],[12.750171500000079,43.96815850000007],[13.627983000000086,43.54907200000008],[13.916707000000088,42.894607500000006]]]}},{"type":"Feature","properties":{"id":179,"nuts":"ITI4","name":"Lazio","area":17232,"density":331.6,"edu_3":23.3,"gdp":172246,"gdp_ph":29300,"life_ex":82.8,"pop":5870451,"unempl":12.5,"coords":[12.996745366600088,41.97025856673338]},"geometry":{"type":"Polygon","coordinates":[[[13.189494000000082,42.73244850000003],[13.357769999000084,42.694092001],[13.17842850000008,42.479332],[13.296276000000148,41.94861200000008],[13.573834500000146,41.75434850000005],[13.94101450000008,41.687977000000046],[13.97790800000007,41.46248250000008],[13.762112500000086,41.22259500000007],[13.281273500000083,41.2972565],[13.067771000000079,41.22140900000011],[12.618282500000078,41.447460000000035],[11.835301500000071,42.02868650000005],[11.44997500000008,42.37781150000001],[11.894973000000078,42.83466700000008],[12.526766000000066,42.364700500000026],[13.189494000000082,42.73244850000003]]]}},{"type":"Feature","properties":{"id":180,"nuts":"LI00","name":"Liechtenstein","area":160,"density":236.8,"edu_3":null,"gdp":null,"gdp_ph":null,"life_ex":82.5,"pop":37129,"unempl":null,"coords":[9.545878115666701,47.13677226600006]},"geometry":{"type":"Polygon","coordinates":[[[9.60705200000001,47.06077050000005],[9.500603347000009,47.07860179800008],[9.529979000000083,47.27094450000004],[9.60705200000001,47.06077050000005]]]}},{"type":"Feature","properties":{"id":181,"nuts":"LT00","name":"Lietuva","area":65300,"density":47.2,"edu_3":36.7,"gdp":30958,"gdp_ph":16900,"life_ex":74.1,"pop":2943472,"unempl":10.7,"coords":[23.818693600050075,55.27863915015005]},"geometry":{"type":"Polygon","coordinates":[[[26.63036500000007,55.68066700000003],[26.67651550000008,55.15877300000011],[25.85807700000015,54.92761850000011],[25.55111650000015,54.317063500000074],[25.269746000000083,54.275176000000044],[24.43403700100015,53.90447400200003],[23.51464999999999,53.95656000000008],[23.38400949999999,54.22612400000003],[22.792095499999988,54.363359],[22.855188500000082,54.887788],[22.121396000000146,55.028256500000026],[21.29786949999999,55.29719950000003],[21.08461500000007,55.73137350100001],[21.06423799999999,56.06913700000007],[21.610600000000147,56.325184000000036],[22.126610000000085,56.43214400000011],[24.454149000000086,56.25815600000004],[24.90560350000007,56.41277300000007],[25.092037500000174,56.18604200000004],[25.650952999999987,56.134914500000036],[26.63036500000007,55.68066700000003]]]}},{"type":"Feature","properties":{"id":182,"nuts":"LU00","name":"Luxembourg (Grand-Duché)","area":2586,"density":210.1,"edu_3":45.9,"gdp":41730,"gdp_ph":66700,"life_ex":81.9,"pop":549680,"unempl":5.9,"coords":[6.099584421375063,49.81300117837503]},"geometry":{"type":"Polygon","coordinates":[[[6.13766250000009,50.129951500000004],[6.36274462500009,49.576801036000006],[6.375454308000087,49.54707028200005],[6.367102499999987,49.46948250000003],[5.818117000000086,49.546310500000004],[5.735759000000087,49.89698050000004],[5.969346438000088,50.173224609000044],[6.030488999999989,50.16418850000008],[6.13766250000009,50.129951500000004]]]}},{"type":"Feature","properties":{"id":183,"nuts":"LV00","name":"Latvija","area":64573,"density":32.4,"edu_3":30.2,"gdp":20182,"gdp_ph":15000,"life_ex":74.3,"pop":2001468,"unempl":10.8,"coords":[24.519939407481566,56.91189059266671]},"geometry":{"type":"Polygon","coordinates":[[[27.351579001000147,57.518237001000045],[27.869606000000147,57.286629500000004],[27.873960500000067,56.87741900000009],[28.203890500000085,56.21466000000004],[27.65308950000008,55.92958850000008],[26.63036500000007,55.68066700000003],[25.650952999999987,56.134914500000036],[25.092037500000174,56.18604200000004],[24.90560350000007,56.41277300000007],[24.454149000000086,56.25815600000004],[22.126610000000085,56.43214400000011],[21.610600000000147,56.325184000000036],[21.06423799999999,56.06913700000007],[20.98416300000008,56.5198565],[21.06399450000015,56.84178800000001],[21.414535500000085,57.06609250000008],[21.689124501000066,57.55781850100004],[22.50653800000015,57.743176000000005],[23.12673050000015,57.35155250000008],[23.238162999999986,57.10785350000003],[23.93453249999999,57.00637050000009],[24.410199500000147,57.26602550000007],[24.352817499999986,57.87655650000005],[25.19941200000008,58.085575000000006],[26.205723000000148,57.71500000000003],[26.499849500000067,57.52450950000011],[26.92589950000007,57.633320000000026],[27.351579001000147,57.518237001000045]]]}},{"type":"Feature","properties":{"id":184,"nuts":"ME00","name":"Црна Гора / Crna Gora","area":13812,"density":45,"edu_3":null,"gdp":null,"gdp_ph":null,"life_ex":76.5,"pop":621521,"unempl":null,"coords":[19.28635947400006,42.82636556188892]},"geometry":{"type":"Polygon","coordinates":[[[18.492714941000088,42.44275437200008],[18.459968451000094,42.821522782000045],[18.68842115800001,43.25468383400005],[19.15526698299999,43.53682656000001],[19.54484700000009,43.24756300000004],[20.345819999000014,42.910927001000005],[20.07630000000009,42.5558235],[19.662146221000086,42.62823805400001],[19.15175051300008,42.03895095400003],[18.492714941000088,42.44275437200008]]]}},{"type":"Feature","properties":{"id":185,"nuts":"MK00","name":"Poranešnata jugoslovenska Republika Makedonija","area":25713,"density":82.8,"edu_3":17.6,"gdp":7479,"gdp_ph":9000,"life_ex":75.5,"pop":2065410,"unempl":28,"coords":[21.672455448384678,41.48279965169236]},"geometry":{"type":"Polygon","coordinates":[[[22.360206500000146,42.311157001000026],[22.867141500000088,42.02221250000008],[22.963579000000067,41.77475750000008],[22.93145200000015,41.34092700000011],[22.419193500000148,41.11932350000001],[22.059028500000068,41.15023400000007],[21.788551500000068,40.93132800000001],[20.98333149999999,40.85490100000004],[20.73169673999999,40.91169299500001],[20.515378148999986,41.231678704000046],[20.457909723000085,41.55394652000007],[20.560679717000085,41.86834975200003],[21.10377249999999,42.205887000000075],[22.360206500000146,42.311157001000026]]]}},{"type":"Feature","properties":{"id":186,"nuts":"MT00","name":"Malta","area":316,"density":1339.8,"edu_3":19.5,"gdp":6631,"gdp_ph":21500,"life_ex":81.9,"pop":425384,"unempl":5.9,"coords":[14.4566423723334,35.88830187100008]},"geometry":{"type":"Polygon","coordinates":[[[14.388994117000067,35.95923261300008],[14.564253500000149,35.87748350000008],[14.416679499999987,35.82818950000008],[14.388994117000067,35.95923261300008]]]}},{"type":"Feature","properties":{"id":187,"nuts":"NL11","name":"Groningen","area":2960,"density":250.4,"edu_3":31.7,"gdp":29216,"gdp_ph":45600,"life_ex":80.3,"pop":582728,"unempl":7.8,"coords":[6.715998583166737,53.195407749833386]},"geometry":{"type":"Polygon","coordinates":[[[7.209258000000091,53.243786],[7.092739499000089,52.83819599900005],[6.737616000000088,53.119438],[6.3152370000000815,53.094051500000035],[6.191428500000086,53.41104800000011],[6.749712499999987,53.46592700000011],[7.209258000000091,53.243786]]]}},{"type":"Feature","properties":{"id":188,"nuts":"NL12","name":"Friesland (NL)","area":5749,"density":193.6,"edu_3":26,"gdp":18827,"gdp_ph":26300,"life_ex":81,"pop":646317,"unempl":7.2,"coords":[5.756735749125053,53.03794056250005]},"geometry":{"type":"Polygon","coordinates":[[[6.3152370000000815,53.094051500000035],[6.119813999999991,52.85426700000005],[5.7951485000000105,52.80649950000003],[5.712264992999991,52.83802800000001],[5.166784500000091,52.999243500000034],[5.165883500000092,52.99986900000005],[5.587325000000078,53.30051800000007],[6.191428500000086,53.41104800000011],[6.3152370000000815,53.094051500000035]]]}},{"type":"Feature","properties":{"id":189,"nuts":"NL13","name":"Drenthe","area":2680,"density":185.5,"edu_3":27.8,"gdp":13481,"gdp_ph":24800,"life_ex":81.2,"pop":488988,"unempl":6.6,"coords":[6.523077916666722,52.868969916500056]},"geometry":{"type":"Polygon","coordinates":[[[7.092739499000089,52.83819599900005],[6.71005750000009,52.62780550000011],[6.1630035009999915,52.68006150000011],[6.119813999999991,52.85426700000005],[6.3152370000000815,53.094051500000035],[6.737616000000088,53.119438],[7.092739499000089,52.83819599900005]]]}},{"type":"Feature","properties":{"id":190,"nuts":"NL21","name":"Overijssel","area":3421,"density":342.8,"edu_3":31.6,"gdp":35705,"gdp_ph":28400,"life_ex":81.2,"pop":1139697,"unempl":6.7,"coords":[6.328268875375052,52.50929475000005]},"geometry":{"type":"Polygon","coordinates":[[[6.71005750000009,52.62780550000011],[7.06575550000008,52.24128350000001],[6.760448000000082,52.11858000000001],[6.147613000000092,52.22769150000005],[5.864311002000079,52.51816950000003],[5.7951485000000105,52.80649950000003],[6.119813999999991,52.85426700000005],[6.1630035009999915,52.68006150000011],[6.71005750000009,52.62780550000011]]]}},{"type":"Feature","properties":{"id":191,"nuts":"NL22","name":"Gelderland","area":5136,"density":406,"edu_3":34,"gdp":60490,"gdp_ph":27200,"life_ex":81.5,"pop":2019692,"unempl":6.4,"coords":[5.817555221800058,52.017039534300054]},"geometry":{"type":"Polygon","coordinates":[[[6.760448000000082,52.11858000000001],[6.4074870000000885,51.828095500000074],[5.9533605000000875,51.74810050000008],[5.865158500000092,51.75740800000003],[5.000533999999988,51.82093800000007],[5.1494559999999865,51.933452500000044],[5.62255121600009,51.96832984300005],[5.40463299999999,52.24963000000008],[5.864311002000079,52.51816950000003],[6.147613000000092,52.22769150000005],[6.760448000000082,52.11858000000001]]]}},{"type":"Feature","properties":{"id":192,"nuts":"NL23","name":"Flevoland","area":2412,"density":282,"edu_3":29.2,"gdp":10292,"gdp_ph":23600,"life_ex":81.3,"pop":399893,"unempl":10.1,"coords":[5.547312873875043,52.49064450025003]},"geometry":{"type":"Polygon","coordinates":[[[5.7951485000000105,52.80649950000003],[5.864311002000079,52.51816950000003],[5.40463299999999,52.24963000000008],[5.335462000000092,52.29021850000001],[5.335461995000088,52.290218503000006],[5.28114050100001,52.31677249900008],[5.650081000000085,52.61561950000001],[5.712264992999991,52.83802800000001],[5.7951485000000105,52.80649950000003]]]}},{"type":"Feature","properties":{"id":193,"nuts":"NL31","name":"Utrecht","area":1449,"density":903.4,"edu_3":45.7,"gdp":52096,"gdp_ph":38200,"life_ex":82,"pop":1253672,"unempl":5.9,"coords":[5.262102369333387,52.158381057166714]},"geometry":{"type":"Polygon","coordinates":[[[5.335462000000092,52.29021850000001],[5.40463299999999,52.24963000000008],[5.62255121600009,51.96832984300005],[5.1494559999999865,51.933452500000044],[4.794524000000081,52.22672650000004],[5.265988000000078,52.28192900000005],[5.335462000000092,52.29021850000001]]]}},{"type":"Feature","properties":{"id":194,"nuts":"NL32","name":"Noord-Holland","area":4091,"density":1025.3,"edu_3":40.8,"gdp":109282,"gdp_ph":36600,"life_ex":81.5,"pop":2741369,"unempl":6.3,"coords":[5.029058832888934,52.52702677800004]},"geometry":{"type":"Polygon","coordinates":[[[5.28114050100001,52.31677249900008],[5.335461995000088,52.290218503000006],[5.265988000000078,52.28192900000005],[4.794524000000081,52.22672650000004],[4.493835499999989,52.32826300000005],[4.730618499999991,52.96254350000004],[5.165883500000092,52.99986900000005],[5.166784500000091,52.999243500000034],[5.027292999999986,52.337675500000046],[5.28114050100001,52.31677249900008]]]}},{"type":"Feature","properties":{"id":195,"nuts":"NL33","name":"Zuid-Holland","area":3418,"density":1271.5,"edu_3":34.1,"gdp":125187,"gdp_ph":32000,"life_ex":81.6,"pop":3577032,"unempl":7.8,"coords":[4.587747833333357,51.95224275000004]},"geometry":{"type":"Polygon","coordinates":[[[4.794524000000081,52.22672650000004],[5.1494559999999865,51.933452500000044],[5.000533999999988,51.82093800000007],[4.249017000000009,51.645801500000005],[3.8391205000000923,51.758275000000026],[4.493835499999989,52.32826300000005],[4.794524000000081,52.22672650000004]]]}},{"type":"Feature","properties":{"id":196,"nuts":"NL34","name":"Zeeland","area":2933,"density":213.5,"edu_3":24.8,"gdp":13088,"gdp_ph":31000,"life_ex":81.7,"pop":380621,"unempl":5.2,"coords":[4.037342400000023,51.54992980000003]},"geometry":{"type":"Polygon","coordinates":[[[4.249017000000009,51.645801500000005],[4.279564999999991,51.376017500000046],[4.24366950000001,51.3747295],[3.5753400000000113,51.59482550000007],[3.8391205000000923,51.758275000000026],[4.249017000000009,51.645801500000005]]]}},{"type":"Feature","properties":{"id":197,"nuts":"NL41","name":"Noord-Brabant","area":5082,"density":503.7,"edu_3":33.2,"gdp":89539,"gdp_ph":32900,"life_ex":81.5,"pop":2479274,"unempl":6.4,"coords":[5.141846000250045,51.48895575000005]},"geometry":{"type":"Polygon","coordinates":[[[5.865158500000092,51.75740800000003],[5.931195500000086,51.38460500000011],[5.56628350200009,51.220836500000075],[5.23771650000009,51.26160050000004],[5.0052980000000105,51.444439000000045],[4.279564999999991,51.376017500000046],[4.249017000000009,51.645801500000005],[5.000533999999988,51.82093800000007],[5.865158500000092,51.75740800000003]]]}},{"type":"Feature","properties":{"id":198,"nuts":"NL42","name":"Limburg (NL)","area":2209,"density":521.4,"edu_3":27.2,"gdp":36055,"gdp_ph":29000,"life_ex":81.1,"pop":1120006,"unempl":6.7,"coords":[5.904910278111187,51.298265611111184]},"geometry":{"type":"Polygon","coordinates":[[[5.9533605000000875,51.74810050000008],[6.118231500000093,51.656051500000046],[6.1748640000000705,51.184414000000004],[6.020998999999989,50.75429550000007],[5.68762200000009,50.81192400000003],[5.826478001000083,51.16675550000011],[5.56628350200009,51.220836500000075],[5.931195500000086,51.38460500000011],[5.865158500000092,51.75740800000003],[5.9533605000000875,51.74810050000008]]]}},{"type":"Feature","properties":{"id":199,"nuts":"NO01","name":"Oslo og Akershus","area":5372,"density":239.8,"edu_3":53.4,"gdp":83974,"gdp_ph":47400,"life_ex":82.3,"pop":1209992,"unempl":3.8,"coords":[11.28504362437505,60.03164787537504]},"geometry":{"type":"Polygon","coordinates":[[[11.839730500000087,59.84076700000003],[11.926968499999987,59.79047800000001],[11.50240350000007,59.63475250000005],[10.49731450100009,59.788338502000045],[10.60072050000008,60.13161000000008],[10.925566494000009,60.47258500100003],[11.209564500000084,60.50491450000004],[11.778080499999987,60.08973750000007],[11.839730500000087,59.84076700000003]]]}},{"type":"Feature","properties":{"id":200,"nuts":"NO02","name":"Hedmark og Oppland","area":52590,"density":7.7,"edu_3":33.6,"gdp":15001,"gdp_ph":25900,"life_ex":80.9,"pop":382230,"unempl":2.9,"coords":[10.526195323851901,61.39975302622227]},"geometry":{"type":"Polygon","coordinates":[[[12.254665499999987,62.33102400000007],[12.29937100000015,62.267494],[12.137665500000082,61.723816],[12.87084850000008,61.35649500000011],[12.670191999999986,61.05598050000003],[12.223991500000068,61.01307650000007],[12.606883000000067,60.51274099900007],[12.449626994000084,60.04031049700001],[11.839730500000087,59.84076700000003],[11.778080499999987,60.08973750000007],[11.209564500000084,60.50491450000004],[10.925566494000009,60.47258500100003],[10.60072050000008,60.13161000000008],[10.035329998000009,60.63205500000004],[9.33210999900001,60.72990400100008],[8.251701000000082,61.07394400000004],[8.25145000000009,61.334393000000034],[7.908215500000011,61.72167900000011],[7.5138557569999875,61.727368209000076],[7.4194570000000795,62.080741000000046],[8.20585200299999,62.331744001000004],[9.062061999000093,62.37260850000007],[9.60192100000009,62.25572650000004],[10.097582999999986,62.42780750000003],[10.17647500000001,62.69692800000007],[10.928248000000082,62.696295500000076],[11.556107000000083,62.371586000000036],[12.254665499999987,62.33102400000007]]]}},{"type":"Feature","properties":{"id":201,"nuts":"NO03","name":"Sør-Østlandet","area":36613,"density":28.6,"edu_3":36.3,"gdp":39771,"gdp_ph":27500,"life_ex":81.3,"pop":969415,"unempl":4.1,"coords":[9.016089178500055,59.845324464571476]},"geometry":{"type":"Polygon","coordinates":[[[10.60072050000008,60.13161000000008],[10.49731450100009,59.788338502000045],[10.46713650000001,59.18930800000004],[10.228469999999987,59.03839500000004],[9.423407500000081,58.90067650000009],[9.365971000000087,58.77134900000004],[7.966328500000088,58.968421000000035],[7.48373550000008,59.63669500000009],[7.096287501000091,59.782777001],[7.673709000000088,60.294335000000046],[7.803026999999986,60.896734500000036],[8.251701000000082,61.07394400000004],[9.33210999900001,60.72990400100008],[10.035329998000009,60.63205500000004],[10.60072050000008,60.13161000000008]]]}},{"type":"Feature","properties":{"id":202,"nuts":"NO04","name":"Agder og Rogaland","area":25812,"density":31.7,"edu_3":38.5,"gdp":40494,"gdp_ph":36500,"life_ex":81.9,"pop":751632,"unempl":3.1,"coords":[6.766247196066721,58.94924801820004]},"geometry":{"type":"Polygon","coordinates":[[[7.096287501000091,59.782777001],[7.48373550000008,59.63669500000009],[7.966328500000088,58.968421000000035],[9.365971000000087,58.77134900000004],[8.258841499999988,58.133098500000074],[7.6687000000000864,58.01367200000004],[6.640787999999986,58.06628400000011],[6.719108000000091,58.219986000000006],[5.8635460000000705,58.42963400000008],[5.489387999999991,58.753647],[6.163040500000079,59.31438050000003],[5.383417000000009,59.28382850000003],[5.237527440000008,59.435165772000005],[5.823972500000082,59.64592300000007],[6.333056500000083,59.78385900000001],[7.096287501000091,59.782777001]]]}},{"type":"Feature","properties":{"id":203,"nuts":"NO05","name":"Vestlandet","area":49156,"density":18.6,"edu_3":42.3,"gdp":46216,"gdp_ph":35500,"life_ex":82.4,"pop":875475,"unempl":3,"coords":[7.115693710400055,61.51988580844004]},"geometry":{"type":"Polygon","coordinates":[[[9.062061999000093,62.37260850000007],[8.20585200299999,62.331744001000004],[7.4194570000000795,62.080741000000046],[7.5138557569999875,61.727368209000076],[7.908215500000011,61.72167900000011],[8.25145000000009,61.334393000000034],[8.251701000000082,61.07394400000004],[7.803026999999986,60.896734500000036],[7.673709000000088,60.294335000000046],[7.096287501000091,59.782777001],[6.333056500000083,59.78385900000001],[5.823972500000082,59.64592300000007],[5.67249799999999,60.080520500000034],[5.24928900000009,60.207283000000075],[5.274983999999989,60.54904950000008],[5.045309500000087,60.77662300000003],[5.009667000000093,61.64922700000011],[5.1736495000000104,61.986984500000005],[6.451059500000071,62.400821500000006],[6.257280000000009,62.583492500000034],[6.9810950000000105,62.724529500000074],[7.979278500000078,63.08890150000008],[8.764103000000091,63.184510000000046],[9.447754000000089,63.16301850000008],[9.243730000000085,62.55607800000007],[9.062061999000093,62.37260850000007]]]}},{"type":"Feature","properties":{"id":204,"nuts":"NO06","name":"Trøndelag","area":41254,"density":11.4,"edu_3":40.7,"gdp":20214,"gdp_ph":30800,"life_ex":82.1,"pop":441193,"unempl":3.8,"coords":[11.568885296963018,63.61207274092599]},"geometry":{"type":"Polygon","coordinates":[[[14.325986000000086,65.11891150000008],[13.654259505000084,64.580337498],[14.113871499999988,64.46248600000007],[13.967526499999991,64.00797250000011],[13.21110999999999,64.09536750000001],[12.68356800000015,63.97422400000005],[12.14977101100007,63.59394450600007],[11.974581500000085,63.26922600000009],[12.218233000000083,63.000335500000006],[12.05614349999999,62.611919],[12.254665499999987,62.33102400000007],[11.556107000000083,62.371586000000036],[10.928248000000082,62.696295500000076],[10.17647500000001,62.69692800000007],[10.097582999999986,62.42780750000003],[9.60192100000009,62.25572650000004],[9.062061999000093,62.37260850000007],[9.243730000000085,62.55607800000007],[9.447754000000089,63.16301850000008],[8.764103000000091,63.184510000000046],[9.93722050000008,63.87067800000003],[10.21071649999999,64.20481850000004],[11.398470000000088,64.63095100000007],[11.305308501000013,64.88193500100004],[11.96097950000015,65.07714800000008],[12.906963999999988,64.97424900000004],[13.152545002000068,65.11587800000001],[14.325986000000086,65.11891150000008]]]}},{"type":"Feature","properties":{"id":205,"nuts":"NO07","name":"Nord-Norge","area":112975,"density":4.5,"edu_3":38.9,"gdp":21330,"gdp_ph":29700,"life_ex":81.1,"pop":478033,"unempl":3.3,"coords":[20.606039953013592,68.65832453377033]},"geometry":{"type":"Polygon","coordinates":[[[28.930023000000148,69.05181100000004],[28.831802500000066,69.22450250000003],[29.336273500000146,69.47834000000009],[29.13257400100008,69.69545749800011],[27.55446999899999,70.05963149900003],[26.490956500000067,69.94511400000005],[25.97596999999999,69.610588],[25.77711499899999,69.01918799900011],[24.91674050000009,68.6052325],[23.98326850000015,68.82743050000005],[23.167879000000084,68.6286695],[22.34022350000015,68.82723250000004],[21.62640750500009,69.27656549700004],[20.550380507000085,69.06008150000008],[20.22654349999999,68.490814],[19.92137700200007,68.35601800100011],[18.98380250000008,68.51696000000004],[18.125923000000085,68.53652200000005],[17.89976300000015,67.96936800000009],[17.281521000000083,68.11882000000003],[16.73811900000007,67.91421450000007],[16.40765400000015,67.53412600000007],[16.404100500000084,67.20497200000003],[15.377222999999987,66.48430600000009],[15.484738500000077,66.282463],[14.516288000000088,66.13258350000001],[14.62547000000015,65.81181400000003],[14.325986000000086,65.11891150000008],[13.152545002000068,65.11587800000001],[12.906963999999988,64.97424900000004],[11.96097950000015,65.07714800000008],[12.037712000999989,65.41883850100007],[12.582494500000081,65.76663200000007],[13.033900999999986,66.20169850000008],[13.044128500000085,66.49404900000008],[13.741207000000088,66.94764700000007],[14.498456500000088,67.23878500000001],[14.915501502000069,67.65956100100004],[14.771508000000068,67.82933050000003],[15.73588050000015,67.96965],[16.32826399999999,68.22390000000007],[16.590027000000077,68.63150000000007],[17.465153001000147,68.81987500000008],[18.085244999999986,69.2311555],[18.132572000000067,69.456185],[19.274318500000078,69.77920550000005],[20.54022599999999,69.76596850000004],[21.863198500000067,70.01045250000004],[21.939291000000082,70.32669850000008],[23.24255000000008,70.18935400000004],[24.236057499999987,70.59986100000009],[24.537023500000174,70.96665150000007],[25.911754500000086,70.87564850000007],[25.232876000000147,70.56550600000003],[24.936348000000066,70.23090350000007],[25.224326999999988,70.09112550000009],[26.131126501000068,70.767021],[27.200126500000067,71.01464850000008],[28.245362000000085,71.08631900000009],[29.345995028000146,70.68286900500004],[30.080834000000067,70.70767200000009],[31.051046477000085,70.28337099800001],[29.648039000000068,69.97483050000011],[30.79527300000015,69.79180150000008],[30.938864497999987,69.56073650000008],[29.29332000000008,69.29811150000009],[28.930023000000148,69.05181100000004]],[[15.905637500000068,68.96472950000009],[15.458731500000084,68.81338500000004],[15.216352500000085,68.46767450000004],[15.632227000000086,68.32402050000007],[16.550216500000147,68.82126600000004],[15.905637500000068,68.96472950000009]],[[17.632271000000088,69.50546250000008],[16.910099000000088,69.23610700000009],[17.95833200000007,69.17679600000008],[17.632271000000088,69.50546250000008]]]}},{"type":"Feature","properties":{"id":206,"nuts":"PL11","name":"Łódzkie","area":18219,"density":137.5,"edu_3":25.4,"gdp":22631,"gdp_ph":15200,"life_ex":75.4,"pop":2498861,"unempl":8.9,"coords":[19.39480430600007,51.57757646161545]},"geometry":{"type":"Polygon","coordinates":[[[20.43284600000007,51.33937650000007],[19.994088500000146,51.18405900000005],[19.74704299999999,50.86596600000007],[18.920105500000147,51.09877250000011],[18.672937999999988,51.05688200000003],[18.16368200000008,51.172517500000026],[18.074510501000077,51.34991349900008],[18.696794000000068,51.86564850000008],[19.04712000000015,52.33280400000007],[19.28922600000007,52.39272950000003],[19.901661999999988,52.3039215],[20.570767477000146,51.888042502000076],[20.621672999999987,51.65786100000008],[20.43284600000007,51.33937650000007]]]}},{"type":"Feature","properties":{"id":207,"nuts":"PL12","name":"Mazowieckie","area":35558,"density":148.6,"edu_3":37.6,"gdp":82930,"gdp_ph":26700,"life_ex":77.7,"pop":5292567,"unempl":7.2,"coords":[21.122659693222317,52.3505633614445]},"geometry":{"type":"Polygon","coordinates":[[[23.128409000000147,52.28784150000007],[22.887471500000146,52.09205050000003],[21.866354000000086,51.94344650000011],[21.802998000000088,51.07207900200001],[21.463460000000083,51.01320150000004],[20.43284600000007,51.33937650000007],[20.621672999999987,51.65786100000008],[20.570767477000146,51.888042502000076],[19.901661999999988,52.3039215],[19.28922600000007,52.39272950000003],[19.423325500000146,52.82987600000007],[19.76160800000008,53.15177850200007],[20.305057500000146,53.14015350000011],[20.692374500000085,53.30262200000004],[21.61293900000007,53.48085050000003],[21.69501700000015,53.1376755],[22.20969000000008,52.854498500000034],[22.542996001000148,52.42213600000008],[23.128409000000147,52.28784150000007]]]}},{"type":"Feature","properties":{"id":208,"nuts":"PL21","name":"Małopolskie","area":15183,"density":218.2,"edu_3":27.3,"gdp":27653,"gdp_ph":14100,"life_ex":78.5,"pop":3316097,"unempl":9.1,"coords":[20.314707666833392,49.92560241666672]},"geometry":{"type":"Polygon","coordinates":[[[21.208831500000088,50.35489800000005],[21.142111500000084,50.23767950000007],[21.39771250199999,49.433794000000034],[20.923722500000082,49.29623450000008],[20.476269000000087,49.414061000000004],[19.88392950000008,49.20417700000007],[19.467386500000174,49.61376700000011],[19.12020700000008,49.97028750000004],[19.517915499999987,50.416348500000026],[19.949966499999988,50.50478250000003],[20.27286749999999,50.46994550000011],[20.41557250000008,50.19125400000007],[21.208831500000088,50.35489800000005]]]}},{"type":"Feature","properties":{"id":209,"nuts":"PL22","name":"Śląskie","area":12333,"density":369.5,"edu_3":25,"gdp":48124,"gdp_ph":17700,"life_ex":76.3,"pop":4548177,"unempl":8.6,"coords":[18.943355732846218,50.21515805038466]},"geometry":{"type":"Polygon","coordinates":[[[19.74704299999999,50.86596600000007],[19.949966499999988,50.50478250000003],[19.517915499999987,50.416348500000026],[19.12020700000008,49.97028750000004],[19.467386500000174,49.61376700000011],[18.979868000000067,49.395217],[18.843764500000077,49.51835500000004],[18.583914830000083,49.879447776000006],[18.052692697000083,50.05036037900004],[18.03506100000007,50.06577200000004],[18.37276150000008,50.36109650000003],[18.672937999999988,51.05688200000003],[18.920105500000147,51.09877250000011],[19.74704299999999,50.86596600000007]]]}},{"type":"Feature","properties":{"id":210,"nuts":"PL31","name":"Lubelskie","area":25122,"density":85.1,"edu_3":26.9,"gdp":14208,"gdp_ph":11100,"life_ex":77.1,"pop":2134413,"unempl":9.9,"coords":[22.97991499992317,51.284669461692346]},"geometry":{"type":"Polygon","coordinates":[[[23.54764199900015,50.25160200000005],[22.638158000000146,50.30301200000008],[22.536698000000086,50.51669500000003],[21.864249500000085,50.80215350000003],[21.802998000000088,51.07207900200001],[21.866354000000086,51.94344650000011],[22.887471500000146,52.09205050000003],[23.128409000000147,52.28784150000007],[23.178338000000082,52.283141],[23.689023000000077,51.991910000000075],[23.53774999999999,51.644142000000045],[23.97048950000007,50.950618500000076],[24.091314500000067,50.56201150000004],[23.54764199900015,50.25160200000005]]]}},{"type":"Feature","properties":{"id":211,"nuts":"PL32","name":"Podkarpackie","area":17846,"density":116.8,"edu_3":23.8,"gdp":13840,"gdp_ph":11100,"life_ex":78.6,"pop":2083546,"unempl":14,"coords":[22.154650875083416,49.97531170841671]},"geometry":{"type":"Polygon","coordinates":[[[23.54764199900015,50.25160200000005],[22.640724000000148,49.529964500000006],[22.750946000000084,49.31658550100008],[22.56684000000007,49.088377500000036],[21.96051349999999,49.349197000000004],[21.39771250199999,49.433794000000034],[21.142111500000084,50.23767950000007],[21.208831500000088,50.35489800000005],[21.60138400000008,50.51978200000008],[21.864249500000085,50.80215350000003],[22.536698000000086,50.51669500000003],[22.638158000000146,50.30301200000008],[23.54764199900015,50.25160200000005]]]}},{"type":"Feature","properties":{"id":212,"nuts":"PL33","name":"Świętokrzyskie","area":11711,"density":107.3,"edu_3":25.8,"gdp":9181,"gdp_ph":12200,"life_ex":77.1,"pop":1253041,"unempl":11.4,"coords":[20.795755181818244,50.75613613654551]},"geometry":{"type":"Polygon","coordinates":[[[21.802998000000088,51.07207900200001],[21.864249500000085,50.80215350000003],[21.60138400000008,50.51978200000008],[21.208831500000088,50.35489800000005],[20.41557250000008,50.19125400000007],[20.27286749999999,50.46994550000011],[19.949966499999988,50.50478250000003],[19.74704299999999,50.86596600000007],[19.994088500000146,51.18405900000005],[20.43284600000007,51.33937650000007],[21.463460000000083,51.01320150000004],[21.802998000000088,51.07207900200001]]]}},{"type":"Feature","properties":{"id":213,"nuts":"PL34","name":"Podlaskie","area":20187,"density":57.8,"edu_3":27.8,"gdp":8309,"gdp_ph":11800,"life_ex":77.7,"pop":1165447,"unempl":9.1,"coords":[22.81996590631257,53.30361787500006]},"geometry":{"type":"Polygon","coordinates":[[[23.51464999999999,53.95656000000008],[23.81875000000008,53.24402400000008],[23.938640000000078,52.71291600000001],[23.46662799900008,52.54944799900011],[23.178338000000082,52.283141],[23.128409000000147,52.28784150000007],[22.542996001000148,52.42213600000008],[22.20969000000008,52.854498500000034],[21.69501700000015,53.1376755],[21.61293900000007,53.48085050000003],[21.88114099900008,53.46138700100005],[22.696801500000078,53.76158900000007],[22.78273850000008,53.91541600000011],[22.476611502000083,54.20092000000011],[22.792095499999988,54.363359],[23.38400949999999,54.22612400000003],[23.51464999999999,53.95656000000008]]]}},{"type":"Feature","properties":{"id":214,"nuts":"PL41","name":"Wielkopolskie","area":29826,"density":115.3,"edu_3":24.6,"gdp":34569,"gdp_ph":17000,"life_ex":77.2,"pop":3441440,"unempl":7.7,"coords":[17.25143058333342,52.34048580566672]},"geometry":{"type":"Polygon","coordinates":[[[17.39064900000008,53.49095850000003],[17.316912000000087,52.97404650000004],[17.48918400000008,52.72807500000005],[18.09038150000015,52.520436000000075],[19.04712000000015,52.33280400000007],[18.696794000000068,51.86564850000008],[18.074510501000077,51.34991349900008],[18.16368200000008,51.172517500000026],[17.79535200000015,51.194195000000036],[17.556293000000068,51.58421000000004],[16.964594500000146,51.549199000000044],[16.41618450000007,51.78490050000005],[15.97190599999999,51.9996835],[15.898151500000068,52.44737200000003],[15.962498000000068,53.041381],[16.32404050000008,53.049750000000074],[16.475249999000084,53.387785001000026],[16.89224750000008,53.65586900200003],[17.39064900000008,53.49095850000003]]]}},{"type":"Feature","properties":{"id":215,"nuts":"PL42","name":"Zachodniopomorskie","area":22892,"density":74,"edu_3":24.1,"gdp":14002,"gdp_ph":13800,"life_ex":76.7,"pop":1691400,"unempl":8.4,"coords":[15.430773423000078,53.47198469246158]},"geometry":{"type":"Polygon","coordinates":[[[16.89224750000008,53.65586900200003],[16.475249999000084,53.387785001000026],[16.32404050000008,53.049750000000074],[15.962498000000068,53.041381],[15.388310499999989,52.97163950000004],[14.565063000000066,52.624497000000076],[14.127624000000083,52.83166250000005],[14.41215700000015,53.329635999000004],[14.267542000000077,53.69780650000007],[14.529214000000081,53.65600600000005],[14.805883500000078,54.02959050000004],[16.151139500000085,54.290931],[16.699085000000082,54.569247000000075],[16.89224750000008,53.65586900200003]]]}},{"type":"Feature","properties":{"id":216,"nuts":"PL43","name":"Lubuskie","area":13988,"density":72.2,"edu_3":22.7,"gdp":8143,"gdp_ph":13500,"life_ex":76.3,"pop":1008564,"unempl":8.3,"coords":[15.336801153846206,52.10850923076926]},"geometry":{"type":"Polygon","coordinates":[[[16.41618450000007,51.78490050000005],[15.979244500000078,51.80230900000004],[15.592420000000146,51.4710685],[14.974183000000068,51.363950000000045],[14.729862000000082,51.581777000000045],[14.611003000000068,51.857009000000005],[14.75522699999999,52.070025000000044],[14.534361999999987,52.395008000000075],[14.565063000000066,52.624497000000076],[15.388310499999989,52.97163950000004],[15.962498000000068,53.041381],[15.898151500000068,52.44737200000003],[15.97190599999999,51.9996835],[16.41618450000007,51.78490050000005]]]}},{"type":"Feature","properties":{"id":217,"nuts":"PL51","name":"Dolnośląskie","area":19947,"density":144,"edu_3":27.2,"gdp":31815,"gdp_ph":18500,"life_ex":76.9,"pop":2869579,"unempl":9.1,"coords":[16.40280112493759,51.02476943775004]},"geometry":{"type":"Polygon","coordinates":[[[16.41618450000007,51.78490050000005],[16.964594500000146,51.549199000000044],[17.556293000000068,51.58421000000004],[17.79535200000015,51.194195000000036],[17.576381000000083,51.129421500000035],[17.04911050000007,50.46457350000003],[16.90792450000015,50.449454],[16.863270000000085,50.19812300000001],[16.36098849999999,50.37923650000005],[16.44492199999999,50.579571000000044],[15.863336999000069,50.68134800200005],[15.277251000000149,50.894201002000045],[14.823362000000088,50.870550500000036],[14.974183000000068,51.363950000000045],[15.592420000000146,51.4710685],[15.979244500000078,51.80230900000004],[16.41618450000007,51.78490050000005]]]}},{"type":"Feature","properties":{"id":218,"nuts":"PL52","name":"Opolskie","area":9412,"density":102.3,"edu_3":23.1,"gdp":7830,"gdp_ph":13100,"life_ex":77.2,"pop":960226,"unempl":7.8,"coords":[17.773693636363717,50.5873903636364]},"geometry":{"type":"Polygon","coordinates":[[[18.16368200000008,51.172517500000026],[18.672937999999988,51.05688200000003],[18.37276150000008,50.36109650000003],[18.03506100000007,50.06577200000004],[18.004322000000087,50.03779800000001],[17.50349250000008,50.27507100000008],[17.429605000000066,50.25451300000003],[16.90792450000015,50.449454],[17.04911050000007,50.46457350000003],[17.576381000000083,51.129421500000035],[17.79535200000015,51.194195000000036],[18.16368200000008,51.172517500000026]]]}},{"type":"Feature","properties":{"id":219,"nuts":"PL61","name":"Kujawsko-Pomorskie","area":17972,"density":115.2,"edu_3":20.2,"gdp":16597,"gdp_ph":13400,"life_ex":76.9,"pop":2068417,"unempl":10.7,"coords":[18.569933318363738,53.01695027290914]},"geometry":{"type":"Polygon","coordinates":[[[19.12971400000015,53.58826800000003],[19.25914549999999,53.39644100000007],[19.76160800000008,53.15177850200007],[19.423325500000146,52.82987600000007],[19.28922600000007,52.39272950000003],[19.04712000000015,52.33280400000007],[18.09038150000015,52.520436000000075],[17.48918400000008,52.72807500000005],[17.316912000000087,52.97404650000004],[17.39064900000008,53.49095850000003],[18.07200100200015,53.781040000000075],[19.12971400000015,53.58826800000003]]]}},{"type":"Feature","properties":{"id":220,"nuts":"PL62","name":"Warmińsko-Mazurskie","area":24173,"density":58.9,"edu_3":21.9,"gdp":10098,"gdp_ph":11800,"life_ex":76.3,"pop":1421264,"unempl":9.8,"coords":[20.869893900066746,53.7750792335334]},"geometry":{"type":"Polygon","coordinates":[[[22.792095499999988,54.363359],[22.476611502000083,54.20092000000011],[22.78273850000008,53.91541600000011],[22.696801500000078,53.76158900000007],[21.88114099900008,53.46138700100005],[21.61293900000007,53.48085050000003],[20.692374500000085,53.30262200000004],[20.305057500000146,53.14015350000011],[19.76160800000008,53.15177850200007],[19.25914549999999,53.39644100000007],[19.12971400000015,53.58826800000003],[19.32306800000015,53.81414650000005],[19.256953000000067,54.27846050000011],[19.80376849999999,54.44241050000011],[21.274392500000147,54.32838650000011],[22.792095499999988,54.363359]]]}},{"type":"Feature","properties":{"id":221,"nuts":"PL63","name":"Pomorskie","area":18310,"density":123.5,"edu_3":26.5,"gdp":20921,"gdp_ph":15600,"life_ex":77.9,"pop":2264817,"unempl":8.6,"coords":[18.169232628600113,54.12187079890007]},"geometry":{"type":"Polygon","coordinates":[[[19.256953000000067,54.27846050000011],[19.32306800000015,53.81414650000005],[19.12971400000015,53.58826800000003],[18.07200100200015,53.781040000000075],[17.39064900000008,53.49095850000003],[16.89224750000008,53.65586900200003],[16.699085000000082,54.569247000000075],[17.915472500000078,54.82595050000003],[18.42197728400015,54.78458248700008],[18.591159000000147,54.43018550000011],[19.256953000000067,54.27846050000011]]]}},{"type":"Feature","properties":{"id":222,"nuts":"PT11","name":"Norte","area":21286,"density":171.7,"edu_3":18.2,"gdp":48675,"gdp_ph":15600,"life_ex":81.3,"pop":3644195,"unempl":14.8,"coords":[-7.474986874999952,41.58764158333339]},"geometry":{"type":"Polygon","coordinates":[[[-6.983513499999958,41.97290400000003],[-6.5459714999999505,41.930687000000034],[-6.541842999999972,41.680423500000074],[-6.189351999999957,41.57504650000004],[-6.438078999999959,41.3053395],[-6.929903499999966,41.02946650000007],[-8.547706999999917,40.78815600000007],[-8.653119499999917,40.96477850000008],[-8.863185999999956,41.872066500000074],[-8.527473499999957,42.07764050000003],[-8.082896999999917,42.02845400000007],[-7.396796999999992,41.82673650000004],[-6.983513499999958,41.97290400000003]]]}},{"type":"Feature","properties":{"id":223,"nuts":"PT15","name":"Algarve","area":4997,"density":88.7,"edu_3":19.4,"gdp":7152,"gdp_ph":19700,"life_ex":80.6,"pop":442358,"unempl":14.5,"coords":[-8.125392639555514,37.25148831633336]},"geometry":{"type":"Polygon","coordinates":[[[-8.78454495799997,37.433998079999995],[-8.18723449999996,37.341102500000034],[-7.596197310999969,37.511926826000035],[-7.490613304999954,37.51755825700003],[-7.420054682999961,37.238277683000035],[-7.86892249899995,36.963170000999995],[-8.182106499999918,37.090275000000034],[-8.619509499999992,37.12323300000004],[-8.979350499999953,37.04385350000004],[-8.78454495799997,37.433998079999995]]]}},{"type":"Feature","properties":{"id":224,"nuts":"PT16","name":"Centro (P)","area":28199,"density":81.2,"edu_3":19.7,"gdp":31629,"gdp_ph":16000,"life_ex":81,"pop":2281164,"unempl":10.6,"coords":[-8.185059785714234,39.86964317871434]},"geometry":{"type":"Polygon","coordinates":[[[-6.865143999999958,40.270694502000026],[-7.015404999999959,39.67085650000007],[-7.542928999999958,39.66281500000008],[-8.172603499999951,39.23331350000001],[-8.338523999999921,39.46152450000011],[-8.903425999999968,39.46600550000011],[-8.930280499999952,39.01802200000003],[-9.416459499999974,39.05469300000004],[-9.365950499999968,39.348377500000026],[-9.115454499999913,39.54455800000011],[-8.653119499999917,40.96477850000008],[-8.547706999999917,40.78815600000007],[-6.929903499999966,41.02946650000007],[-6.793930499999959,40.6617435],[-6.865143999999958,40.270694502000026]]]}},{"type":"Feature","properties":{"id":225,"nuts":"PT17","name":"Lisboa","area":3015,"density":937,"edu_3":31,"gdp":63572,"gdp_ph":26900,"life_ex":81.3,"pop":2807525,"unempl":14.9,"coords":[-8.717228999999955,38.676437833333374]},"geometry":{"type":"Polygon","coordinates":[[[-8.73506649999996,38.516035000000045],[-8.924883499999993,38.75867600000004],[-8.491736999999915,38.75460250000003],[-8.73506649999996,38.516035000000045]]]}},{"type":"Feature","properties":{"id":226,"nuts":"PT18","name":"Alentejo","area":31605,"density":23.6,"edu_3":16.8,"gdp":11059,"gdp_ph":17700,"life_ex":80.2,"pop":743306,"unempl":14.3,"coords":[-7.967600763449951,38.59438192030005]},"geometry":{"type":"Polygon","coordinates":[[[-6.931738499999966,38.20837800000007],[-7.421201999999965,37.759178000000034],[-7.51269149999996,37.52625650000007],[-7.596197310999969,37.511926826000035],[-8.18723449999996,37.341102500000034],[-8.78454495799997,37.433998079999995],[-8.812971499999918,38.39934350000004],[-8.73506649999996,38.516035000000045],[-8.491736999999915,38.75460250000003],[-8.924883499999993,38.75867600000004],[-8.930280499999952,39.01802200000003],[-8.903425999999968,39.46600550000011],[-8.338523999999921,39.46152450000011],[-8.172603499999951,39.23331350000001],[-7.542928999999958,39.66281500000008],[-7.294675999999953,39.455993500000034],[-7.241259999999954,39.20853050000011],[-6.9513914999999145,39.02407050000011],[-7.262021499999918,38.70799000000011],[-7.31663599999996,38.43987650000008],[-6.931738499999966,38.20837800000007]]]}},{"type":"Feature","properties":{"id":229,"nuts":"RO11","name":"Nord-Vest","area":34159,"density":77,"edu_3":14.2,"gdp":14401,"gdp_ph":10500,"life_ex":74.8,"pop":2590220,"unempl":3.8,"coords":[23.38504060494743,47.221056104947415]},"geometry":{"type":"Polygon","coordinates":[[[24.947100500000147,47.72912400000007],[25.093540999999988,47.51031500000005],[25.06316100000015,47.13651150000004],[24.451973000000066,46.76576650000004],[24.06650950000008,46.733441500000026],[23.97114950000008,46.459107000000074],[23.38881599999999,46.540389000000005],[22.67691049999999,46.52324750000008],[22.67657550000007,46.40582550000005],[22.16584750000007,46.60438050000005],[21.441489999999988,46.65145100000001],[21.65926950000008,47.02256000000003],[22.022939497000067,47.517848994000076],[22.32036000000008,47.75202950000005],[22.89627050000007,47.954120500000045],[23.12361049900008,48.08174149900003],[23.49360499800008,47.96781150100003],[24.22826500000008,47.89646550000003],[24.628377500000084,47.94792950000004],[24.947100500000147,47.72912400000007]]]}},{"type":"Feature","properties":{"id":230,"nuts":"RO12","name":"Centru","area":34100,"density":69.8,"edu_3":14.6,"gdp":14498,"gdp_ph":11400,"life_ex":75.7,"pop":2355312,"unempl":9.2,"coords":[24.59534473517652,46.24471788229416]},"geometry":{"type":"Polygon","coordinates":[[[26.44001449999999,46.038897500000076],[26.384367000000083,45.73649800000004],[26.072181500000084,45.50635600000004],[25.32157749999999,45.38108900000003],[25.10321399700007,45.585194],[24.512834500000082,45.58682500000003],[23.598021999999986,45.47245600000008],[23.234863999999988,46.03050200000007],[22.67657550000007,46.40582550000005],[22.67691049999999,46.52324750000008],[23.38881599999999,46.540389000000005],[23.97114950000008,46.459107000000074],[24.06650950000008,46.733441500000026],[24.451973000000066,46.76576650000004],[25.06316100000015,47.13651150000004],[25.42553500000008,47.18402350000008],[25.733155501000084,47.074074499000005],[26.44001449999999,46.038897500000076]]]}},{"type":"Feature","properties":{"id":231,"nuts":"RO21","name":"Nord-Est","area":36850,"density":90.7,"edu_3":12,"gdp":13458,"gdp_ph":7200,"life_ex":74.6,"pop":3273367,"unempl":4.2,"coords":[26.509472625062546,47.21739381231256]},"geometry":{"type":"Polygon","coordinates":[[[28.11749949899999,46.11220549900003],[27.17315049999999,46.18133450000005],[26.44001449999999,46.038897500000076],[25.733155501000084,47.074074499000005],[25.42553500000008,47.18402350000008],[25.06316100000015,47.13651150000004],[25.093540999999988,47.51031500000005],[24.947100500000147,47.72912400000007],[25.23022449999999,47.89307450000007],[26.188041000000084,47.99546450000008],[26.33267550000008,48.185804500000074],[26.94708200000008,48.192333500000075],[27.26695699999999,47.712185000000034],[27.839349000999988,47.13007349900005],[28.09594000000007,46.97664050000003],[28.25813550000015,46.42623900000001],[28.11749949899999,46.11220549900003]]]}},{"type":"Feature","properties":{"id":232,"nuts":"RO22","name":"Sud-Est","area":35762,"density":80.7,"edu_3":12,"gdp":14007,"gdp_ph":9900,"life_ex":74.6,"pop":2509094,"unempl":10.4,"coords":[27.986591928666712,44.966126976190516]},"geometry":{"type":"Polygon","coordinates":[[[28.11749949899999,46.11220549900003],[28.16205600000015,45.50047400000011],[28.340337500000146,45.32674650000007],[28.793086499999987,45.24360250000001],[29.33515399999999,45.447951000000046],[29.686958000000146,45.15247700000003],[29.60574299999999,44.84663250000003],[29.12349250400007,44.77012100100001],[28.62204600000007,44.27256700000004],[28.578883999999988,43.73873900000001],[27.99426450000007,43.84296450000011],[27.695410000000066,43.98734300000001],[27.27381050000008,44.12756850000011],[27.93719050000007,44.25109050000003],[28.031371498999988,44.62460150000004],[27.72046449999999,44.766894500000035],[26.630948499999988,44.813602],[26.072181500000084,45.50635600000004],[26.384367000000083,45.73649800000004],[26.44001449999999,46.038897500000076],[27.17315049999999,46.18133450000005],[28.11749949899999,46.11220549900003]]]}},{"type":"Feature","properties":{"id":233,"nuts":"RO31","name":"Sud - Muntenia","area":34453,"density":92.5,"edu_3":11.4,"gdp":16479,"gdp_ph":10000,"life_ex":75.1,"pop":3085095,"unempl":9,"coords":[25.940703152130485,44.52660965221744]},"geometry":{"type":"Polygon","coordinates":[[[26.072181500000084,45.50635600000004],[26.630948499999988,44.813602],[27.72046449999999,44.766894500000035],[28.031371498999988,44.62460150000004],[27.93719050000007,44.25109050000003],[27.27381050000008,44.12756850000011],[26.910686500000082,44.13394150000005],[26.105386501999988,43.966179001],[25.792328000999987,43.71363050100007],[25.292867500000085,43.65443400000004],[24.656784499999986,43.72298450000011],[24.613998000000066,44.01240150000001],[24.859499000000085,44.09378350000003],[24.683373499999988,44.737779000000046],[24.49403950000007,44.82960300000008],[24.512834500000082,45.58682500000003],[25.10321399700007,45.585194],[25.32157749999999,45.38108900000003],[26.072181500000084,45.50635600000004]],[[26.273559000000148,44.76892300000003],[25.985697499999986,44.745252499],[25.823690500000083,44.398210000000006],[26.14537200000015,44.23449750000003],[26.395297500000083,44.45718150000005],[26.273559000000148,44.76892300000003]]]}},{"type":"Feature","properties":{"id":234,"nuts":"RO32","name":"Bucureşti - Ilfov","area":1821,"density":1297.7,"edu_3":35,"gdp":34994,"gdp_ph":30700,"life_ex":76.7,"pop":2282968,"unempl":7.2,"coords":[26.124723300000092,44.52081289980002]},"geometry":{"type":"Polygon","coordinates":[[[26.273559000000148,44.76892300000003],[26.395297500000083,44.45718150000005],[26.14537200000015,44.23449750000003],[25.823690500000083,44.398210000000006],[25.985697499999986,44.745252499],[26.273559000000148,44.76892300000003]]]}},{"type":"Feature","properties":{"id":235,"nuts":"RO41","name":"Sud-Vest Oltenia","area":29212,"density":71.7,"edu_3":15.1,"gdp":10480,"gdp_ph":9300,"life_ex":75.1,"pop":2033360,"unempl":6.5,"coords":[23.599541941176525,44.525257911764754]},"geometry":{"type":"Polygon","coordinates":[[[24.512834500000082,45.58682500000003],[24.49403950000007,44.82960300000008],[24.683373499999988,44.737779000000046],[24.859499000000085,44.09378350000003],[24.613998000000066,44.01240150000001],[24.656784499999986,43.72298450000011],[24.19868299999999,43.682461000000046],[23.73897149999999,43.80057900000003],[22.83943350199999,43.87215799900008],[22.923354999999987,44.10243600000007],[22.67516350000008,44.215663500000005],[22.613381000000146,44.61720450000007],[22.01613249900015,44.599202501000036],[22.49165550000015,44.97281400000003],[22.686246499000077,45.25796100000008],[23.59064000000015,45.35307250000011],[23.598021999999986,45.47245600000008],[24.512834500000082,45.58682500000003]]]}},{"type":"Feature","properties":{"id":236,"nuts":"RO42","name":"Vest","area":32034,"density":57.6,"edu_3":13.5,"gdp":13042,"gdp_ph":13500,"life_ex":74.8,"pop":1817895,"unempl":4.8,"coords":[21.90075506237507,45.70264150006255]},"geometry":{"type":"Polygon","coordinates":[[[22.67657550000007,46.40582550000005],[23.234863999999988,46.03050200000007],[23.598021999999986,45.47245600000008],[23.59064000000015,45.35307250000011],[22.686246499000077,45.25796100000008],[22.49165550000015,44.97281400000003],[22.01613249900015,44.599202501000036],[21.395972000000086,44.779644500000074],[21.47917849999999,45.19302750000003],[20.96033200000008,45.366757500000006],[20.569299000000086,45.91013850000007],[20.264296000000087,46.1263735],[20.775579500000077,46.27592850000008],[21.06595050000007,46.24272900000011],[21.441489999999988,46.65145100000001],[22.16584750000007,46.60438050000005],[22.67657550000007,46.40582550000005]]]}},{"type":"Feature","properties":{"id":237,"nuts":"SE11","name":"Stockholm","area":6779,"density":328.7,"edu_3":47.6,"gdp":116569,"gdp_ph":43300,"life_ex":82.8,"pop":2163042,"unempl":7.1,"coords":[18.175775750000064,59.55499893750006]},"geometry":{"type":"Polygon","coordinates":[[[17.572396002000147,58.95085250000011],[17.24831599999999,59.19925300000003],[17.51389300000008,59.62264250000004],[18.36479949800008,59.86438750000008],[18.513265499000084,60.14808899900004],[19.08419850000007,59.87595200000004],[18.765166501000067,59.68532500100008],[18.34417099999999,59.09349000000009],[17.572396002000147,58.95085250000011]]]}},{"type":"Feature","properties":{"id":238,"nuts":"SE12","name":"Östra Mellansverige","area":41204,"density":41.6,"edu_3":36.6,"gdp":55269,"gdp_ph":27000,"life_ex":81.8,"pop":1605347,"unempl":8.3,"coords":[16.184613412913105,59.20152821726093]},"geometry":{"type":"Polygon","coordinates":[[[18.513265499000084,60.14808899900004],[18.36479949800008,59.86438750000008],[17.51389300000008,59.62264250000004],[17.24831599999999,59.19925300000003],[17.572396002000147,58.95085250000011],[16.909173000000067,58.60979200000003],[16.666683500000147,57.99607650000007],[16.263859000000082,58.141315500000076],[15.942314000000067,57.80328750000007],[15.12835849999999,57.71631250000007],[14.88387850000015,58.09050350000007],[14.41671000000008,58.18724050000003],[14.778936499999986,58.645992500000034],[14.476770499999986,58.71364600000004],[14.295995000000147,59.01277950000011],[14.468946499999987,59.44084150000003],[14.437155501000149,60.02616099900007],[15.206131000000084,60.00157950000005],[15.801566998999988,60.17910349900001],[16.18351949999999,60.076378000000034],[17.192477997999987,60.30071250000009],[17.37021800000008,60.65446150000008],[18.610744500000067,60.25374100000005],[18.513265499000084,60.14808899900004]]]}},{"type":"Feature","properties":{"id":239,"nuts":"SE21","name":"Småland med öarna","area":35382,"density":24.7,"edu_3":31.2,"gdp":29141,"gdp_ph":27600,"life_ex":82.2,"pop":819426,"unempl":6.7,"coords":[14.783861911823593,57.25113414694121]},"geometry":{"type":"Polygon","coordinates":[[[16.666683500000147,57.99607650000007],[16.37843799999999,56.658735500000034],[16.04987150000008,56.3218885],[15.581520000000069,56.49580400000008],[14.904341499999987,56.361725000000035],[14.26571200000015,56.50706500000007],[13.462636500000087,56.42818850000003],[13.298661001000085,56.82360449800001],[13.600554499999987,57.06341150000003],[13.07774649999999,57.127903],[13.68805800000007,57.558208500000035],[13.71630950000008,57.98801050000003],[14.41671000000008,58.18724050000003],[14.88387850000015,58.09050350000007],[15.12835849999999,57.71631250000007],[15.942314000000067,57.80328750000007],[16.263859000000082,58.141315500000076],[16.666683500000147,57.99607650000007]]]}},{"type":"Feature","properties":{"id":240,"nuts":"SE22","name":"Sydsverige","area":14341,"density":102.2,"edu_3":38.9,"gdp":48754,"gdp_ph":26800,"life_ex":82,"pop":1426826,"unempl":10,"coords":[14.144698857214378,56.07840178571433]},"geometry":{"type":"Polygon","coordinates":[[[16.04987150000008,56.3218885],[15.721776000000148,56.16440800000004],[14.678776000000084,56.122190000000046],[14.341868500000146,55.959501500000044],[14.360843999999986,55.5542595],[13.359049500000083,55.336853000000076],[12.965700000000083,55.40218950000008],[12.900617001000086,55.751081],[12.533758500000147,56.24346700000001],[12.899313000000149,56.4490045],[13.462636500000087,56.42818850000003],[14.26571200000015,56.50706500000007],[14.904341499999987,56.361725000000035],[15.581520000000069,56.49580400000008],[16.04987150000008,56.3218885]]]}},{"type":"Feature","properties":{"id":241,"nuts":"SE23","name":"Västsverige","area":30934,"density":65.5,"edu_3":38.8,"gdp":72491,"gdp_ph":29600,"life_ex":82.1,"pop":1921924,"unempl":7.6,"coords":[13.00861474008701,58.0039835215218]},"geometry":{"type":"Polygon","coordinates":[[[14.295995000000147,59.01277950000011],[14.476770499999986,58.71364600000004],[14.778936499999986,58.645992500000034],[14.41671000000008,58.18724050000003],[13.71630950000008,57.98801050000003],[13.68805800000007,57.558208500000035],[13.07774649999999,57.127903],[13.600554499999987,57.06341150000003],[13.298661001000085,56.82360449800001],[13.462636500000087,56.42818850000003],[12.899313000000149,56.4490045],[12.93672749999999,56.58707700000011],[12.356948501000147,56.93208549900007],[12.161746999999991,57.32801950000007],[11.673720503999988,57.84875500000004],[11.28994850000015,58.43529900000004],[11.113662500000089,58.99742250000003],[11.68908200000007,58.956844500000045],[11.826091999999989,59.237869500000045],[12.69517500200007,59.17083349900008],[12.89877700000008,58.814361000000076],[13.254575499999987,58.72562000000005],[13.58999201399999,59.05944449900011],[14.295995000000147,59.01277950000011]]]}},{"type":"Feature","properties":{"id":242,"nuts":"SE31","name":"Norra Mellansverige","area":69148,"density":13,"edu_3":28.3,"gdp":28448,"gdp_ph":26500,"life_ex":81.6,"pop":829134,"unempl":8.6,"coords":[14.140146250281305,60.55406884478131]},"geometry":{"type":"Polygon","coordinates":[[[17.489299499000083,62.13695049900011],[17.37397999999999,61.74004350000007],[17.08862350300015,61.39873754400003],[17.153482000000082,60.92765800000001],[17.37021800000008,60.65446150000008],[17.192477997999987,60.30071250000009],[16.18351949999999,60.076378000000034],[15.801566998999988,60.17910349900001],[15.206131000000084,60.00157950000005],[14.437155501000149,60.02616099900007],[14.468946499999987,59.44084150000003],[14.295995000000147,59.01277950000011],[13.58999201399999,59.05944449900011],[13.254575499999987,58.72562000000005],[12.89877700000008,58.814361000000076],[12.69517500200007,59.17083349900008],[11.826091999999989,59.237869500000045],[11.69112849999999,59.58955000000009],[11.926968499999987,59.79047800000001],[11.839730500000087,59.84076700000003],[12.449626994000084,60.04031049700001],[12.606883000000067,60.51274099900007],[12.223991500000068,61.01307650000007],[12.670191999999986,61.05598050000003],[12.87084850000008,61.35649500000011],[12.137665500000082,61.723816],[12.29937100000015,62.267494],[12.80617550100007,62.21990599900005],[13.598312500000077,61.65577300000007],[14.33375249900007,61.59992200000005],[14.685894999000084,61.90166849900007],[16.018131500000067,62.25869],[17.489299499000083,62.13695049900011]]]}},{"type":"Feature","properties":{"id":243,"nuts":"SE32","name":"Mellersta Norrland","area":76709,"density":5.2,"edu_3":31.1,"gdp":13914,"gdp_ph":29000,"life_ex":80.9,"pop":368617,"unempl":7.4,"coords":[15.338893883766737,63.183182683500036]},"geometry":{"type":"Polygon","coordinates":[[[19.286468001000088,63.46971950100004],[19.114053500000068,63.248150502000044],[18.60293949999999,63.15051900000009],[18.45665449900008,62.876288500000044],[17.94906199900015,62.79963000100008],[17.84612250000015,62.49010500000003],[17.356280000000083,62.38511700000004],[17.489299499000083,62.13695049900011],[16.018131500000067,62.25869],[14.685894999000084,61.90166849900007],[14.33375249900007,61.59992200000005],[13.598312500000077,61.65577300000007],[12.80617550100007,62.21990599900005],[12.29937100000015,62.267494],[12.254665499999987,62.33102400000007],[12.05614349999999,62.611919],[12.218233000000083,63.000335500000006],[11.974581500000085,63.26922600000009],[12.14977101100007,63.59394450600007],[12.68356800000015,63.97422400000005],[13.21110999999999,64.09536750000001],[13.967526499999991,64.00797250000011],[14.113871499999988,64.46248600000007],[13.654259505000084,64.580337498],[14.325986000000086,65.11891150000008],[15.740345999999988,64.40313700000007],[16.87824450000008,63.94993200000005],[17.73156900000015,63.87993600000004],[18.405653000000086,63.99566250000004],[18.95877050000007,63.76113150000003],[19.286468001000088,63.46971950100004]]]}},{"type":"Feature","properties":{"id":244,"nuts":"SE33","name":"Övre Norrland","area":164077,"density":3.4,"edu_3":37,"gdp":20756,"gdp_ph":31500,"life_ex":81.1,"pop":510548,"unempl":7.4,"coords":[19.60676903973693,66.26617827636849]},"geometry":{"type":"Polygon","coordinates":[[[24.155144500000148,65.81602700000008],[22.71819550000015,65.81713650000009],[21.99759750000007,65.51265400000003],[21.233335499000077,64.94443349900007],[21.17822150000015,64.69591150000008],[21.52797749999999,64.41966900000003],[20.95808250100015,64.13087450100011],[20.765232000000083,63.86661400000003],[19.729482999999988,63.52291350000007],[19.286468001000088,63.46971950100004],[18.95877050000007,63.76113150000003],[18.405653000000086,63.99566250000004],[17.73156900000015,63.87993600000004],[16.87824450000008,63.94993200000005],[15.740345999999988,64.40313700000007],[14.325986000000086,65.11891150000008],[14.62547000000015,65.81181400000003],[14.516288000000088,66.13258350000001],[15.484738500000077,66.282463],[15.377222999999987,66.48430600000009],[16.404100500000084,67.20497200000003],[16.40765400000015,67.53412600000007],[16.73811900000007,67.91421450000007],[17.281521000000083,68.11882000000003],[17.89976300000015,67.96936800000009],[18.125923000000085,68.53652200000005],[18.98380250000008,68.51696000000004],[19.92137700200007,68.35601800100011],[20.22654349999999,68.490814],[20.550380507000085,69.06008150000008],[22.039846499000078,68.48089600100008],[22.80002200000007,68.39357750000005],[23.64795500100007,67.96245549900004],[23.477470500000067,67.84262100000001],[23.763651000000067,67.42978650000003],[23.554495000000088,67.16745750000007],[23.99474900000007,66.81873300000001],[23.645824500000174,66.30152150000004],[24.155144500000148,65.81602700000008]]]}},{"type":"Feature","properties":{"id":245,"nuts":"SI01","name":"Vzhodna Slovenija","area":12212.3,"density":89.2,"edu_3":24.6,"gdp":15944,"gdp_ph":17700,"life_ex":79.5,"pop":1079655,"unempl":11.1,"coords":[15.230860194105329,46.072481424000046]},"geometry":{"type":"Polygon","coordinates":[[[16.59680499999999,46.47590250100001],[16.05564100000015,46.37957],[15.79135400000007,46.259281000000044],[15.682719351000088,45.879965189000075],[15.404803500000071,45.79267100000004],[15.307857337000087,45.45745536600003],[15.226380500000147,45.427231000000006],[14.816714999999988,45.46017850000004],[14.596143000000069,45.62716300000011],[14.118177500000087,45.48104500000011],[14.049503499999986,45.83733750000005],[14.318036000000149,45.894231500000046],[14.858962999999989,45.80290450000007],[14.834665000000086,46.12816850000007],[14.565175500000066,46.372453500000006],[15.065101000000084,46.65205300000008],[15.988236000000086,46.745062000000075],[15.996218500000083,46.835406000000035],[16.113848999999988,46.86906800000003],[16.59680499999999,46.47590250100001]]]}},{"type":"Feature","properties":{"id":246,"nuts":"SI02","name":"Zahodna Slovenija","area":8060.7,"density":122,"edu_3":33.1,"gdp":20206,"gdp_ph":25100,"life_ex":81.7,"pop":981430,"unempl":8.1,"coords":[14.114008850200056,45.940921200000055]},"geometry":{"type":"Polygon","coordinates":[[[14.565175500000066,46.372453500000006],[14.834665000000086,46.12816850000007],[14.858962999999989,45.80290450000007],[14.318036000000149,45.894231500000046],[14.049503499999986,45.83733750000005],[14.118177500000087,45.48104500000011],[13.583067000000085,45.47741000000008],[13.722823500000146,45.59472550000004],[13.375492501999986,46.29823250000004],[13.714184999999986,46.522703500000034],[14.565175500000066,46.372453500000006]]]}},{"type":"Feature","properties":{"id":247,"nuts":"SK01","name":"Bratislavský kraj","area":2053,"density":299.8,"edu_3":39,"gdp":19021,"gdp_ph":46600,"life_ex":78.1,"pop":618380,"unempl":6,"coords":[17.139643361500067,48.26650959700004]},"geometry":{"type":"Polygon","coordinates":[[[17.096727365000078,48.023657703000026],[17.06662349999999,48.118739000000005],[16.909761715000087,48.496346309000046],[16.967873513000086,48.54436863400008],[17.47753698300008,48.352578513000026],[17.319337093000087,48.063367423000045],[17.096727365000078,48.023657703000026]]]}},{"type":"Feature","properties":{"id":248,"nuts":"SK02","name":"Západné Slovensko","area":14992,"density":122.6,"edu_3":16.4,"gdp":22510,"gdp_ph":18100,"life_ex":76.8,"pop":1836664,"unempl":11,"coords":[17.939368358705963,48.48258765123534]},"geometry":{"type":"Polygon","coordinates":[[[19.01432249999999,48.07773650000007],[18.928392000000088,48.05683250000004],[18.848478000000085,47.81822800000003],[17.893923000000086,47.73945700000007],[17.247427499999986,48.012009000000035],[17.319337093000087,48.063367423000045],[17.47753698300008,48.352578513000026],[16.967873513000086,48.54436863400008],[16.949778000000066,48.53579200000007],[16.94120050000015,48.617000500000074],[17.19401550200007,48.87546150000003],[17.646875499000174,48.85431950100008],[18.070480500000087,49.03786100000008],[18.322906507000084,49.31516650100008],[18.574917500000083,49.14318900000001],[18.82635099999999,48.74405900000005],[18.745446501000174,48.416563499000006],[19.01432249999999,48.07773650000007]]]}},{"type":"Feature","properties":{"id":249,"nuts":"SK03","name":"Stredné Slovensko","area":16263,"density":82.9,"edu_3":17.8,"gdp":13520,"gdp_ph":14800,"life_ex":76.2,"pop":1347233,"unempl":15.9,"coords":[19.231316135600082,48.93338995353338]},"geometry":{"type":"Polygon","coordinates":[[[19.88392950000008,49.20417700000007],[20.26745050000008,48.87407300000001],[20.463936999999987,48.46396700000008],[20.32570150000015,48.27279850000011],[19.898740500000088,48.16631700000005],[19.01432249999999,48.07773650000007],[18.745446501000174,48.416563499000006],[18.82635099999999,48.74405900000005],[18.574917500000083,49.14318900000001],[18.322906507000084,49.31516650100008],[18.40367299900015,49.39653000100003],[18.451347027000082,49.398933302000046],[18.843764500000077,49.51835500000004],[18.979868000000067,49.395217],[19.467386500000174,49.61376700000011],[19.88392950000008,49.20417700000007]]]}},{"type":"Feature","properties":{"id":250,"nuts":"SK04","name":"Východné Slovensko","area":15727,"density":102.5,"edu_3":19.7,"gdp":13924,"gdp_ph":12800,"life_ex":76.2,"pop":1613672,"unempl":16.6,"coords":[21.248368115538526,48.87876996153852]},"geometry":{"type":"Polygon","coordinates":[[[22.56684000000007,49.088377500000036],[22.15530600000008,48.40339650000004],[22.12107750000007,48.37831150000011],[21.72154750000007,48.35155600000007],[21.440056000000084,48.58523300000007],[20.850424000000146,48.58163150000007],[20.463936999999987,48.46396700000008],[20.26745050000008,48.87407300000001],[19.88392950000008,49.20417700000007],[20.476269000000087,49.414061000000004],[20.923722500000082,49.29623450000008],[21.39771250199999,49.433794000000034],[21.96051349999999,49.349197000000004],[22.56684000000007,49.088377500000036]]]}},{"type":"Feature","properties":{"id":251,"nuts":"TR10","name":"Istanbul","area":5315,"density":2695.8,"edu_3":18.9,"gdp":150753,"gdp_ph":20100,"life_ex":78.1,"pop":14160467,"unempl":11.9,"coords":[28.5196085150001,41.139722606500065]},"geometry":{"type":"Polygon","coordinates":[[[27.991082619000082,41.01867197600001],[28.182834979000148,41.56479817500008],[29.11210193400015,41.213566368000045],[28.98120510199999,41.00320644300007],[28.61843778400015,40.96012680000007],[28.231988672000085,41.07796587700011],[27.991082619000082,41.01867197600001]]]}},{"type":"Feature","properties":{"id":252,"nuts":"TR21","name":"Tekirdag","area":18740,"density":85.9,"edu_3":13,"gdp":15039,"gdp_ph":17400,"life_ex":76.8,"pop":1613616,"unempl":7.6,"coords":[27.008678002937554,41.326000809187555]},"geometry":{"type":"Polygon","coordinates":[[[28.028011550000087,41.98329925000007],[28.182834979000148,41.56479817500008],[27.991082619000082,41.01867197600001],[27.51235839500015,40.972199043000046],[27.304555341999986,40.69870020500008],[26.96935473299999,40.73510944600008],[26.533963785999987,40.59198936400003],[26.034823144000086,40.72952598900008],[26.364515499000078,41.02061099900004],[26.32620250000008,41.255321500000036],[26.62684999999999,41.34576100000007],[26.60289549999999,41.598148500000036],[26.358526500000067,41.71183000000008],[26.561544500000082,41.926273500000036],[27.29349099999999,42.097187000000076],[27.44783799999999,41.966587000000004],[28.028011550000087,41.98329925000007]]]}},{"type":"Feature","properties":{"id":253,"nuts":"TR22","name":"Balikesir","area":24423,"density":68.5,"edu_3":16.4,"gdp":11893,"gdp_ph":13000,"life_ex":76.9,"pop":1665089,"unempl":5.6,"coords":[27.50054261356258,39.73211862031255]},"geometry":{"type":"Polygon","coordinates":[[[28.164812385000147,40.395157659000006],[28.067550520999987,40.253134015],[28.265037377999988,39.87023404000007],[28.96857403800007,39.60067758400007],[28.652546455000078,39.14736831000005],[28.158970156000066,39.056984021000005],[27.78204501600007,39.31440474000004],[27.38131599900015,39.35274641900003],[27.162295730000068,39.38816217700003],[26.761237365000085,39.17051780300011],[26.877076959000078,39.583089228000006],[26.130919702000085,39.45215163600011],[26.172561075000147,39.988131578000036],[26.752642653000066,40.40257179800011],[27.20481401400008,40.43389597100003],[27.506282371000083,40.304670946000044],[28.164812385000147,40.395157659000006]]]}},{"type":"Feature","properties":{"id":254,"nuts":"TR31","name":"Izmir","area":12016,"density":335.8,"edu_3":19.1,"gdp":36633,"gdp_ph":16600,"life_ex":77.4,"pop":4061074,"unempl":13.8,"coords":[27.26889171828582,38.62757985928577]},"geometry":{"type":"Polygon","coordinates":[[[28.442609444000084,38.10466169],[28.221171960000078,38.01270114600004],[27.265843590000088,37.874719133000085],[26.75596061200008,38.22035832800003],[26.37327023500015,38.30779616100003],[26.475842446000087,38.673388239000076],[26.97134066600009,38.846485735000044],[26.761237365000085,39.17051780300011],[27.162295730000068,39.38816217700003],[27.38131599900015,39.35274641900003],[27.486066042000147,39.00157444900003],[27.144471068000087,38.88617815800001],[27.260101289000147,38.54846733900007],[28.06295761000007,38.398361253000076],[28.442609444000084,38.10466169]]]}},{"type":"Feature","properties":{"id":255,"nuts":"TR32","name":"Aydin","area":32658,"density":87.4,"edu_3":13.8,"gdp":19352,"gdp_ph":12500,"life_ex":77.7,"pop":2851086,"unempl":7.2,"coords":[28.744098444700093,37.35217712905006]},"geometry":{"type":"Polygon","coordinates":[[[29.852118969000088,37.752285294000075],[29.50038109100015,37.618872075000084],[29.60653050100015,37.395360890000035],[29.34144698099999,37.00684918900008],[29.75188377699999,36.900562944000086],[29.637206825000078,36.66968612600007],[29.255847856000088,36.299028471000085],[29.096608930000087,36.676116019000034],[28.61431912900008,36.80556356700008],[28.09482339200008,36.644921831999994],[27.89005189800008,37.029019866000084],[27.51158176700008,36.984514250000075],[27.52152608200015,37.251138169000086],[27.169981041000085,37.54459453000008],[27.265843590000088,37.874719133000085],[28.221171960000078,38.01270114600004],[28.442609444000084,38.10466169],[28.847341365000148,38.24042843500007],[29.60677195800008,38.272343414000034],[29.653922338000086,37.96017554100008],[29.852118969000088,37.752285294000075]]]}},{"type":"Feature","properties":{"id":256,"nuts":"TR33","name":"Manisa","area":45324,"density":66.5,"edu_3":11.1,"gdp":19930,"gdp_ph":12000,"life_ex":76.4,"pop":2985153,"unempl":3.9,"coords":[29.40672421674083,38.84291729162969]},"geometry":{"type":"Polygon","coordinates":[[[31.61973273400008,39.103055264000034],[31.621330799000077,38.61994732500003],[31.233349355000087,38.40997277000008],[30.986740883000067,38.46641459300008],[30.426787948000083,38.15389437900001],[30.03997925799999,37.752413820000086],[29.852118969000088,37.752285294000075],[29.653922338000086,37.96017554100008],[29.60677195800008,38.272343414000034],[28.847341365000148,38.24042843500007],[28.442609444000084,38.10466169],[28.06295761000007,38.398361253000076],[27.260101289000147,38.54846733900007],[27.144471068000087,38.88617815800001],[27.486066042000147,39.00157444900003],[27.38131599900015,39.35274641900003],[27.78204501600007,39.31440474000004],[28.158970156000066,39.056984021000005],[28.652546455000078,39.14736831000005],[28.96857403800007,39.60067758400007],[29.194093630000083,39.60057380300003],[29.550553449000148,39.86343782600011],[29.760534957000147,39.71012349700004],[30.193454202999988,39.65880434500008],[30.315111027000086,39.36209489500004],[30.55989779500007,39.146048414000006],[31.18017606699999,39.27532929600011],[31.61973273400008,39.103055264000034]]]}},{"type":"Feature","properties":{"id":257,"nuts":"TR41","name":"Bursa","area":29095,"density":130.1,"edu_3":15.6,"gdp":35478,"gdp_ph":17500,"life_ex":76.6,"pop":3749582,"unempl":6.2,"coords":[30.235142160043548,39.795299989434824]},"geometry":{"type":"Polygon","coordinates":[[[30.82532996100008,40.125784284000076],[30.91427091099999,40.02882726200005],[31.676844092000067,40.035240552000005],[31.95638749599999,39.57719399400003],[32.00712119500008,39.39720219300003],[31.970837507000084,39.21875062500004],[31.81531726200015,39.128693455000075],[31.61973273400008,39.103055264000034],[31.18017606699999,39.27532929600011],[30.55989779500007,39.146048414000006],[30.315111027000086,39.36209489500004],[30.193454202999988,39.65880434500008],[29.760534957000147,39.71012349700004],[29.550553449000148,39.86343782600011],[29.194093630000083,39.60057380300003],[28.96857403800007,39.60067758400007],[28.265037377999988,39.87023404000007],[28.067550520999987,40.253134015],[28.164812385000147,40.395157659000006],[28.991035995000146,40.466000042000076],[29.067572476000066,40.54533127800005],[29.924951921000087,40.55162674100001],[30.41907268099999,40.37857869300001],[30.82532996100008,40.125784284000076]]]}},{"type":"Feature","properties":{"id":258,"nuts":"TR42","name":"Kocaeli","area":20272,"density":169.1,"edu_3":14.8,"gdp":34871,"gdp_ph":19000,"life_ex":77.1,"pop":3448702,"unempl":9.9,"coords":[30.961916674000083,40.65644878005004]},"geometry":{"type":"Polygon","coordinates":[[[31.29459026800015,41.11690967300001],[31.416803697000148,41.027012745000036],[32.273812201000084,41.025827827],[32.56004305600007,40.807477680000034],[32.55481611100015,40.69194409800011],[32.37547525500008,40.66350097000003],[32.406808380000086,40.589354626000045],[31.96192331000009,40.352835165000045],[31.437988144000087,40.344994670000005],[31.12854773400008,40.36528013900005],[30.88069573700008,40.16624288400004],[30.82532996100008,40.125784284000076],[30.41907268099999,40.37857869300001],[29.924951921000087,40.55162674100001],[29.067572476000066,40.54533127800005],[28.991035995000146,40.466000042000076],[29.280288684999988,40.659709398000075],[29.407456849000084,40.95458991500004],[30.270745614000077,41.209291898000004],[30.76037540499999,41.08668287500001],[31.29459026800015,41.11690967300001]]]}},{"type":"Feature","properties":{"id":259,"nuts":"TR51","name":"Ankara","area":25402,"density":204.1,"edu_3":26.8,"gdp":47915,"gdp_ph":17700,"life_ex":78.5,"pop":5045083,"unempl":11.5,"coords":[32.60889656935719,39.725422803214315]},"geometry":{"type":"Polygon","coordinates":[[[33.60872037799999,40.249371791000044],[33.60639266999999,40.06063326900005],[33.338114748000066,39.860150660000045],[33.31358523300008,39.75433806000001],[33.40700396000008,39.486819142],[33.708544819999986,39.10818107700004],[33.74851706199999,38.90762569600008],[33.67208768699999,38.66804533000004],[33.41296952100009,38.853888775],[33.43506487400009,39.048540848000044],[33.075789348000086,39.198019767000005],[32.63368561799999,39.02131731900005],[32.07002431900008,38.97639377300004],[31.99310972699999,38.979764907],[31.970837507000084,39.21875062500004],[32.00712119500008,39.39720219300003],[31.95638749599999,39.57719399400003],[31.676844092000067,40.035240552000005],[30.91427091099999,40.02882726200005],[30.88069573700008,40.16624288400004],[31.12854773400008,40.36528013900005],[31.437988144000087,40.344994670000005],[31.96192331000009,40.352835165000045],[32.406808380000086,40.589354626000045],[32.37547525500008,40.66350097000003],[32.65831458800008,40.68910181900003],[33.220758867000086,40.320784586],[33.42952076100008,40.389438591000044],[33.60872037799999,40.249371791000044]]]}},{"type":"Feature","properties":{"id":260,"nuts":"TR52","name":"Konya","area":49682,"density":48.3,"edu_3":12.5,"gdp":13012,"gdp_ph":10300,"life_ex":76.8,"pop":2317164,"unempl":5.5,"coords":[32.63809853266674,38.00338899822227]},"geometry":{"type":"Polygon","coordinates":[[[33.075789348000086,39.198019767000005],[33.319042505000084,39.07338615000003],[33.08052753000007,38.807547279000005],[33.361979719000146,38.562341771000035],[33.20326409600008,38.271769511],[33.40670559700007,37.958988629000075],[34.03357355600008,38.00481075900001],[34.40042656700007,37.751674757000075],[34.428914284000086,37.316384991000035],[33.803704740000086,36.98732606400009],[33.65906606300007,37.01529627400008],[32.95458948999999,36.76803421000008],[33.023218775000146,36.458324758000074],[32.57322698499999,36.357624199000085],[32.457231347000146,36.73847101900007],[31.740267514000067,37.355826037000085],[31.300975029000085,37.404259052000086],[31.44845900000007,37.72910565900008],[31.419393132000067,37.973507963000074],[31.55175529100015,38.11965929000007],[31.233349355000087,38.40997277000008],[31.621330799000077,38.61994732500003],[31.61973273400008,39.103055264000034],[31.81531726200015,39.128693455000075],[31.99310972699999,38.979764907],[32.07002431900008,38.97639377300004],[32.63368561799999,39.02131731900005],[33.075789348000086,39.198019767000005]]]}},{"type":"Feature","properties":{"id":261,"nuts":"TR61","name":"Antalya","area":36797,"density":78.1,"edu_3":16.4,"gdp":22073,"gdp_ph":14600,"life_ex":78.4,"pop":2833306,"unempl":8.4,"coords":[30.79389115459267,37.10595396125933]},"geometry":{"type":"Polygon","coordinates":[[[31.419393132000067,37.973507963000074],[31.44845900000007,37.72910565900008],[31.300975029000085,37.404259052000086],[31.740267514000067,37.355826037000085],[32.457231347000146,36.73847101900007],[32.57322698499999,36.357624199000085],[32.57551394500007,36.092394412999994],[32.29802806900008,36.235383567000085],[32.02358369800007,36.54058085000008],[31.008706985000174,36.857990238000085],[30.575862742999988,36.797169884000084],[30.592348273000084,36.59164870400008],[30.40604923400008,36.211026425000085],[30.14926143800008,36.29967904300008],[29.682125047000085,36.131090060000034],[29.255847856000088,36.299028471000085],[29.637206825000078,36.66968612600007],[29.75188377699999,36.900562944000086],[29.34144698099999,37.00684918900008],[29.60653050100015,37.395360890000035],[29.50038109100015,37.618872075000084],[29.852118969000088,37.752285294000075],[30.03997925799999,37.752413820000086],[30.426787948000083,38.15389437900001],[30.986740883000067,38.46641459300008],[31.233349355000087,38.40997277000008],[31.55175529100015,38.11965929000007],[31.419393132000067,37.973507963000074]]]}},{"type":"Feature","properties":{"id":262,"nuts":"TR62","name":"Adana","area":29558,"density":130.3,"edu_3":14.2,"gdp":21968,"gdp_ph":10500,"life_ex":77,"pop":3855034,"unempl":10.7,"coords":[34.81213503772733,37.245598814363696]},"geometry":{"type":"Polygon","coordinates":[[[35.96173296699999,36.904804383000084],[35.54311565100008,36.575818217000034],[34.652591129000086,36.806999497000035],[33.697964141000085,36.172646584000034],[32.57551394500007,36.092394412999994],[32.57322698499999,36.357624199000085],[33.023218775000146,36.458324758000074],[32.95458948999999,36.76803421000008],[33.65906606300007,37.01529627400008],[33.803704740000086,36.98732606400009],[34.428914284000086,37.316384991000035],[34.81436661999999,37.42950489600008],[34.88540441400008,37.670543124000034],[35.21870810499999,37.759224300000085],[35.57476397100007,37.73715869400009],[35.61442139600007,37.96211086000004],[35.92593286900015,38.08428189400007],[36.22240324900008,38.380931102000034],[36.44049595499999,38.219432623000046],[36.30386479900008,37.734576493000034],[36.099542356000086,37.70970751700008],[35.89342892600007,37.260048823000034],[35.96173296699999,36.904804383000084]]]}},{"type":"Feature","properties":{"id":263,"nuts":"TR63","name":"Hatay","area":23484,"density":131.3,"edu_3":9.4,"gdp":14374,"gdp_ph":8500,"life_ex":77.5,"pop":3077753,"unempl":15.3,"coords":[36.66760331090482,37.26256431819053]},"geometry":{"type":"Polygon","coordinates":[[[37.63866770700008,37.93116696100007],[37.43240076900008,37.641708926000035],[37.62321665200008,37.51165254200008],[37.08259356299999,37.175608698999994],[36.901795974000066,37.333660452000075],[36.52120271000007,37.085240178000035],[36.669727908000084,36.82930959100008],[36.57265382400007,36.65647626200008],[36.62203780799999,36.214932065000085],[36.38218509999999,36.21698582200008],[36.10607963300015,35.867194569999995],[35.77679228700015,36.32344287500008],[36.19057963099999,36.595941689000085],[35.96173296699999,36.904804383000084],[35.89342892600007,37.260048823000034],[36.099542356000086,37.70970751700008],[36.30386479900008,37.734576493000034],[36.44049595499999,38.219432623000046],[36.69959341300009,38.50365656400007],[37.34148708699999,38.59351567500005],[37.759590460000084,38.20478797200008],[37.63866770700008,37.93116696100007]]]}},{"type":"Feature","properties":{"id":264,"nuts":"TR71","name":"Kirikkale","area":31823,"density":48.3,"edu_3":12,"gdp":8577,"gdp_ph":10300,"life_ex":76.5,"pop":1510080,"unempl":7.6,"coords":[34.14094839573084,38.8396874684616]},"geometry":{"type":"Polygon","coordinates":[[[34.17550692900008,39.94043409400007],[34.48273437500015,39.50843547800008],[35.032442183000086,39.08166484700007],[34.96803346700008,38.78884678200001],[35.08385811100007,38.570535617000075],[34.88845755899999,38.42025017100008],[35.26566852700009,38.10602009400003],[35.21870810499999,37.759224300000085],[34.88540441400008,37.670543124000034],[34.81436661999999,37.42950489600008],[34.428914284000086,37.316384991000035],[34.40042656700007,37.751674757000075],[34.03357355600008,38.00481075900001],[33.40670559700007,37.958988629000075],[33.20326409600008,38.271769511],[33.361979719000146,38.562341771000035],[33.67208768699999,38.66804533000004],[33.74851706199999,38.90762569600008],[33.708544819999986,39.10818107700004],[33.40700396000008,39.486819142],[33.31358523300008,39.75433806000001],[33.338114748000066,39.860150660000045],[33.60639266999999,40.06063326900005],[33.60872037799999,40.249371791000044],[33.69542215800007,40.33224155700003],[33.91622546400015,40.26303777700011],[34.17550692900008,39.94043409400007]]]}},{"type":"Feature","properties":{"id":265,"nuts":"TR72","name":"Kayseri","area":59751,"density":39.5,"edu_3":13.5,"gdp":12693,"gdp_ph":9700,"life_ex":76.9,"pop":2363390,"unempl":9.5,"coords":[36.34818374616673,39.20332987916672]},"geometry":{"type":"Polygon","coordinates":[[[38.78354988400008,40.08327138200008],[38.32665414600007,39.657999609],[38.349974914000086,39.14994371600011],[37.51233928299999,39.031703038000046],[37.57595716300008,38.78255477500011],[37.34148708699999,38.59351567500005],[36.69959341300009,38.50365656400007],[36.44049595499999,38.219432623000046],[36.22240324900008,38.380931102000034],[35.92593286900015,38.08428189400007],[35.61442139600007,37.96211086000004],[35.57476397100007,37.73715869400009],[35.21870810499999,37.759224300000085],[35.26566852700009,38.10602009400003],[34.88845755899999,38.42025017100008],[35.08385811100007,38.570535617000075],[34.96803346700008,38.78884678200001],[35.032442183000086,39.08166484700007],[34.48273437500015,39.50843547800008],[34.17550692900008,39.94043409400007],[35.13592382900015,40.036527637000006],[35.44258782099999,40.23402243000007],[35.85412180000009,40.11780099400005],[36.00342306400009,39.95451072100008],[36.52290953299999,39.96418363800001],[36.805927513000086,40.228437079],[37.45046614500015,40.170535259000076],[37.58406400100009,40.424387002],[37.95004231900015,40.39420764500011],[38.21306377400015,40.21331265500004],[38.78354988400008,40.08327138200008]]]}},{"type":"Feature","properties":{"id":266,"nuts":"TR81","name":"Zonguldak","area":9499,"density":107.5,"edu_3":10,"gdp":7094,"gdp_ph":12400,"life_ex":77,"pop":1020957,"unempl":6,"coords":[32.188722488875094,41.21252783387504]},"geometry":{"type":"Polygon","coordinates":[[[32.56004305600007,40.807477680000034],[32.273812201000084,41.025827827],[31.416803697000148,41.027012745000036],[31.29459026800015,41.11690967300001],[31.400773646000147,41.316132855000035],[32.73632526600008,41.84881112900007],[33.030530817000084,41.56938616100007],[32.79690095999999,40.98866460100007],[32.56004305600007,40.807477680000034]]]}},{"type":"Feature","properties":{"id":267,"nuts":"TR82","name":"Kastamonu","area":26466,"density":28.5,"edu_3":10.5,"gdp":3956,"gdp_ph":9500,"life_ex":76.9,"pop":763570,"unempl":6.5,"coords":[33.93399278395463,41.17072238259096]},"geometry":{"type":"Polygon","coordinates":[[[35.51348257400008,41.63571580000007],[35.36408592199999,41.270556604000035],[35.10201660600015,41.400094362000004],[34.85675183900008,41.21563044800007],[34.30101482300009,41.28488717300007],[33.99637729099999,40.857128004],[34.097647048000084,40.47327102400004],[33.91622546400015,40.26303777700011],[33.69542215800007,40.33224155700003],[33.42952076100008,40.389438591000044],[33.220758867000086,40.320784586],[32.65831458800008,40.68910181900003],[32.55481611100015,40.69194409800011],[32.56004305600007,40.807477680000034],[32.79690095999999,40.98866460100007],[33.030530817000084,41.56938616100007],[32.73632526600008,41.84881112900007],[33.33521890600008,42.01705092000003],[34.307176279000174,41.94064679300004],[34.78050148300008,41.95066841300007],[35.01602101000009,42.093033563000006],[35.278689418000084,41.71632131400003],[35.51348257400008,41.63571580000007]]]}},{"type":"Feature","properties":{"id":268,"nuts":"TR83","name":"Samsun","area":37937,"density":72.4,"edu_3":12.4,"gdp":14931,"gdp_ph":9800,"life_ex":76.9,"pop":2714575,"unempl":6.2,"coords":[35.81102782162507,40.72323751375005]},"geometry":{"type":"Polygon","coordinates":[[[37.15178117299999,41.14756018600008],[36.88009629700008,40.960860585000034],[36.87834892900008,40.74424855500007],[37.20366376000007,40.70405725100011],[37.58406400100009,40.424387002],[37.45046614500015,40.170535259000076],[36.805927513000086,40.228437079],[36.52290953299999,39.96418363800001],[36.00342306400009,39.95451072100008],[35.85412180000009,40.11780099400005],[35.44258782099999,40.23402243000007],[35.13592382900015,40.036527637000006],[34.17550692900008,39.94043409400007],[33.91622546400015,40.26303777700011],[34.097647048000084,40.47327102400004],[33.99637729099999,40.857128004],[34.30101482300009,41.28488717300007],[34.85675183900008,41.21563044800007],[35.10201660600015,41.400094362000004],[35.36408592199999,41.270556604000035],[35.51348257400008,41.63571580000007],[35.96882521400008,41.73652713800004],[36.39094127499999,41.252587038],[36.868478869000086,41.34069953100004],[37.15178117299999,41.14756018600008]]]}},{"type":"Feature","properties":{"id":269,"nuts":"TR90","name":"Trabzon","area":35174,"density":72.5,"edu_3":12.4,"gdp":13533,"gdp_ph":9600,"life_ex":78.6,"pop":2553647,"unempl":6.2,"coords":[39.62292613136009,40.78267819760006]},"geometry":{"type":"Polygon","coordinates":[[[42.51554671400007,41.437780677000035],[42.59609605899999,41.271092604000046],[42.285249384999986,40.916438099000004],[41.94587352299999,40.95045505400003],[41.74443151300008,40.65836753600007],[41.19306638399999,40.805859924],[40.60606139000015,40.53599996400004],[39.93122033600008,40.50413951300004],[39.845526648000174,40.226643932],[39.43621840700007,39.87855802200005],[38.78354988400008,40.08327138200008],[38.21306377400015,40.21331265500004],[37.95004231900015,40.39420764500011],[37.58406400100009,40.424387002],[37.20366376000007,40.70405725100011],[36.87834892900008,40.74424855500007],[36.88009629700008,40.960860585000034],[37.15178117299999,41.14756018600008],[37.539303821000146,41.02146498500008],[38.36025537100008,40.91108639000004],[39.42082499300008,41.10785384500008],[39.64989617900008,40.99580658600007],[40.25123062899999,40.93743440900005],[41.06248529600015,41.21708586300008],[41.545256499000146,41.51898227600003],[42.51554671400007,41.437780677000035]]]}},{"type":"Feature","properties":{"id":270,"nuts":"TRA1","name":"Erzurum","area":40798,"density":26.2,"edu_3":10.1,"gdp":5111,"gdp_ph":8500,"life_ex":76,"pop":1062345,"unempl":7.3,"coords":[40.64993040173919,39.91140717613048]},"geometry":{"type":"Polygon","coordinates":[[[42.40679478199999,39.46710371900011],[42.12584156099999,39.21914497100005],[41.65162890400015,39.15016245500004],[41.206830153000084,39.35369879800007],[40.70998591600008,39.418071385000076],[40.345303159999986,39.58817031900003],[39.07271421400009,39.437300339000046],[38.76276381200009,39.15627672100004],[38.71144368800009,39.00641499300008],[38.349974914000086,39.14994371600011],[38.32665414600007,39.657999609],[38.78354988400008,40.08327138200008],[39.43621840700007,39.87855802200005],[39.845526648000174,40.226643932],[39.93122033600008,40.50413951300004],[40.60606139000015,40.53599996400004],[41.19306638399999,40.805859924],[41.74443151300008,40.65836753600007],[41.94587352299999,40.95045505400003],[42.285249384999986,40.916438099000004],[42.58338396900007,40.711912111000004],[42.37339840000007,40.15416142900003],[42.55048415100015,39.932271060000005],[42.40679478199999,39.46710371900011]]]}},{"type":"Feature","properties":{"id":271,"nuts":"TRA2","name":"Agri","area":30193,"density":38.3,"edu_3":7.7,"gdp":3708,"gdp_ph":5800,"life_ex":73.7,"pop":1145257,"unempl":3.3,"coords":[43.19399407425007,40.20918570940004]},"geometry":{"type":"Polygon","coordinates":[[[44.04010215100007,39.359133489000044],[43.76474106000015,39.24438968300001],[43.46857560500007,39.379385771000045],[42.75008014800008,38.92519095200004],[42.67190919000015,39.21350859600011],[42.40679478199999,39.46710371900011],[42.55048415100015,39.932271060000005],[42.37339840000007,40.15416142900003],[42.58338396900007,40.711912111000004],[42.285249384999986,40.916438099000004],[42.59609605899999,41.271092604000046],[42.51554671400007,41.437780677000035],[42.82680433799999,41.587015835000045],[43.229721442000084,41.173876269000004],[43.675095320999986,40.934028436000006],[43.74826709499999,40.73194506300007],[43.59095634400015,40.34555908200008],[43.89957355600015,40.02111306300003],[44.48137181600015,39.966278189000036],[44.421729959000146,39.41153006100001],[44.04010215100007,39.359133489000044]]]}},{"type":"Feature","properties":{"id":272,"nuts":"TRB1","name":"Malatya","area":37323,"density":46.7,"edu_3":15.4,"gdp":7743,"gdp_ph":8400,"life_ex":77.5,"pop":1681719,"unempl":7.5,"coords":[39.165265497700055,38.749387719100056]},"geometry":{"type":"Polygon","coordinates":[[[41.206830153000084,39.35369879800007],[41.31959149000008,39.08133198400003],[41.17656406699999,38.71672581700011],[40.98091372500008,38.606696403],[40.46046570700008,38.56990323500003],[39.12274681000008,38.18331295700003],[38.819567667000086,38.01197589600008],[38.348974602000084,38.210030637000045],[38.089428328999986,37.954172760999995],[37.63866770700008,37.93116696100007],[37.759590460000084,38.20478797200008],[37.34148708699999,38.59351567500005],[37.57595716300008,38.78255477500011],[37.51233928299999,39.031703038000046],[38.349974914000086,39.14994371600011],[38.71144368800009,39.00641499300008],[38.76276381200009,39.15627672100004],[39.07271421400009,39.437300339000046],[40.345303159999986,39.58817031900003],[40.70998591600008,39.418071385000076],[41.206830153000084,39.35369879800007]]]}},{"type":"Feature","properties":{"id":273,"nuts":"TRB2","name":"Van","area":41755,"density":50.2,"edu_3":7,"gdp":5785,"gdp_ph":5100,"life_ex":73.9,"pop":2092863,"unempl":13.4,"coords":[43.027116827333415,38.429684476727346]},"geometry":{"type":"Polygon","coordinates":[[[44.04010215100007,39.359133489000044],[44.31454421800015,38.80833931500007],[44.31682598200007,38.37349727600008],[44.49587733600015,38.30552082400004],[44.24062252400009,37.96499103900008],[44.62730496200007,37.70134066700008],[44.58050921100008,37.447299922000084],[44.81291868800008,37.27134011300008],[44.25131250400008,36.982573300000084],[44.26765918199999,37.245365762999995],[43.40651302400008,37.29242869100008],[43.35844592999999,37.557485881999995],[42.89666389700008,37.917308819000084],[42.67230496100015,37.862262703000084],[42.21403210599999,38.185592317000044],[41.70229482900007,38.24654280700008],[41.64442297100007,38.50161174300007],[41.380549914000085,38.49225372400008],[41.17656406699999,38.71672581700011],[41.31959149000008,39.08133198400003],[41.206830153000084,39.35369879800007],[41.65162890400015,39.15016245500004],[42.12584156099999,39.21914497100005],[42.40679478199999,39.46710371900011],[42.67190919000015,39.21350859600011],[42.75008014800008,38.92519095200004],[43.46857560500007,39.379385771000045],[43.76474106000015,39.24438968300001],[44.04010215100007,39.359133489000044]],[[43.08029361000007,38.85764260900004],[42.44082632000007,38.72985462400004],[42.358837055000066,38.53808399200011],[42.93191323500008,38.32883601900011],[43.31752373200007,38.45963934800011],[43.08029361000007,38.85764260900004]]]}},{"type":"Feature","properties":{"id":274,"nuts":"TRC1","name":"Gaziantep","area":15879,"density":166.5,"edu_3":11.1,"gdp":9790,"gdp_ph":7200,"life_ex":76.8,"pop":2570208,"unempl":8.1,"coords":[37.84918940626324,37.47528087847374]},"geometry":{"type":"Polygon","coordinates":[[[39.12274681000008,38.18331295700003],[39.22576921300015,38.201662415000044],[38.89283682300007,37.73078522800007],[38.32448790800015,37.479542193000086],[38.008049817000085,37.45474081800003],[37.835557596000086,37.16588840700008],[38.04312247200008,36.86262610700008],[37.471863106000086,36.63190926300008],[37.08258909300008,36.635342660000035],[36.669727908000084,36.82930959100008],[36.52120271000007,37.085240178000035],[36.901795974000066,37.333660452000075],[37.08259356299999,37.175608698999994],[37.62321665200008,37.51165254200008],[37.43240076900008,37.641708926000035],[37.63866770700008,37.93116696100007],[38.089428328999986,37.954172760999995],[38.348974602000084,38.210030637000045],[38.819567667000086,38.01197589600008],[39.12274681000008,38.18331295700003]]]}},{"type":"Feature","properties":{"id":275,"nuts":"TRC2","name":"Sanliurfa","area":34540,"density":100,"edu_3":7.6,"gdp":11222,"gdp_ph":6200,"life_ex":75.9,"pop":3409417,"unempl":17.5,"coords":[39.554506258095316,37.607450028666726]},"geometry":{"type":"Polygon","coordinates":[[[41.380549914000085,38.49225372400008],[41.25448019999999,38.13951929400008],[40.94976856900007,37.663854900000075],[40.30965272399999,37.517216669000035],[39.85554962800015,37.531011913000086],[40.22387165500007,36.90492627800003],[39.82269706599999,36.756476793999994],[39.21222957800015,36.668740271000075],[38.73606661299999,36.70880575000008],[38.24074798800007,36.923850371000086],[38.04312247200008,36.86262610700008],[37.835557596000086,37.16588840700008],[38.008049817000085,37.45474081800003],[38.32448790800015,37.479542193000086],[38.48287980800015,37.44563522700008],[38.99846036200009,37.763061058999995],[39.22576921300015,38.201662415000044],[39.12274681000008,38.18331295700003],[40.46046570700008,38.56990323500003],[40.98091372500008,38.606696403],[41.17656406699999,38.71672581700011],[41.380549914000085,38.49225372400008]]]}},{"type":"Feature","properties":{"id":276,"nuts":"TRC3","name":"Mardin","area":26090,"density":80.5,"edu_3":7,"gdp":7667,"gdp_ph":6800,"life_ex":77.6,"pop":2116727,"unempl":24,"coords":[41.76096920955561,37.652277928611184]},"geometry":{"type":"Polygon","coordinates":[[[43.40651302400008,37.29242869100008],[42.79118419599999,37.38079129700009],[42.57900039600008,37.156947132000084],[42.03328865700007,37.181400167000035],[41.51630410300007,37.07782376300008],[40.90911801200008,37.132024615999995],[40.22387165500007,36.90492627800003],[39.85554962800015,37.531011913000086],[40.30965272399999,37.517216669000035],[40.94976856900007,37.663854900000075],[41.25448019999999,38.13951929400008],[41.380549914000085,38.49225372400008],[41.64442297100007,38.50161174300007],[41.70229482900007,38.24654280700008],[42.21403210599999,38.185592317000044],[42.67230496100015,37.862262703000084],[42.89666389700008,37.917308819000084],[43.35844592999999,37.557485881999995],[43.40651302400008,37.29242869100008]]]}},{"type":"Feature","properties":{"id":277,"nuts":"UKC1","name":"Tees Valley and Durham","area":3046.8,"density":390.1,"edu_3":30.7,"gdp":22275,"gdp_ph":17900,"life_ex":79.8,"pop":1182935,"unempl":9.7,"coords":[-1.6308970833332808,54.6732451666667]},"geometry":{"type":"Polygon","coordinates":[[[-1.3473724999999206,54.86069100000003],[-0.7909064999999202,54.5594825],[-1.3439429999999675,54.464233500000034],[-2.170166499999965,54.458256000000006],[-2.31204299999996,54.79108050000008],[-1.8209509999999511,54.90572750000007],[-1.3473724999999206,54.86069100000003]]]}},{"type":"Feature","properties":{"id":278,"nuts":"UKC2","name":"Northumberland and Tyne and Wear","area":5629.5,"density":256.5,"edu_3":31.9,"gdp":31329,"gdp_ph":20800,"life_ex":80.2,"pop":1429984,"unempl":8.3,"coords":[-2.082330999999936,55.17913675000004]},"geometry":{"type":"Polygon","coordinates":[[[-1.3473724999999206,54.86069100000003],[-1.8209509999999511,54.90572750000007],[-2.31204299999996,54.79108050000008],[-2.5678089999999543,54.823642500000005],[-2.689750999999916,55.18906400000003],[-2.194164499999914,55.44534300000004],[-2.034328999999957,55.811165000000074],[-1.6922279999999148,55.6063805],[-1.3473724999999206,54.86069100000003]]]}},{"type":"Feature","properties":{"id":279,"nuts":"UKD1","name":"Cumbria","area":7182.5,"density":73.7,"edu_3":33.3,"gdp":11054,"gdp_ph":20900,"life_ex":81,"pop":498095,"unempl":5,"coords":[-2.8319914545454155,54.66656386363639]},"geometry":{"type":"Polygon","coordinates":[[[-2.31204299999996,54.79108050000008],[-2.170166499999965,54.458256000000006],[-2.460827499999965,54.2267645],[-2.86946999999995,54.17673850000003],[-3.241855499999957,54.11237350000005],[-3.6389469999999733,54.51734550000003],[-3.285157999999967,54.94161600000007],[-3.0573704999999904,54.9868965],[-2.858507999999972,55.10842500000007],[-2.689750999999916,55.18906400000003],[-2.5678089999999543,54.823642500000005],[-2.31204299999996,54.79108050000008]]]}},{"type":"Feature","properties":{"id":280,"nuts":"UKD3","name":"Greater Manchester","area":1276,"density":2117.1,"edu_3":37.6,"gdp":64361,"gdp_ph":22600,"life_ex":79.7,"pop":2723479,"unempl":8,"coords":[-2.278823600199934,53.51153870040004]},"geometry":{"type":"Polygon","coordinates":[[[-1.9095829999999125,53.53842150000003],[-2.031023499999918,53.37028900000007],[-2.5767189999999687,53.446087000000034],[-2.730499499999951,53.52063000000004],[-2.1462930009999184,53.682266002000006],[-1.9095829999999125,53.53842150000003]]]}},{"type":"Feature","properties":{"id":281,"nuts":"UKD4","name":"Lancashire","area":3263.2,"density":476.5,"edu_3":31.7,"gdp":30425,"gdp_ph":19600,"life_ex":79.8,"pop":1469603,"unempl":6.5,"coords":[-2.5348970001666182,53.859017667000025]},"geometry":{"type":"Polygon","coordinates":[[[-2.460827499999965,54.2267645],[-2.0460889999999665,53.85017800000003],[-2.1462930009999184,53.682266002000006],[-2.730499499999951,53.52063000000004],[-2.9562029999999595,53.69752900000003],[-2.86946999999995,54.17673850000003],[-2.460827499999965,54.2267645]]]}},{"type":"Feature","properties":{"id":282,"nuts":"UKD6","name":"Cheshire","area":2289.9,"density":400.2,"edu_3":46,"gdp":28332,"gdp_ph":29600,"life_ex":81.5,"pop":910766,"unempl":3.3,"coords":[-2.518426785714236,53.22548900000006]},"geometry":{"type":"Polygon","coordinates":[[[-2.031023499999918,53.37028900000007],[-1.987375999999955,53.21360800000011],[-2.529494499999913,52.947185500000046],[-2.7268234999999663,52.98329550000011],[-3.0841929999999707,53.256122500000004],[-2.693357999999961,53.36183550000004],[-2.5767189999999687,53.446087000000034],[-2.031023499999918,53.37028900000007]]]}},{"type":"Feature","properties":{"id":283,"nuts":"UKD7","name":"Merseyside","area":907.9,"density":2086.3,"edu_3":31.9,"gdp":32223,"gdp_ph":20200,"life_ex":79.4,"pop":1513306,"unempl":7.4,"coords":[-2.73919487499996,53.506520375000036]},"geometry":{"type":"Polygon","coordinates":[[[-2.730499499999951,53.52063000000004],[-2.5767189999999687,53.446087000000034],[-2.693357999999961,53.36183550000004],[-2.9562029999999595,53.69752900000003],[-2.730499499999951,53.52063000000004]]]}},{"type":"Feature","properties":{"id":284,"nuts":"UKE1","name":"East Yorkshire and Northern Lincolnshire","area":3657.5,"density":261.7,"edu_3":29.7,"gdp":19560,"gdp_ph":20100,"life_ex":80.4,"pop":924236,"unempl":8,"coords":[-0.6011243579999562,53.699437267285745]},"geometry":{"type":"Polygon","coordinates":[[[-0.21244949999999108,54.15762700000005],[0.017377999000046884,53.525367501000005],[-0.30604150599995705,53.60782636900001],[-0.7974174989999199,53.45508600100004],[-0.9355179999999166,53.5025215],[-1.048599999999965,53.656082000000026],[-0.9252219999999909,53.99155050000007],[-0.21244949999999108,54.15762700000005]]]}},{"type":"Feature","properties":{"id":285,"nuts":"UKE2","name":"North Yorkshire","area":8325.2,"density":96.6,"edu_3":44.2,"gdp":18991,"gdp_ph":22400,"life_ex":82.1,"pop":806512,"unempl":4.5,"coords":[-1.3537891499999604,54.09197730000003]},"geometry":{"type":"Polygon","coordinates":[[[-0.21244949999999108,54.15762700000005],[-0.9252219999999909,53.99155050000007],[-1.048599999999965,53.656082000000026],[-1.2327864999999179,53.62113950000003],[-1.3069009999999537,53.9344595],[-2.0460889999999665,53.85017800000003],[-2.460827499999965,54.2267645],[-2.170166499999965,54.458256000000006],[-1.3439429999999675,54.464233500000034],[-0.7909064999999202,54.5594825],[-0.21244949999999108,54.15762700000005]]]}},{"type":"Feature","properties":{"id":286,"nuts":"UKE3","name":"South Yorkshire","area":1552.1,"density":871.1,"edu_3":31.3,"gdp":26630,"gdp_ph":18700,"life_ex":80.1,"pop":1360875,"unempl":8.8,"coords":[-1.2586593999999423,53.52052680000003]},"geometry":{"type":"Polygon","coordinates":[[[-0.9355179999999166,53.5025215],[-1.2542039999999588,53.30177300000008],[-1.8221884999999531,53.521118],[-1.2327864999999179,53.62113950000003],[-1.048599999999965,53.656082000000026],[-0.9355179999999166,53.5025215]]]}},{"type":"Feature","properties":{"id":287,"nuts":"UKE4","name":"West Yorkshire","area":2029.2,"density":1104,"edu_3":34.2,"gdp":55129,"gdp_ph":23300,"life_ex":80.1,"pop":2261255,"unempl":6.7,"coords":[-1.7439735001666037,53.69126375033335]},"geometry":{"type":"Polygon","coordinates":[[[-1.2327864999999179,53.62113950000003],[-1.8221884999999531,53.521118],[-1.9095829999999125,53.53842150000003],[-2.1462930009999184,53.682266002000006],[-2.0460889999999665,53.85017800000003],[-1.3069009999999537,53.9344595],[-1.2327864999999179,53.62113950000003]]]}},{"type":"Feature","properties":{"id":288,"nuts":"UKF1","name":"Derbyshire and Nottinghamshire","area":4790.3,"density":443.7,"edu_3":34.8,"gdp":47500,"gdp_ph":21200,"life_ex":81.1,"pop":2139545,"unempl":6.1,"coords":[-1.3539616307272127,53.217598220363676]},"geometry":{"type":"Polygon","coordinates":[[[-0.9355179999999166,53.5025215],[-0.7974174989999199,53.45508600100004],[-0.7915794389999178,52.995142423000004],[-0.7782244999999648,52.97693250000003],[-0.988956499999972,52.818256500000075],[-1.5975069999999505,52.700432000000035],[-1.987375999999955,53.21360800000011],[-2.031023499999918,53.37028900000007],[-1.9095829999999125,53.53842150000003],[-1.8221884999999531,53.521118],[-1.2542039999999588,53.30177300000008],[-0.9355179999999166,53.5025215]]]}},{"type":"Feature","properties":{"id":289,"nuts":"UKF2","name":"Leicestershire, Rutland and Northamptonshire","area":4917.9,"density":352.1,"edu_3":35.9,"gdp":42158,"gdp_ph":23200,"life_ex":81.4,"pop":1744628,"unempl":5.3,"coords":[-1.0136755969999662,52.52782890818187]},"geometry":{"type":"Polygon","coordinates":[[[-0.49472149999996873,52.64032000000003],[-0.4653214999999591,52.32295600000003],[-0.6680969999999604,52.19503400000008],[-1.2827014999999733,51.97922900000003],[-1.3318684999999562,52.168487500000026],[-1.175054499999959,52.35621650000007],[-1.5896109999999908,52.68727100000001],[-1.5975069999999505,52.700432000000035],[-0.988956499999972,52.818256500000075],[-0.7782244999999648,52.97693250000003],[-0.778368066999974,52.96098299000005],[-0.49472149999996873,52.64032000000003]]]}},{"type":"Feature","properties":{"id":290,"nuts":"UKF3","name":"Lincolnshire","area":6102.6,"density":121.5,"edu_3":31.4,"gdp":14054,"gdp_ph":18500,"life_ex":81.3,"pop":726323,"unempl":4.6,"coords":[-0.25064120169994625,53.07678322790002]},"geometry":{"type":"Polygon","coordinates":[[[0.017377999000046884,53.525367501000005],[0.35571200000001113,53.19206250000005],[0.05388000000004922,52.919391500000046],[0.26595999500008816,52.81011599500005],[-0.03121399999992036,52.66153700000001],[-0.49472149999996873,52.64032000000003],[-0.778368066999974,52.96098299000005],[-0.7915794389999178,52.995142423000004],[-0.7974174989999199,53.45508600100004],[-0.30604150599995705,53.60782636900001],[0.017377999000046884,53.525367501000005]]]}},{"type":"Feature","properties":{"id":291,"nuts":"UKG1","name":"Herefordshire, Worcestershire and Warwickshire","area":5897.8,"density":220.8,"edu_3":39.8,"gdp":30827,"gdp_ph":22400,"life_ex":81.8,"pop":1309294,"unempl":4.3,"coords":[-2.035364374833288,52.26267495825004]},"geometry":{"type":"Polygon","coordinates":[[[-1.3318684999999562,52.168487500000026],[-1.6657324979999544,51.98749149900004],[-1.7676269999999192,52.1125945],[-2.6502134999999214,51.82615300000003],[-3.0673574999999573,51.98315050000011],[-2.9547189999999546,52.349258500000076],[-2.618021999999968,52.30696500000005],[-2.1648299999999665,52.430214000000035],[-1.6512839999999187,52.35642600000003],[-1.7880529999999908,52.587871500000006],[-1.5896109999999908,52.68727100000001],[-1.175054499999959,52.35621650000007],[-1.3318684999999562,52.168487500000026]]]}},{"type":"Feature","properties":{"id":292,"nuts":"UKG2","name":"Shropshire and Staffordshire","area":6204.4,"density":254.5,"edu_3":31.3,"gdp":32244,"gdp_ph":19300,"life_ex":80.9,"pop":1586017,"unempl":5.3,"coords":[-2.317618149899957,52.66274380000006]},"geometry":{"type":"Polygon","coordinates":[[[-1.5975069999999505,52.700432000000035],[-1.5896109999999908,52.68727100000001],[-1.7880529999999908,52.587871500000006],[-2.1648299999999665,52.430214000000035],[-2.618021999999968,52.30696500000005],[-2.9547189999999546,52.349258500000076],[-3.219745498999913,52.42133700000011],[-2.7268234999999663,52.98329550000011],[-2.529494499999913,52.947185500000046],[-1.987375999999955,53.21360800000011],[-1.5975069999999505,52.700432000000035]]]}},{"type":"Feature","properties":{"id":293,"nuts":"UKG3","name":"West Midlands","area":901.6,"density":3063.4,"edu_3":30.9,"gdp":63266,"gdp_ph":21800,"life_ex":80.3,"pop":2791752,"unempl":9.7,"coords":[-1.8680556666666253,52.45817050000002]},"geometry":{"type":"Polygon","coordinates":[[[-1.7880529999999908,52.587871500000006],[-1.6512839999999187,52.35642600000003],[-2.1648299999999665,52.430214000000035],[-1.7880529999999908,52.587871500000006]]]}},{"type":"Feature","properties":{"id":294,"nuts":"UKH1","name":"East Anglia","area":12746.6,"density":192,"edu_3":37,"gdp":59897,"gdp_ph":23600,"life_ex":82.2,"pop":2435393,"unempl":5,"coords":[0.6757527498333857,52.474812250000035]},"geometry":{"type":"Polygon","coordinates":[[[1.05637999999999,51.95149250000003],[0.7121715000000108,52.072235000000035],[0.06816900000004011,52.005787000000026],[-0.4653214999999591,52.32295600000003],[-0.49472149999996873,52.64032000000003],[-0.03121399999992036,52.66153700000001],[0.26595999500008816,52.81011599500005],[0.6959180000000913,52.98762900000003],[1.2834255010000106,52.93577600000003],[1.6754780000000835,52.742691000000036],[1.763025500000083,52.48116700000003],[1.5797625020000794,52.08604050500003],[1.05637999999999,51.95149250000003]]]}},{"type":"Feature","properties":{"id":295,"nuts":"UKH2","name":"Bedfordshire and Hertfordshire","area":2878.5,"density":609.7,"edu_3":45.2,"gdp":49423,"gdp_ph":26800,"life_ex":82.3,"pop":1782435,"unempl":4.3,"coords":[-0.31553789999995274,51.96086880000005]},"geometry":{"type":"Polygon","coordinates":[[[0.06816900000004011,52.005787000000026],[-0.011878499999966152,51.68087750000001],[-0.5005614999999182,51.59968950000007],[-0.6680969999999604,52.19503400000008],[-0.4653214999999591,52.32295600000003],[0.06816900000004011,52.005787000000026]]]}},{"type":"Feature","properties":{"id":296,"nuts":"UKH3","name":"Essex","area":3946.9,"density":474.5,"edu_3":31.1,"gdp":39372,"gdp_ph":21500,"life_ex":82,"pop":1759186,"unempl":6.2,"coords":[0.49886155433337365,51.8027864836667]},"geometry":{"type":"Polygon","coordinates":[[[1.05637999999999,51.95149250000003],[0.9581795000000852,51.61969000000005],[0.21014782600008175,51.48663690200004],[-0.011878499999966152,51.68087750000001],[0.06816900000004011,52.005787000000026],[0.7121715000000108,52.072235000000035],[1.05637999999999,51.95149250000003]]]}},{"type":"Feature","properties":{"id":297,"nuts":"UKI1","name":"Inner London","area":327.9,"density":10294.8,"edu_3":60.7,"gdp":276323,"gdp_ph":80400,"life_ex":82,"pop":3354812,"unempl":7.4,"coords":[-0.09912314999996852,51.486609840250054]},"geometry":{"type":"Polygon","coordinates":[[[-0.03246359999997139,51.56080036100008],[0.028960500000039247,51.44162350000005],[-0.1403439999999705,51.41924650000004],[-0.25264549999997143,51.52476900000005],[-0.03246359999997139,51.56080036100008]]]}},{"type":"Feature","properties":{"id":298,"nuts":"UKI2","name":"Outer London","area":1266.8,"density":4009.3,"edu_3":48.7,"gdp":118436,"gdp_ph":22500,"life_ex":82.5,"pop":5117623,"unempl":6.6,"coords":[-0.12955753055551136,51.49727602922228]},"geometry":{"type":"Polygon","coordinates":[[[0.21014782600008175,51.48663690200004],[0.04243350000004398,51.29266750000011],[-0.5096665009999697,51.46917350000007],[-0.5005614999999182,51.59968950000007],[-0.011878499999966152,51.68087750000001],[0.21014782600008175,51.48663690200004]],[[-0.03246359999997139,51.56080036100008],[-0.25264549999997143,51.52476900000005],[-0.1403439999999705,51.41924650000004],[0.028960500000039247,51.44162350000005],[-0.03246359999997139,51.56080036100008]]]}},{"type":"Feature","properties":{"id":299,"nuts":"UKJ1","name":"Berkshire, Buckinghamshire and Oxfordshire","area":5743.4,"density":399.9,"edu_3":51,"gdp":86541,"gdp_ph":35900,"life_ex":82.4,"pop":2323855,"unempl":4.1,"coords":[-1.1057569443332858,51.76040561100006]},"geometry":{"type":"Polygon","coordinates":[[[-0.5005614999999182,51.59968950000007],[-0.5096665009999697,51.46917350000007],[-0.7754354999999578,51.33195500000011],[-1.4982799999999656,51.32937600000008],[-1.7194694999999172,51.78321450000004],[-1.6657324979999544,51.98749149900004],[-1.3318684999999562,52.168487500000026],[-1.2827014999999733,51.97922900000003],[-0.6680969999999604,52.19503400000008],[-0.5005614999999182,51.59968950000007]]]}},{"type":"Feature","properties":{"id":300,"nuts":"UKJ2","name":"Surrey, East and West Sussex","area":5504.2,"density":508,"edu_3":45.3,"gdp":78099,"gdp_ph":26800,"life_ex":82.6,"pop":2795365,"unempl":4.6,"coords":[-0.18511878585709138,51.060451000000064]},"geometry":{"type":"Polygon","coordinates":[[[0.04243350000004398,51.29266750000011],[0.8547840000000804,50.92371000000003],[0.24089300000008507,50.734936000000005],[-0.21600899999995704,50.82756400000011],[-0.9328309999999647,50.843151000000034],[-0.7754354999999578,51.33195500000011],[-0.5096665009999697,51.46917350000007],[0.04243350000004398,51.29266750000011]]]}},{"type":"Feature","properties":{"id":301,"nuts":"UKJ3","name":"Hampshire and Isle of Wight","area":4249.3,"density":461.4,"edu_3":43.5,"gdp":51652,"gdp_ph":25600,"life_ex":82,"pop":1932153,"unempl":4.2,"coords":[-1.371080599999965,51.04618750000005]},"geometry":{"type":"Polygon","coordinates":[[[-0.7754354999999578,51.33195500000011],[-0.9328309999999647,50.843151000000034],[-1.6920494999999676,50.7366255],[-1.9568069999999693,50.98983000000004],[-1.4982799999999656,51.32937600000008],[-0.7754354999999578,51.33195500000011]]]}},{"type":"Feature","properties":{"id":302,"nuts":"UKJ4","name":"Kent","area":3908.3,"density":468,"edu_3":37.5,"gdp":38896,"gdp_ph":21200,"life_ex":81.6,"pop":1769958,"unempl":5.7,"coords":[0.7751504650000755,51.24759828040006]},"geometry":{"type":"Polygon","coordinates":[[[0.8547840000000804,50.92371000000003],[0.04243350000004398,51.29266750000011],[0.21014782600008175,51.48663690200004],[1.3887484990000871,51.39281850000003],[1.379638500000084,51.14215850000011],[0.8547840000000804,50.92371000000003]]]}},{"type":"Feature","properties":{"id":303,"nuts":"UKK1","name":"Gloucestershire, Wiltshire and Bristol/Bath area","area":7703.9,"density":317.7,"edu_3":44.7,"gdp":68659,"gdp_ph":27500,"life_ex":81.7,"pop":2400262,"unempl":4.8,"coords":[-2.128374114999941,51.581039740222266]},"geometry":{"type":"Polygon","coordinates":[[[-1.6657324979999544,51.98749149900004],[-1.7194694999999172,51.78321450000004],[-1.4982799999999656,51.32937600000008],[-1.9568069999999693,50.98983000000004],[-2.2444164999999145,51.263122501000026],[-2.9929479999999558,51.32032000000004],[-2.6598730369999544,51.61725566200005],[-2.6502134999999214,51.82615300000003],[-1.7676269999999192,52.1125945],[-1.6657324979999544,51.98749149900004]]]}},{"type":"Feature","properties":{"id":304,"nuts":"UKK2","name":"Dorset and Somerset","area":6208.8,"density":210.5,"edu_3":37.5,"gdp":28527,"gdp_ph":21100,"life_ex":82.4,"pop":1295446,"unempl":4.5,"coords":[-2.7226777499999573,50.99847445020006]},"geometry":{"type":"Polygon","coordinates":[[[-1.9568069999999693,50.98983000000004],[-1.6920494999999676,50.7366255],[-1.9513519999999573,50.594272500000045],[-2.9478149999999914,50.71830750000004],[-2.973584001999967,50.85565950100005],[-3.719951999999921,51.08081800000011],[-3.7207784979999587,51.23309350000011],[-3.027074999999968,51.19269550000007],[-2.9929479999999558,51.32032000000004],[-2.2444164999999145,51.263122501000026],[-1.9568069999999693,50.98983000000004]]]}},{"type":"Feature","properties":{"id":305,"nuts":"UKK3","name":"Cornwall and Isles of Scilly","area":3636.2,"density":151.6,"edu_3":36.9,"gdp":9187,"gdp_ph":16200,"life_ex":81.6,"pop":546130,"unempl":3.8,"coords":[-4.840059285714241,50.44736085714293]},"geometry":{"type":"Polygon","coordinates":[[[-4.19080299999996,50.43536750000004],[-4.763279999999952,50.32623650000011],[-5.266165499999914,49.99977850000005],[-5.528742499999993,50.12474800000007],[-5.023072999999954,50.535633000000075],[-4.562391499999961,50.78141000000011],[-4.545959499999952,50.928352500000074],[-4.19080299999996,50.43536750000004]]]}},{"type":"Feature","properties":{"id":306,"nuts":"UKK4","name":"Devon","area":6839.7,"density":170.3,"edu_3":37.9,"gdp":24259,"gdp_ph":20200,"life_ex":82,"pop":1150833,"unempl":5,"coords":[-3.7155521111110597,50.80699961122229]},"geometry":{"type":"Polygon","coordinates":[[[-2.9478149999999914,50.71830750000004],[-3.4247869999999523,50.6106795],[-3.7237039999999126,50.201519000000076],[-4.19080299999996,50.43536750000004],[-4.545959499999952,50.928352500000074],[-4.19258599999992,51.19919950000008],[-3.7207784979999587,51.23309350000011],[-3.719951999999921,51.08081800000011],[-2.973584001999967,50.85565950100005],[-2.9478149999999914,50.71830750000004]]]}},{"type":"Feature","properties":{"id":307,"nuts":"UKL1","name":"West Wales and The Valleys","area":13442.8,"density":148,"edu_3":33.5,"gdp":32982,"gdp_ph":16100,"life_ex":80,"pop":1946447,"unempl":7,"coords":[-3.9940167504999584,52.182222427857205]},"geometry":{"type":"Polygon","coordinates":[[[-3.6378554999999153,51.46984100000003],[-3.8499815009999168,51.61865250000011],[-4.286978999999974,51.56129850000008],[-4.55918749999995,51.74197400000003],[-4.920602999999971,51.61036300000001],[-5.128470499999992,51.85850500000004],[-4.2075044999999704,52.26382050000001],[-4.054829499999954,52.533653498000035],[-4.199843499999957,53.21023550000007],[-3.363392499999918,53.352028000000075],[-3.129606999999993,53.07239150000004],[-3.840682499999957,52.651005000000026],[-3.64713300599999,52.03879949200001],[-3.0901649999999563,51.56854650000008],[-3.6378554999999153,51.46984100000003]]]}},{"type":"Feature","properties":{"id":308,"nuts":"UKL2","name":"East Wales","area":7781.7,"density":148.7,"edu_3":43.2,"gdp":27446,"gdp_ph":22900,"life_ex":80.9,"pop":1146450,"unempl":6.1,"coords":[-3.1600965029999526,52.285388153857184]},"geometry":{"type":"Polygon","coordinates":[[[-3.0841929999999707,53.256122500000004],[-2.7268234999999663,52.98329550000011],[-3.219745498999913,52.42133700000011],[-2.9547189999999546,52.349258500000076],[-3.0673574999999573,51.98315050000011],[-2.6502134999999214,51.82615300000003],[-2.6598730369999544,51.61725566200005],[-3.16959049999997,51.40625],[-3.6378554999999153,51.46984100000003],[-3.0901649999999563,51.56854650000008],[-3.64713300599999,52.03879949200001],[-3.840682499999957,52.651005000000026],[-3.129606999999993,53.07239150000004],[-3.363392499999918,53.352028000000075],[-3.0841929999999707,53.256122500000004]]]}},{"type":"Feature","properties":{"id":309,"nuts":"UKM2","name":"Eastern Scotland","area":18296.4,"density":113.3,"edu_3":50.4,"gdp":52647,"gdp_ph":24500,"life_ex":80,"pop":2049771,"unempl":5.6,"coords":[-3.2868773911764153,56.062578749941245]},"geometry":{"type":"Polygon","coordinates":[[[-2.443488864999921,56.75161289200008],[-2.9552849999999182,56.21049500000004],[-2.78559249999995,56.065773000000036],[-2.034328999999957,55.811165000000074],[-2.194164499999914,55.44534300000004],[-2.689750999999916,55.18906400000003],[-2.858507999999972,55.10842500000007],[-2.8930210049999516,55.27997600100008],[-3.4721139999999195,55.40384300000011],[-3.4716189999999187,55.77106850000007],[-4.0201209999999605,56.02814500000011],[-4.587390498999952,56.07333750000004],[-4.785811499999966,56.323852500000044],[-4.5109769999999685,56.803447500000004],[-3.8016274999999666,56.936012500000004],[-3.4898224989999562,56.87684650000003],[-2.8832927819999554,56.98543185600005],[-2.443488864999921,56.75161289200008]]]}},{"type":"Feature","properties":{"id":310,"nuts":"UKM3","name":"South Western Scotland","area":13437.5,"density":178.6,"edu_3":43.4,"gdp":55130,"gdp_ph":22300,"life_ex":78.3,"pop":2334318,"unempl":7,"coords":[-4.039367939428524,55.498033138571486]},"geometry":{"type":"Polygon","coordinates":[[[-2.858507999999972,55.10842500000007],[-3.0573704999999904,54.9868965],[-3.5334639989999914,54.96775450000007],[-4.405439499999915,54.67750950000004],[-5.161494999999917,55.00796150000011],[-4.650890513999968,55.44114699700003],[-4.905255999999952,55.69921900000003],[-4.7486506349999615,56.20332844200004],[-4.785811499999966,56.323852500000044],[-4.587390498999952,56.07333750000004],[-4.0201209999999605,56.02814500000011],[-3.4716189999999187,55.77106850000007],[-3.4721139999999195,55.40384300000011],[-2.8930210049999516,55.27997600100008],[-2.858507999999972,55.10842500000007]]]}},{"type":"Feature","properties":{"id":311,"nuts":"UKM5","name":"North Eastern Scotland","area":6498.3,"density":73.9,"edu_3":47.5,"gdp":20138,"gdp_ph":39900,"life_ex":80.3,"pop":486500,"unempl":4,"coords":[-2.788099904999953,57.20799092400004]},"geometry":{"type":"Polygon","coordinates":[[[-2.443488864999921,56.75161289200008],[-2.8832927819999554,56.98543185600005],[-3.4898224989999562,56.87684650000003],[-3.8016274999999666,56.936012500000004],[-2.9841904999999542,57.277878000000044],[-2.802543093999958,57.67427264400004],[-2.1180159999999546,57.70126350000004],[-1.7818179999999586,57.460609500000004],[-2.443488864999921,56.75161289200008]]]}},{"type":"Feature","properties":{"id":312,"nuts":"UKM6","name":"Highlands and Islands","area":41960.2,"density":11.5,"edu_3":44,"gdp":9948,"gdp_ph":20100,"life_ex":80.6,"pop":466872,"unempl":3.9,"coords":[-4.594131511599959,57.33404347940003]},"geometry":{"type":"Polygon","coordinates":[[[-2.802543093999958,57.67427264400004],[-2.9841904999999542,57.277878000000044],[-3.8016274999999666,56.936012500000004],[-4.5109769999999685,56.803447500000004],[-4.785811499999966,56.323852500000044],[-4.7486506349999615,56.20332844200004],[-5.448946999999919,55.70780950000011],[-5.7082039999999665,55.96345500000007],[-5.407147499999951,56.45905300000004],[-5.905484499999915,56.55130400000007],[-5.797942997999968,57.065353501000004],[-5.814163499999921,57.85871100000003],[-5.2396609999999555,57.91781600000007],[-5.361896500999961,58.21826950100001],[-5.007117499999993,58.62599200000011],[-4.594188500999991,58.53489300000007],[-3.024449000999965,58.64426400000008],[-3.2098200009999687,58.310055000000034],[-4.015319500999965,57.949993000000006],[-3.714488499999959,57.65510950000004],[-2.802543093999958,57.67427264400004]]]}},{"type":"Feature","properties":{"id":313,"nuts":"UKN0","name":"Northern Ireland","area":14129.7,"density":134.4,"edu_3":34,"gdp":37813,"gdp_ph":19700,"life_ex":80.4,"pop":1835847,"unempl":6.4,"coords":[-6.784076317636319,54.522806318363685]},"geometry":{"type":"Polygon","coordinates":[[[-6.2680154999999615,54.102337000000034],[-6.623778499999958,54.03654850000004],[-7.02863549999995,54.42130650000007],[-7.5659559999999715,54.12651450000004],[-8.177717998999952,54.46497350000004],[-7.703411499999959,54.60828800000007],[-7.258475999999973,55.06670000000008],[-6.476123498999954,55.25221250000004],[-6.027017999999913,55.16146450000011],[-5.432801999999953,54.487644000000046],[-6.062904995999958,54.02288050200008],[-6.2680154999999615,54.102337000000034]]]}}]}

},{}],2:[function(require,module,exports){
var valuesData = [
		{id: 'pop', name: 'Population'},
		{id: 'area', name: 'Surface'}, 
		{id: 'density', name: 'Density'},
		{id: 'gdp', name: 'GDP'},
		{id: 'gdp_ph', name: 'GDP by inhab.'},
		{id: 'life_ex', name: 'Life expectancy'},
		{id: 'unempl', name: 'Unemployment'},
		{id: 'edu_3', name: 'Higher education'},
	]

module.exports = function(body) {
	var buttons = body.append('div').attr('id', 'buttons')
	type(buttons)
	values(buttons, valuesData)
}

function values(buttons, data) {
	var dropdown = buttons.append('select')
		.attr({
			id: 'values'
		})
	for(i=0;i<data.length;i++) {
		dropdown.append('option')
			.attr({
				id: data[i].id,
				class: 'valueOption'
			})
			.text(data[i].name)
	}
	dropdown.selectAll('.valueOption').on('click', function() {
		var type = getType(window.location.href)
		var value = d3.event.target.id
		window.location.href = '#/' + type + '/' + value
	})
}



function type(buttons) {
	var radio = buttons.append('form')

	radio.append('input')
		.attr({
			id: 'colors',
			value: 'colors',
			name: 'type',
			type: 'radio' ,
			checked: ''
		})
	radio.append('text').text('Colors')

	radio.append('input')
		.attr({
			id: 'bubbles',
			value: 'bubbles',
			name: 'type',
			type: 'radio'
		})
		.text('Bubbles')
	radio.append('text').text('Bubbles')

	radio.on('click', function() {
		var type = d3.event.target.value
		var value = getValue(window.location.href)
		window.location.href = '#/' + type + '/' + value
	})
}

function getValue(href) {
	var hash = href.split('#')[1]
	var value = hash.split('/')[2]
	return value
}

function getType(href) {
	var hash = href.split('#')[1]
	var type = hash.split('/')[1]
	return type
}

},{}],3:[function(require,module,exports){
module.exports = function(body, data) {
	var width = window.innerWidth - 20
	var height = window.innerHeight - body.select('#buttons').node().getBoundingClientRect().height - 20
	
	var svg = body.append('svg').attr({width: width, height: height})
	
	var projection = d3.geo.mercator()
		  .scale(1)
		  .translate([0, 0]);
	var path = d3.geo.path()
		  .projection(projection);
	var b = path.bounds(data);
	var s = .95 / Math.max((b[1][0] - b[0][0]) / width, (b[1][1] - b[0][1]) / height);
	var t = [(width - s * (b[1][0] + b[0][0])) / 2, (height - s * (b[1][1] + b[0][1])) / 2];
	projection
		  .scale(s)
		  .translate(t)

	var nuts = svg.selectAll('path')
		.data(data.features)
		.enter()
		.append('path')
		.attr('id', function(d) { return d.properties.id })
		.attr('class', 'regions')
		.attr('d', path)
	
	var points = svg.append('g').attr('id','points')
	
	for(i=0;i<data.features.length;i++) {
		var f = data.features[i]
		points.append('circle')
			.attr({
				id: 'pt' + f.properties.id,
				cx: projection(f.properties.coords)[0],
				cy: projection(f.properties.coords)[1],
				r: 0
			})
	}
	
}

},{}],4:[function(require,module,exports){
var d3 = require('d3')
var data = require('../data/nuts.json')
var colors = ['#66bd63', '#a6d96a', '#d9ef8b', '#ffffbf', '#fee08b', '#fdae61', '#f46d43']

module.exports = function(type, value) {
	console.log(type,value)
	var regions = d3.selectAll('path.regions')
	
	if(type === 'colors') {
		d3.select('#points').attr('opacity', 0)
		var thisData = []
		for(i=0;i<data.features.length;i++) {
			var prop = data.features[i].properties
			if(prop[value] !== undefined && prop[value] !== null) {
				thisData.push(prop[value])
			}
		}
		var scale = d3.scale.quantile()
			.range(colors)
			.domain(thisData)
		regions
			.attr('fill', function(d) { 
				if(d.properties[value] !== undefined && d.properties[value] !== null) {
					return scale(d.properties[value]) 
				} else {
					return 'none'
				}
			})
	}
	if(type === 'bubbles') {
		d3.select('#points').attr('opacity', 0.3)
		regions.attr('fill', 'lightgray')
		var thisData = []
		for(i=0;i<data.features.length;i++) {
			var f = data.features[i]
			if(f.properties[value] !== undefined && f.properties[value] !== null) {
				thisData.push(f.properties[value])
			}
		}
		var scale = d3.scale.linear()
			.range([1,20])
			.domain([
				d3.min(thisData, function(d) { return d }),
				d3.max(thisData, function(d) { return d })
			])
		for(i=0;i<data.features.length;i++) {
			var f = data.features[i]
			var id = 'pt' + f.properties.id
			if(f.properties[value] !== undefined && f.properties[value] !== null) {
				d3.select('circle#' + id).attr('r', scale(f.properties[value]))
			} else {
				d3.select('circle#' + id).attr('r', 0)
			}
		}
	}
}

},{"../data/nuts.json":1,"d3":6}],5:[function(require,module,exports){
var data = require('./data/nuts.json')
var d3 = require('d3')
var director = require('director')

var mapState = require('./lib/mapState')
var buttons = require('./lib/buttons')
var map = require('./lib/map')

//elements
var body = d3.select('body')
buttons(body)
map(body, data)

//routes
var routes = {
	'/:type/:value' : mapState	
}
var router = director.Router(routes);
router.init();
window.location.href = '#/colors/pop'







},{"./data/nuts.json":1,"./lib/buttons":2,"./lib/map":3,"./lib/mapState":4,"d3":6,"director":7}],6:[function(require,module,exports){
!function() {
  var d3 = {
    version: "3.5.6"
  };
  var d3_arraySlice = [].slice, d3_array = function(list) {
    return d3_arraySlice.call(list);
  };
  var d3_document = this.document;
  function d3_documentElement(node) {
    return node && (node.ownerDocument || node.document || node).documentElement;
  }
  function d3_window(node) {
    return node && (node.ownerDocument && node.ownerDocument.defaultView || node.document && node || node.defaultView);
  }
  if (d3_document) {
    try {
      d3_array(d3_document.documentElement.childNodes)[0].nodeType;
    } catch (e) {
      d3_array = function(list) {
        var i = list.length, array = new Array(i);
        while (i--) array[i] = list[i];
        return array;
      };
    }
  }
  if (!Date.now) Date.now = function() {
    return +new Date();
  };
  if (d3_document) {
    try {
      d3_document.createElement("DIV").style.setProperty("opacity", 0, "");
    } catch (error) {
      var d3_element_prototype = this.Element.prototype, d3_element_setAttribute = d3_element_prototype.setAttribute, d3_element_setAttributeNS = d3_element_prototype.setAttributeNS, d3_style_prototype = this.CSSStyleDeclaration.prototype, d3_style_setProperty = d3_style_prototype.setProperty;
      d3_element_prototype.setAttribute = function(name, value) {
        d3_element_setAttribute.call(this, name, value + "");
      };
      d3_element_prototype.setAttributeNS = function(space, local, value) {
        d3_element_setAttributeNS.call(this, space, local, value + "");
      };
      d3_style_prototype.setProperty = function(name, value, priority) {
        d3_style_setProperty.call(this, name, value + "", priority);
      };
    }
  }
  d3.ascending = d3_ascending;
  function d3_ascending(a, b) {
    return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
  }
  d3.descending = function(a, b) {
    return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
  };
  d3.min = function(array, f) {
    var i = -1, n = array.length, a, b;
    if (arguments.length === 1) {
      while (++i < n) if ((b = array[i]) != null && b >= b) {
        a = b;
        break;
      }
      while (++i < n) if ((b = array[i]) != null && a > b) a = b;
    } else {
      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {
        a = b;
        break;
      }
      while (++i < n) if ((b = f.call(array, array[i], i)) != null && a > b) a = b;
    }
    return a;
  };
  d3.max = function(array, f) {
    var i = -1, n = array.length, a, b;
    if (arguments.length === 1) {
      while (++i < n) if ((b = array[i]) != null && b >= b) {
        a = b;
        break;
      }
      while (++i < n) if ((b = array[i]) != null && b > a) a = b;
    } else {
      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {
        a = b;
        break;
      }
      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b > a) a = b;
    }
    return a;
  };
  d3.extent = function(array, f) {
    var i = -1, n = array.length, a, b, c;
    if (arguments.length === 1) {
      while (++i < n) if ((b = array[i]) != null && b >= b) {
        a = c = b;
        break;
      }
      while (++i < n) if ((b = array[i]) != null) {
        if (a > b) a = b;
        if (c < b) c = b;
      }
    } else {
      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {
        a = c = b;
        break;
      }
      while (++i < n) if ((b = f.call(array, array[i], i)) != null) {
        if (a > b) a = b;
        if (c < b) c = b;
      }
    }
    return [ a, c ];
  };
  function d3_number(x) {
    return x === null ? NaN : +x;
  }
  function d3_numeric(x) {
    return !isNaN(x);
  }
  d3.sum = function(array, f) {
    var s = 0, n = array.length, a, i = -1;
    if (arguments.length === 1) {
      while (++i < n) if (d3_numeric(a = +array[i])) s += a;
    } else {
      while (++i < n) if (d3_numeric(a = +f.call(array, array[i], i))) s += a;
    }
    return s;
  };
  d3.mean = function(array, f) {
    var s = 0, n = array.length, a, i = -1, j = n;
    if (arguments.length === 1) {
      while (++i < n) if (d3_numeric(a = d3_number(array[i]))) s += a; else --j;
    } else {
      while (++i < n) if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) s += a; else --j;
    }
    if (j) return s / j;
  };
  d3.quantile = function(values, p) {
    var H = (values.length - 1) * p + 1, h = Math.floor(H), v = +values[h - 1], e = H - h;
    return e ? v + e * (values[h] - v) : v;
  };
  d3.median = function(array, f) {
    var numbers = [], n = array.length, a, i = -1;
    if (arguments.length === 1) {
      while (++i < n) if (d3_numeric(a = d3_number(array[i]))) numbers.push(a);
    } else {
      while (++i < n) if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) numbers.push(a);
    }
    if (numbers.length) return d3.quantile(numbers.sort(d3_ascending), .5);
  };
  d3.variance = function(array, f) {
    var n = array.length, m = 0, a, d, s = 0, i = -1, j = 0;
    if (arguments.length === 1) {
      while (++i < n) {
        if (d3_numeric(a = d3_number(array[i]))) {
          d = a - m;
          m += d / ++j;
          s += d * (a - m);
        }
      }
    } else {
      while (++i < n) {
        if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) {
          d = a - m;
          m += d / ++j;
          s += d * (a - m);
        }
      }
    }
    if (j > 1) return s / (j - 1);
  };
  d3.deviation = function() {
    var v = d3.variance.apply(this, arguments);
    return v ? Math.sqrt(v) : v;
  };
  function d3_bisector(compare) {
    return {
      left: function(a, x, lo, hi) {
        if (arguments.length < 3) lo = 0;
        if (arguments.length < 4) hi = a.length;
        while (lo < hi) {
          var mid = lo + hi >>> 1;
          if (compare(a[mid], x) < 0) lo = mid + 1; else hi = mid;
        }
        return lo;
      },
      right: function(a, x, lo, hi) {
        if (arguments.length < 3) lo = 0;
        if (arguments.length < 4) hi = a.length;
        while (lo < hi) {
          var mid = lo + hi >>> 1;
          if (compare(a[mid], x) > 0) hi = mid; else lo = mid + 1;
        }
        return lo;
      }
    };
  }
  var d3_bisect = d3_bisector(d3_ascending);
  d3.bisectLeft = d3_bisect.left;
  d3.bisect = d3.bisectRight = d3_bisect.right;
  d3.bisector = function(f) {
    return d3_bisector(f.length === 1 ? function(d, x) {
      return d3_ascending(f(d), x);
    } : f);
  };
  d3.shuffle = function(array, i0, i1) {
    if ((m = arguments.length) < 3) {
      i1 = array.length;
      if (m < 2) i0 = 0;
    }
    var m = i1 - i0, t, i;
    while (m) {
      i = Math.random() * m-- | 0;
      t = array[m + i0], array[m + i0] = array[i + i0], array[i + i0] = t;
    }
    return array;
  };
  d3.permute = function(array, indexes) {
    var i = indexes.length, permutes = new Array(i);
    while (i--) permutes[i] = array[indexes[i]];
    return permutes;
  };
  d3.pairs = function(array) {
    var i = 0, n = array.length - 1, p0, p1 = array[0], pairs = new Array(n < 0 ? 0 : n);
    while (i < n) pairs[i] = [ p0 = p1, p1 = array[++i] ];
    return pairs;
  };
  d3.zip = function() {
    if (!(n = arguments.length)) return [];
    for (var i = -1, m = d3.min(arguments, d3_zipLength), zips = new Array(m); ++i < m; ) {
      for (var j = -1, n, zip = zips[i] = new Array(n); ++j < n; ) {
        zip[j] = arguments[j][i];
      }
    }
    return zips;
  };
  function d3_zipLength(d) {
    return d.length;
  }
  d3.transpose = function(matrix) {
    return d3.zip.apply(d3, matrix);
  };
  d3.keys = function(map) {
    var keys = [];
    for (var key in map) keys.push(key);
    return keys;
  };
  d3.values = function(map) {
    var values = [];
    for (var key in map) values.push(map[key]);
    return values;
  };
  d3.entries = function(map) {
    var entries = [];
    for (var key in map) entries.push({
      key: key,
      value: map[key]
    });
    return entries;
  };
  d3.merge = function(arrays) {
    var n = arrays.length, m, i = -1, j = 0, merged, array;
    while (++i < n) j += arrays[i].length;
    merged = new Array(j);
    while (--n >= 0) {
      array = arrays[n];
      m = array.length;
      while (--m >= 0) {
        merged[--j] = array[m];
      }
    }
    return merged;
  };
  var abs = Math.abs;
  d3.range = function(start, stop, step) {
    if (arguments.length < 3) {
      step = 1;
      if (arguments.length < 2) {
        stop = start;
        start = 0;
      }
    }
    if ((stop - start) / step === Infinity) throw new Error("infinite range");
    var range = [], k = d3_range_integerScale(abs(step)), i = -1, j;
    start *= k, stop *= k, step *= k;
    if (step < 0) while ((j = start + step * ++i) > stop) range.push(j / k); else while ((j = start + step * ++i) < stop) range.push(j / k);
    return range;
  };
  function d3_range_integerScale(x) {
    var k = 1;
    while (x * k % 1) k *= 10;
    return k;
  }
  function d3_class(ctor, properties) {
    for (var key in properties) {
      Object.defineProperty(ctor.prototype, key, {
        value: properties[key],
        enumerable: false
      });
    }
  }
  d3.map = function(object, f) {
    var map = new d3_Map();
    if (object instanceof d3_Map) {
      object.forEach(function(key, value) {
        map.set(key, value);
      });
    } else if (Array.isArray(object)) {
      var i = -1, n = object.length, o;
      if (arguments.length === 1) while (++i < n) map.set(i, object[i]); else while (++i < n) map.set(f.call(object, o = object[i], i), o);
    } else {
      for (var key in object) map.set(key, object[key]);
    }
    return map;
  };
  function d3_Map() {
    this._ = Object.create(null);
  }
  var d3_map_proto = "__proto__", d3_map_zero = "\x00";
  d3_class(d3_Map, {
    has: d3_map_has,
    get: function(key) {
      return this._[d3_map_escape(key)];
    },
    set: function(key, value) {
      return this._[d3_map_escape(key)] = value;
    },
    remove: d3_map_remove,
    keys: d3_map_keys,
    values: function() {
      var values = [];
      for (var key in this._) values.push(this._[key]);
      return values;
    },
    entries: function() {
      var entries = [];
      for (var key in this._) entries.push({
        key: d3_map_unescape(key),
        value: this._[key]
      });
      return entries;
    },
    size: d3_map_size,
    empty: d3_map_empty,
    forEach: function(f) {
      for (var key in this._) f.call(this, d3_map_unescape(key), this._[key]);
    }
  });
  function d3_map_escape(key) {
    return (key += "") === d3_map_proto || key[0] === d3_map_zero ? d3_map_zero + key : key;
  }
  function d3_map_unescape(key) {
    return (key += "")[0] === d3_map_zero ? key.slice(1) : key;
  }
  function d3_map_has(key) {
    return d3_map_escape(key) in this._;
  }
  function d3_map_remove(key) {
    return (key = d3_map_escape(key)) in this._ && delete this._[key];
  }
  function d3_map_keys() {
    var keys = [];
    for (var key in this._) keys.push(d3_map_unescape(key));
    return keys;
  }
  function d3_map_size() {
    var size = 0;
    for (var key in this._) ++size;
    return size;
  }
  function d3_map_empty() {
    for (var key in this._) return false;
    return true;
  }
  d3.nest = function() {
    var nest = {}, keys = [], sortKeys = [], sortValues, rollup;
    function map(mapType, array, depth) {
      if (depth >= keys.length) return rollup ? rollup.call(nest, array) : sortValues ? array.sort(sortValues) : array;
      var i = -1, n = array.length, key = keys[depth++], keyValue, object, setter, valuesByKey = new d3_Map(), values;
      while (++i < n) {
        if (values = valuesByKey.get(keyValue = key(object = array[i]))) {
          values.push(object);
        } else {
          valuesByKey.set(keyValue, [ object ]);
        }
      }
      if (mapType) {
        object = mapType();
        setter = function(keyValue, values) {
          object.set(keyValue, map(mapType, values, depth));
        };
      } else {
        object = {};
        setter = function(keyValue, values) {
          object[keyValue] = map(mapType, values, depth);
        };
      }
      valuesByKey.forEach(setter);
      return object;
    }
    function entries(map, depth) {
      if (depth >= keys.length) return map;
      var array = [], sortKey = sortKeys[depth++];
      map.forEach(function(key, keyMap) {
        array.push({
          key: key,
          values: entries(keyMap, depth)
        });
      });
      return sortKey ? array.sort(function(a, b) {
        return sortKey(a.key, b.key);
      }) : array;
    }
    nest.map = function(array, mapType) {
      return map(mapType, array, 0);
    };
    nest.entries = function(array) {
      return entries(map(d3.map, array, 0), 0);
    };
    nest.key = function(d) {
      keys.push(d);
      return nest;
    };
    nest.sortKeys = function(order) {
      sortKeys[keys.length - 1] = order;
      return nest;
    };
    nest.sortValues = function(order) {
      sortValues = order;
      return nest;
    };
    nest.rollup = function(f) {
      rollup = f;
      return nest;
    };
    return nest;
  };
  d3.set = function(array) {
    var set = new d3_Set();
    if (array) for (var i = 0, n = array.length; i < n; ++i) set.add(array[i]);
    return set;
  };
  function d3_Set() {
    this._ = Object.create(null);
  }
  d3_class(d3_Set, {
    has: d3_map_has,
    add: function(key) {
      this._[d3_map_escape(key += "")] = true;
      return key;
    },
    remove: d3_map_remove,
    values: d3_map_keys,
    size: d3_map_size,
    empty: d3_map_empty,
    forEach: function(f) {
      for (var key in this._) f.call(this, d3_map_unescape(key));
    }
  });
  d3.behavior = {};
  function d3_identity(d) {
    return d;
  }
  d3.rebind = function(target, source) {
    var i = 1, n = arguments.length, method;
    while (++i < n) target[method = arguments[i]] = d3_rebind(target, source, source[method]);
    return target;
  };
  function d3_rebind(target, source, method) {
    return function() {
      var value = method.apply(source, arguments);
      return value === source ? target : value;
    };
  }
  function d3_vendorSymbol(object, name) {
    if (name in object) return name;
    name = name.charAt(0).toUpperCase() + name.slice(1);
    for (var i = 0, n = d3_vendorPrefixes.length; i < n; ++i) {
      var prefixName = d3_vendorPrefixes[i] + name;
      if (prefixName in object) return prefixName;
    }
  }
  var d3_vendorPrefixes = [ "webkit", "ms", "moz", "Moz", "o", "O" ];
  function d3_noop() {}
  d3.dispatch = function() {
    var dispatch = new d3_dispatch(), i = -1, n = arguments.length;
    while (++i < n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);
    return dispatch;
  };
  function d3_dispatch() {}
  d3_dispatch.prototype.on = function(type, listener) {
    var i = type.indexOf("."), name = "";
    if (i >= 0) {
      name = type.slice(i + 1);
      type = type.slice(0, i);
    }
    if (type) return arguments.length < 2 ? this[type].on(name) : this[type].on(name, listener);
    if (arguments.length === 2) {
      if (listener == null) for (type in this) {
        if (this.hasOwnProperty(type)) this[type].on(name, null);
      }
      return this;
    }
  };
  function d3_dispatch_event(dispatch) {
    var listeners = [], listenerByName = new d3_Map();
    function event() {
      var z = listeners, i = -1, n = z.length, l;
      while (++i < n) if (l = z[i].on) l.apply(this, arguments);
      return dispatch;
    }
    event.on = function(name, listener) {
      var l = listenerByName.get(name), i;
      if (arguments.length < 2) return l && l.on;
      if (l) {
        l.on = null;
        listeners = listeners.slice(0, i = listeners.indexOf(l)).concat(listeners.slice(i + 1));
        listenerByName.remove(name);
      }
      if (listener) listeners.push(listenerByName.set(name, {
        on: listener
      }));
      return dispatch;
    };
    return event;
  }
  d3.event = null;
  function d3_eventPreventDefault() {
    d3.event.preventDefault();
  }
  function d3_eventSource() {
    var e = d3.event, s;
    while (s = e.sourceEvent) e = s;
    return e;
  }
  function d3_eventDispatch(target) {
    var dispatch = new d3_dispatch(), i = 0, n = arguments.length;
    while (++i < n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);
    dispatch.of = function(thiz, argumentz) {
      return function(e1) {
        try {
          var e0 = e1.sourceEvent = d3.event;
          e1.target = target;
          d3.event = e1;
          dispatch[e1.type].apply(thiz, argumentz);
        } finally {
          d3.event = e0;
        }
      };
    };
    return dispatch;
  }
  d3.requote = function(s) {
    return s.replace(d3_requote_re, "\\$&");
  };
  var d3_requote_re = /[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g;
  var d3_subclass = {}.__proto__ ? function(object, prototype) {
    object.__proto__ = prototype;
  } : function(object, prototype) {
    for (var property in prototype) object[property] = prototype[property];
  };
  function d3_selection(groups) {
    d3_subclass(groups, d3_selectionPrototype);
    return groups;
  }
  var d3_select = function(s, n) {
    return n.querySelector(s);
  }, d3_selectAll = function(s, n) {
    return n.querySelectorAll(s);
  }, d3_selectMatches = function(n, s) {
    var d3_selectMatcher = n.matches || n[d3_vendorSymbol(n, "matchesSelector")];
    d3_selectMatches = function(n, s) {
      return d3_selectMatcher.call(n, s);
    };
    return d3_selectMatches(n, s);
  };
  if (typeof Sizzle === "function") {
    d3_select = function(s, n) {
      return Sizzle(s, n)[0] || null;
    };
    d3_selectAll = Sizzle;
    d3_selectMatches = Sizzle.matchesSelector;
  }
  d3.selection = function() {
    return d3.select(d3_document.documentElement);
  };
  var d3_selectionPrototype = d3.selection.prototype = [];
  d3_selectionPrototype.select = function(selector) {
    var subgroups = [], subgroup, subnode, group, node;
    selector = d3_selection_selector(selector);
    for (var j = -1, m = this.length; ++j < m; ) {
      subgroups.push(subgroup = []);
      subgroup.parentNode = (group = this[j]).parentNode;
      for (var i = -1, n = group.length; ++i < n; ) {
        if (node = group[i]) {
          subgroup.push(subnode = selector.call(node, node.__data__, i, j));
          if (subnode && "__data__" in node) subnode.__data__ = node.__data__;
        } else {
          subgroup.push(null);
        }
      }
    }
    return d3_selection(subgroups);
  };
  function d3_selection_selector(selector) {
    return typeof selector === "function" ? selector : function() {
      return d3_select(selector, this);
    };
  }
  d3_selectionPrototype.selectAll = function(selector) {
    var subgroups = [], subgroup, node;
    selector = d3_selection_selectorAll(selector);
    for (var j = -1, m = this.length; ++j < m; ) {
      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
        if (node = group[i]) {
          subgroups.push(subgroup = d3_array(selector.call(node, node.__data__, i, j)));
          subgroup.parentNode = node;
        }
      }
    }
    return d3_selection(subgroups);
  };
  function d3_selection_selectorAll(selector) {
    return typeof selector === "function" ? selector : function() {
      return d3_selectAll(selector, this);
    };
  }
  var d3_nsPrefix = {
    svg: "http://www.w3.org/2000/svg",
    xhtml: "http://www.w3.org/1999/xhtml",
    xlink: "http://www.w3.org/1999/xlink",
    xml: "http://www.w3.org/XML/1998/namespace",
    xmlns: "http://www.w3.org/2000/xmlns/"
  };
  d3.ns = {
    prefix: d3_nsPrefix,
    qualify: function(name) {
      var i = name.indexOf(":"), prefix = name;
      if (i >= 0) {
        prefix = name.slice(0, i);
        name = name.slice(i + 1);
      }
      return d3_nsPrefix.hasOwnProperty(prefix) ? {
        space: d3_nsPrefix[prefix],
        local: name
      } : name;
    }
  };
  d3_selectionPrototype.attr = function(name, value) {
    if (arguments.length < 2) {
      if (typeof name === "string") {
        var node = this.node();
        name = d3.ns.qualify(name);
        return name.local ? node.getAttributeNS(name.space, name.local) : node.getAttribute(name);
      }
      for (value in name) this.each(d3_selection_attr(value, name[value]));
      return this;
    }
    return this.each(d3_selection_attr(name, value));
  };
  function d3_selection_attr(name, value) {
    name = d3.ns.qualify(name);
    function attrNull() {
      this.removeAttribute(name);
    }
    function attrNullNS() {
      this.removeAttributeNS(name.space, name.local);
    }
    function attrConstant() {
      this.setAttribute(name, value);
    }
    function attrConstantNS() {
      this.setAttributeNS(name.space, name.local, value);
    }
    function attrFunction() {
      var x = value.apply(this, arguments);
      if (x == null) this.removeAttribute(name); else this.setAttribute(name, x);
    }
    function attrFunctionNS() {
      var x = value.apply(this, arguments);
      if (x == null) this.removeAttributeNS(name.space, name.local); else this.setAttributeNS(name.space, name.local, x);
    }
    return value == null ? name.local ? attrNullNS : attrNull : typeof value === "function" ? name.local ? attrFunctionNS : attrFunction : name.local ? attrConstantNS : attrConstant;
  }
  function d3_collapse(s) {
    return s.trim().replace(/\s+/g, " ");
  }
  d3_selectionPrototype.classed = function(name, value) {
    if (arguments.length < 2) {
      if (typeof name === "string") {
        var node = this.node(), n = (name = d3_selection_classes(name)).length, i = -1;
        if (value = node.classList) {
          while (++i < n) if (!value.contains(name[i])) return false;
        } else {
          value = node.getAttribute("class");
          while (++i < n) if (!d3_selection_classedRe(name[i]).test(value)) return false;
        }
        return true;
      }
      for (value in name) this.each(d3_selection_classed(value, name[value]));
      return this;
    }
    return this.each(d3_selection_classed(name, value));
  };
  function d3_selection_classedRe(name) {
    return new RegExp("(?:^|\\s+)" + d3.requote(name) + "(?:\\s+|$)", "g");
  }
  function d3_selection_classes(name) {
    return (name + "").trim().split(/^|\s+/);
  }
  function d3_selection_classed(name, value) {
    name = d3_selection_classes(name).map(d3_selection_classedName);
    var n = name.length;
    function classedConstant() {
      var i = -1;
      while (++i < n) name[i](this, value);
    }
    function classedFunction() {
      var i = -1, x = value.apply(this, arguments);
      while (++i < n) name[i](this, x);
    }
    return typeof value === "function" ? classedFunction : classedConstant;
  }
  function d3_selection_classedName(name) {
    var re = d3_selection_classedRe(name);
    return function(node, value) {
      if (c = node.classList) return value ? c.add(name) : c.remove(name);
      var c = node.getAttribute("class") || "";
      if (value) {
        re.lastIndex = 0;
        if (!re.test(c)) node.setAttribute("class", d3_collapse(c + " " + name));
      } else {
        node.setAttribute("class", d3_collapse(c.replace(re, " ")));
      }
    };
  }
  d3_selectionPrototype.style = function(name, value, priority) {
    var n = arguments.length;
    if (n < 3) {
      if (typeof name !== "string") {
        if (n < 2) value = "";
        for (priority in name) this.each(d3_selection_style(priority, name[priority], value));
        return this;
      }
      if (n < 2) {
        var node = this.node();
        return d3_window(node).getComputedStyle(node, null).getPropertyValue(name);
      }
      priority = "";
    }
    return this.each(d3_selection_style(name, value, priority));
  };
  function d3_selection_style(name, value, priority) {
    function styleNull() {
      this.style.removeProperty(name);
    }
    function styleConstant() {
      this.style.setProperty(name, value, priority);
    }
    function styleFunction() {
      var x = value.apply(this, arguments);
      if (x == null) this.style.removeProperty(name); else this.style.setProperty(name, x, priority);
    }
    return value == null ? styleNull : typeof value === "function" ? styleFunction : styleConstant;
  }
  d3_selectionPrototype.property = function(name, value) {
    if (arguments.length < 2) {
      if (typeof name === "string") return this.node()[name];
      for (value in name) this.each(d3_selection_property(value, name[value]));
      return this;
    }
    return this.each(d3_selection_property(name, value));
  };
  function d3_selection_property(name, value) {
    function propertyNull() {
      delete this[name];
    }
    function propertyConstant() {
      this[name] = value;
    }
    function propertyFunction() {
      var x = value.apply(this, arguments);
      if (x == null) delete this[name]; else this[name] = x;
    }
    return value == null ? propertyNull : typeof value === "function" ? propertyFunction : propertyConstant;
  }
  d3_selectionPrototype.text = function(value) {
    return arguments.length ? this.each(typeof value === "function" ? function() {
      var v = value.apply(this, arguments);
      this.textContent = v == null ? "" : v;
    } : value == null ? function() {
      this.textContent = "";
    } : function() {
      this.textContent = value;
    }) : this.node().textContent;
  };
  d3_selectionPrototype.html = function(value) {
    return arguments.length ? this.each(typeof value === "function" ? function() {
      var v = value.apply(this, arguments);
      this.innerHTML = v == null ? "" : v;
    } : value == null ? function() {
      this.innerHTML = "";
    } : function() {
      this.innerHTML = value;
    }) : this.node().innerHTML;
  };
  d3_selectionPrototype.append = function(name) {
    name = d3_selection_creator(name);
    return this.select(function() {
      return this.appendChild(name.apply(this, arguments));
    });
  };
  function d3_selection_creator(name) {
    function create() {
      var document = this.ownerDocument, namespace = this.namespaceURI;
      return namespace ? document.createElementNS(namespace, name) : document.createElement(name);
    }
    function createNS() {
      return this.ownerDocument.createElementNS(name.space, name.local);
    }
    return typeof name === "function" ? name : (name = d3.ns.qualify(name)).local ? createNS : create;
  }
  d3_selectionPrototype.insert = function(name, before) {
    name = d3_selection_creator(name);
    before = d3_selection_selector(before);
    return this.select(function() {
      return this.insertBefore(name.apply(this, arguments), before.apply(this, arguments) || null);
    });
  };
  d3_selectionPrototype.remove = function() {
    return this.each(d3_selectionRemove);
  };
  function d3_selectionRemove() {
    var parent = this.parentNode;
    if (parent) parent.removeChild(this);
  }
  d3_selectionPrototype.data = function(value, key) {
    var i = -1, n = this.length, group, node;
    if (!arguments.length) {
      value = new Array(n = (group = this[0]).length);
      while (++i < n) {
        if (node = group[i]) {
          value[i] = node.__data__;
        }
      }
      return value;
    }
    function bind(group, groupData) {
      var i, n = group.length, m = groupData.length, n0 = Math.min(n, m), updateNodes = new Array(m), enterNodes = new Array(m), exitNodes = new Array(n), node, nodeData;
      if (key) {
        var nodeByKeyValue = new d3_Map(), keyValues = new Array(n), keyValue;
        for (i = -1; ++i < n; ) {
          if (nodeByKeyValue.has(keyValue = key.call(node = group[i], node.__data__, i))) {
            exitNodes[i] = node;
          } else {
            nodeByKeyValue.set(keyValue, node);
          }
          keyValues[i] = keyValue;
        }
        for (i = -1; ++i < m; ) {
          if (!(node = nodeByKeyValue.get(keyValue = key.call(groupData, nodeData = groupData[i], i)))) {
            enterNodes[i] = d3_selection_dataNode(nodeData);
          } else if (node !== true) {
            updateNodes[i] = node;
            node.__data__ = nodeData;
          }
          nodeByKeyValue.set(keyValue, true);
        }
        for (i = -1; ++i < n; ) {
          if (nodeByKeyValue.get(keyValues[i]) !== true) {
            exitNodes[i] = group[i];
          }
        }
      } else {
        for (i = -1; ++i < n0; ) {
          node = group[i];
          nodeData = groupData[i];
          if (node) {
            node.__data__ = nodeData;
            updateNodes[i] = node;
          } else {
            enterNodes[i] = d3_selection_dataNode(nodeData);
          }
        }
        for (;i < m; ++i) {
          enterNodes[i] = d3_selection_dataNode(groupData[i]);
        }
        for (;i < n; ++i) {
          exitNodes[i] = group[i];
        }
      }
      enterNodes.update = updateNodes;
      enterNodes.parentNode = updateNodes.parentNode = exitNodes.parentNode = group.parentNode;
      enter.push(enterNodes);
      update.push(updateNodes);
      exit.push(exitNodes);
    }
    var enter = d3_selection_enter([]), update = d3_selection([]), exit = d3_selection([]);
    if (typeof value === "function") {
      while (++i < n) {
        bind(group = this[i], value.call(group, group.parentNode.__data__, i));
      }
    } else {
      while (++i < n) {
        bind(group = this[i], value);
      }
    }
    update.enter = function() {
      return enter;
    };
    update.exit = function() {
      return exit;
    };
    return update;
  };
  function d3_selection_dataNode(data) {
    return {
      __data__: data
    };
  }
  d3_selectionPrototype.datum = function(value) {
    return arguments.length ? this.property("__data__", value) : this.property("__data__");
  };
  d3_selectionPrototype.filter = function(filter) {
    var subgroups = [], subgroup, group, node;
    if (typeof filter !== "function") filter = d3_selection_filter(filter);
    for (var j = 0, m = this.length; j < m; j++) {
      subgroups.push(subgroup = []);
      subgroup.parentNode = (group = this[j]).parentNode;
      for (var i = 0, n = group.length; i < n; i++) {
        if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {
          subgroup.push(node);
        }
      }
    }
    return d3_selection(subgroups);
  };
  function d3_selection_filter(selector) {
    return function() {
      return d3_selectMatches(this, selector);
    };
  }
  d3_selectionPrototype.order = function() {
    for (var j = -1, m = this.length; ++j < m; ) {
      for (var group = this[j], i = group.length - 1, next = group[i], node; --i >= 0; ) {
        if (node = group[i]) {
          if (next && next !== node.nextSibling) next.parentNode.insertBefore(node, next);
          next = node;
        }
      }
    }
    return this;
  };
  d3_selectionPrototype.sort = function(comparator) {
    comparator = d3_selection_sortComparator.apply(this, arguments);
    for (var j = -1, m = this.length; ++j < m; ) this[j].sort(comparator);
    return this.order();
  };
  function d3_selection_sortComparator(comparator) {
    if (!arguments.length) comparator = d3_ascending;
    return function(a, b) {
      return a && b ? comparator(a.__data__, b.__data__) : !a - !b;
    };
  }
  d3_selectionPrototype.each = function(callback) {
    return d3_selection_each(this, function(node, i, j) {
      callback.call(node, node.__data__, i, j);
    });
  };
  function d3_selection_each(groups, callback) {
    for (var j = 0, m = groups.length; j < m; j++) {
      for (var group = groups[j], i = 0, n = group.length, node; i < n; i++) {
        if (node = group[i]) callback(node, i, j);
      }
    }
    return groups;
  }
  d3_selectionPrototype.call = function(callback) {
    var args = d3_array(arguments);
    callback.apply(args[0] = this, args);
    return this;
  };
  d3_selectionPrototype.empty = function() {
    return !this.node();
  };
  d3_selectionPrototype.node = function() {
    for (var j = 0, m = this.length; j < m; j++) {
      for (var group = this[j], i = 0, n = group.length; i < n; i++) {
        var node = group[i];
        if (node) return node;
      }
    }
    return null;
  };
  d3_selectionPrototype.size = function() {
    var n = 0;
    d3_selection_each(this, function() {
      ++n;
    });
    return n;
  };
  function d3_selection_enter(selection) {
    d3_subclass(selection, d3_selection_enterPrototype);
    return selection;
  }
  var d3_selection_enterPrototype = [];
  d3.selection.enter = d3_selection_enter;
  d3.selection.enter.prototype = d3_selection_enterPrototype;
  d3_selection_enterPrototype.append = d3_selectionPrototype.append;
  d3_selection_enterPrototype.empty = d3_selectionPrototype.empty;
  d3_selection_enterPrototype.node = d3_selectionPrototype.node;
  d3_selection_enterPrototype.call = d3_selectionPrototype.call;
  d3_selection_enterPrototype.size = d3_selectionPrototype.size;
  d3_selection_enterPrototype.select = function(selector) {
    var subgroups = [], subgroup, subnode, upgroup, group, node;
    for (var j = -1, m = this.length; ++j < m; ) {
      upgroup = (group = this[j]).update;
      subgroups.push(subgroup = []);
      subgroup.parentNode = group.parentNode;
      for (var i = -1, n = group.length; ++i < n; ) {
        if (node = group[i]) {
          subgroup.push(upgroup[i] = subnode = selector.call(group.parentNode, node.__data__, i, j));
          subnode.__data__ = node.__data__;
        } else {
          subgroup.push(null);
        }
      }
    }
    return d3_selection(subgroups);
  };
  d3_selection_enterPrototype.insert = function(name, before) {
    if (arguments.length < 2) before = d3_selection_enterInsertBefore(this);
    return d3_selectionPrototype.insert.call(this, name, before);
  };
  function d3_selection_enterInsertBefore(enter) {
    var i0, j0;
    return function(d, i, j) {
      var group = enter[j].update, n = group.length, node;
      if (j != j0) j0 = j, i0 = 0;
      if (i >= i0) i0 = i + 1;
      while (!(node = group[i0]) && ++i0 < n) ;
      return node;
    };
  }
  d3.select = function(node) {
    var group;
    if (typeof node === "string") {
      group = [ d3_select(node, d3_document) ];
      group.parentNode = d3_document.documentElement;
    } else {
      group = [ node ];
      group.parentNode = d3_documentElement(node);
    }
    return d3_selection([ group ]);
  };
  d3.selectAll = function(nodes) {
    var group;
    if (typeof nodes === "string") {
      group = d3_array(d3_selectAll(nodes, d3_document));
      group.parentNode = d3_document.documentElement;
    } else {
      group = nodes;
      group.parentNode = null;
    }
    return d3_selection([ group ]);
  };
  d3_selectionPrototype.on = function(type, listener, capture) {
    var n = arguments.length;
    if (n < 3) {
      if (typeof type !== "string") {
        if (n < 2) listener = false;
        for (capture in type) this.each(d3_selection_on(capture, type[capture], listener));
        return this;
      }
      if (n < 2) return (n = this.node()["__on" + type]) && n._;
      capture = false;
    }
    return this.each(d3_selection_on(type, listener, capture));
  };
  function d3_selection_on(type, listener, capture) {
    var name = "__on" + type, i = type.indexOf("."), wrap = d3_selection_onListener;
    if (i > 0) type = type.slice(0, i);
    var filter = d3_selection_onFilters.get(type);
    if (filter) type = filter, wrap = d3_selection_onFilter;
    function onRemove() {
      var l = this[name];
      if (l) {
        this.removeEventListener(type, l, l.$);
        delete this[name];
      }
    }
    function onAdd() {
      var l = wrap(listener, d3_array(arguments));
      onRemove.call(this);
      this.addEventListener(type, this[name] = l, l.$ = capture);
      l._ = listener;
    }
    function removeAll() {
      var re = new RegExp("^__on([^.]+)" + d3.requote(type) + "$"), match;
      for (var name in this) {
        if (match = name.match(re)) {
          var l = this[name];
          this.removeEventListener(match[1], l, l.$);
          delete this[name];
        }
      }
    }
    return i ? listener ? onAdd : onRemove : listener ? d3_noop : removeAll;
  }
  var d3_selection_onFilters = d3.map({
    mouseenter: "mouseover",
    mouseleave: "mouseout"
  });
  if (d3_document) {
    d3_selection_onFilters.forEach(function(k) {
      if ("on" + k in d3_document) d3_selection_onFilters.remove(k);
    });
  }
  function d3_selection_onListener(listener, argumentz) {
    return function(e) {
      var o = d3.event;
      d3.event = e;
      argumentz[0] = this.__data__;
      try {
        listener.apply(this, argumentz);
      } finally {
        d3.event = o;
      }
    };
  }
  function d3_selection_onFilter(listener, argumentz) {
    var l = d3_selection_onListener(listener, argumentz);
    return function(e) {
      var target = this, related = e.relatedTarget;
      if (!related || related !== target && !(related.compareDocumentPosition(target) & 8)) {
        l.call(target, e);
      }
    };
  }
  var d3_event_dragSelect, d3_event_dragId = 0;
  function d3_event_dragSuppress(node) {
    var name = ".dragsuppress-" + ++d3_event_dragId, click = "click" + name, w = d3.select(d3_window(node)).on("touchmove" + name, d3_eventPreventDefault).on("dragstart" + name, d3_eventPreventDefault).on("selectstart" + name, d3_eventPreventDefault);
    if (d3_event_dragSelect == null) {
      d3_event_dragSelect = "onselectstart" in node ? false : d3_vendorSymbol(node.style, "userSelect");
    }
    if (d3_event_dragSelect) {
      var style = d3_documentElement(node).style, select = style[d3_event_dragSelect];
      style[d3_event_dragSelect] = "none";
    }
    return function(suppressClick) {
      w.on(name, null);
      if (d3_event_dragSelect) style[d3_event_dragSelect] = select;
      if (suppressClick) {
        var off = function() {
          w.on(click, null);
        };
        w.on(click, function() {
          d3_eventPreventDefault();
          off();
        }, true);
        setTimeout(off, 0);
      }
    };
  }
  d3.mouse = function(container) {
    return d3_mousePoint(container, d3_eventSource());
  };
  var d3_mouse_bug44083 = this.navigator && /WebKit/.test(this.navigator.userAgent) ? -1 : 0;
  function d3_mousePoint(container, e) {
    if (e.changedTouches) e = e.changedTouches[0];
    var svg = container.ownerSVGElement || container;
    if (svg.createSVGPoint) {
      var point = svg.createSVGPoint();
      if (d3_mouse_bug44083 < 0) {
        var window = d3_window(container);
        if (window.scrollX || window.scrollY) {
          svg = d3.select("body").append("svg").style({
            position: "absolute",
            top: 0,
            left: 0,
            margin: 0,
            padding: 0,
            border: "none"
          }, "important");
          var ctm = svg[0][0].getScreenCTM();
          d3_mouse_bug44083 = !(ctm.f || ctm.e);
          svg.remove();
        }
      }
      if (d3_mouse_bug44083) point.x = e.pageX, point.y = e.pageY; else point.x = e.clientX, 
      point.y = e.clientY;
      point = point.matrixTransform(container.getScreenCTM().inverse());
      return [ point.x, point.y ];
    }
    var rect = container.getBoundingClientRect();
    return [ e.clientX - rect.left - container.clientLeft, e.clientY - rect.top - container.clientTop ];
  }
  d3.touch = function(container, touches, identifier) {
    if (arguments.length < 3) identifier = touches, touches = d3_eventSource().changedTouches;
    if (touches) for (var i = 0, n = touches.length, touch; i < n; ++i) {
      if ((touch = touches[i]).identifier === identifier) {
        return d3_mousePoint(container, touch);
      }
    }
  };
  d3.behavior.drag = function() {
    var event = d3_eventDispatch(drag, "drag", "dragstart", "dragend"), origin = null, mousedown = dragstart(d3_noop, d3.mouse, d3_window, "mousemove", "mouseup"), touchstart = dragstart(d3_behavior_dragTouchId, d3.touch, d3_identity, "touchmove", "touchend");
    function drag() {
      this.on("mousedown.drag", mousedown).on("touchstart.drag", touchstart);
    }
    function dragstart(id, position, subject, move, end) {
      return function() {
        var that = this, target = d3.event.target, parent = that.parentNode, dispatch = event.of(that, arguments), dragged = 0, dragId = id(), dragName = ".drag" + (dragId == null ? "" : "-" + dragId), dragOffset, dragSubject = d3.select(subject(target)).on(move + dragName, moved).on(end + dragName, ended), dragRestore = d3_event_dragSuppress(target), position0 = position(parent, dragId);
        if (origin) {
          dragOffset = origin.apply(that, arguments);
          dragOffset = [ dragOffset.x - position0[0], dragOffset.y - position0[1] ];
        } else {
          dragOffset = [ 0, 0 ];
        }
        dispatch({
          type: "dragstart"
        });
        function moved() {
          var position1 = position(parent, dragId), dx, dy;
          if (!position1) return;
          dx = position1[0] - position0[0];
          dy = position1[1] - position0[1];
          dragged |= dx | dy;
          position0 = position1;
          dispatch({
            type: "drag",
            x: position1[0] + dragOffset[0],
            y: position1[1] + dragOffset[1],
            dx: dx,
            dy: dy
          });
        }
        function ended() {
          if (!position(parent, dragId)) return;
          dragSubject.on(move + dragName, null).on(end + dragName, null);
          dragRestore(dragged && d3.event.target === target);
          dispatch({
            type: "dragend"
          });
        }
      };
    }
    drag.origin = function(x) {
      if (!arguments.length) return origin;
      origin = x;
      return drag;
    };
    return d3.rebind(drag, event, "on");
  };
  function d3_behavior_dragTouchId() {
    return d3.event.changedTouches[0].identifier;
  }
  d3.touches = function(container, touches) {
    if (arguments.length < 2) touches = d3_eventSource().touches;
    return touches ? d3_array(touches).map(function(touch) {
      var point = d3_mousePoint(container, touch);
      point.identifier = touch.identifier;
      return point;
    }) : [];
  };
  var ε = 1e-6, ε2 = ε * ε, π = Math.PI, τ = 2 * π, τε = τ - ε, halfπ = π / 2, d3_radians = π / 180, d3_degrees = 180 / π;
  function d3_sgn(x) {
    return x > 0 ? 1 : x < 0 ? -1 : 0;
  }
  function d3_cross2d(a, b, c) {
    return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]);
  }
  function d3_acos(x) {
    return x > 1 ? 0 : x < -1 ? π : Math.acos(x);
  }
  function d3_asin(x) {
    return x > 1 ? halfπ : x < -1 ? -halfπ : Math.asin(x);
  }
  function d3_sinh(x) {
    return ((x = Math.exp(x)) - 1 / x) / 2;
  }
  function d3_cosh(x) {
    return ((x = Math.exp(x)) + 1 / x) / 2;
  }
  function d3_tanh(x) {
    return ((x = Math.exp(2 * x)) - 1) / (x + 1);
  }
  function d3_haversin(x) {
    return (x = Math.sin(x / 2)) * x;
  }
  var ρ = Math.SQRT2, ρ2 = 2, ρ4 = 4;
  d3.interpolateZoom = function(p0, p1) {
    var ux0 = p0[0], uy0 = p0[1], w0 = p0[2], ux1 = p1[0], uy1 = p1[1], w1 = p1[2];
    var dx = ux1 - ux0, dy = uy1 - uy0, d2 = dx * dx + dy * dy, d1 = Math.sqrt(d2), b0 = (w1 * w1 - w0 * w0 + ρ4 * d2) / (2 * w0 * ρ2 * d1), b1 = (w1 * w1 - w0 * w0 - ρ4 * d2) / (2 * w1 * ρ2 * d1), r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0), r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1), dr = r1 - r0, S = (dr || Math.log(w1 / w0)) / ρ;
    function interpolate(t) {
      var s = t * S;
      if (dr) {
        var coshr0 = d3_cosh(r0), u = w0 / (ρ2 * d1) * (coshr0 * d3_tanh(ρ * s + r0) - d3_sinh(r0));
        return [ ux0 + u * dx, uy0 + u * dy, w0 * coshr0 / d3_cosh(ρ * s + r0) ];
      }
      return [ ux0 + t * dx, uy0 + t * dy, w0 * Math.exp(ρ * s) ];
    }
    interpolate.duration = S * 1e3;
    return interpolate;
  };
  d3.behavior.zoom = function() {
    var view = {
      x: 0,
      y: 0,
      k: 1
    }, translate0, center0, center, size = [ 960, 500 ], scaleExtent = d3_behavior_zoomInfinity, duration = 250, zooming = 0, mousedown = "mousedown.zoom", mousemove = "mousemove.zoom", mouseup = "mouseup.zoom", mousewheelTimer, touchstart = "touchstart.zoom", touchtime, event = d3_eventDispatch(zoom, "zoomstart", "zoom", "zoomend"), x0, x1, y0, y1;
    if (!d3_behavior_zoomWheel) {
      d3_behavior_zoomWheel = "onwheel" in d3_document ? (d3_behavior_zoomDelta = function() {
        return -d3.event.deltaY * (d3.event.deltaMode ? 120 : 1);
      }, "wheel") : "onmousewheel" in d3_document ? (d3_behavior_zoomDelta = function() {
        return d3.event.wheelDelta;
      }, "mousewheel") : (d3_behavior_zoomDelta = function() {
        return -d3.event.detail;
      }, "MozMousePixelScroll");
    }
    function zoom(g) {
      g.on(mousedown, mousedowned).on(d3_behavior_zoomWheel + ".zoom", mousewheeled).on("dblclick.zoom", dblclicked).on(touchstart, touchstarted);
    }
    zoom.event = function(g) {
      g.each(function() {
        var dispatch = event.of(this, arguments), view1 = view;
        if (d3_transitionInheritId) {
          d3.select(this).transition().each("start.zoom", function() {
            view = this.__chart__ || {
              x: 0,
              y: 0,
              k: 1
            };
            zoomstarted(dispatch);
          }).tween("zoom:zoom", function() {
            var dx = size[0], dy = size[1], cx = center0 ? center0[0] : dx / 2, cy = center0 ? center0[1] : dy / 2, i = d3.interpolateZoom([ (cx - view.x) / view.k, (cy - view.y) / view.k, dx / view.k ], [ (cx - view1.x) / view1.k, (cy - view1.y) / view1.k, dx / view1.k ]);
            return function(t) {
              var l = i(t), k = dx / l[2];
              this.__chart__ = view = {
                x: cx - l[0] * k,
                y: cy - l[1] * k,
                k: k
              };
              zoomed(dispatch);
            };
          }).each("interrupt.zoom", function() {
            zoomended(dispatch);
          }).each("end.zoom", function() {
            zoomended(dispatch);
          });
        } else {
          this.__chart__ = view;
          zoomstarted(dispatch);
          zoomed(dispatch);
          zoomended(dispatch);
        }
      });
    };
    zoom.translate = function(_) {
      if (!arguments.length) return [ view.x, view.y ];
      view = {
        x: +_[0],
        y: +_[1],
        k: view.k
      };
      rescale();
      return zoom;
    };
    zoom.scale = function(_) {
      if (!arguments.length) return view.k;
      view = {
        x: view.x,
        y: view.y,
        k: +_
      };
      rescale();
      return zoom;
    };
    zoom.scaleExtent = function(_) {
      if (!arguments.length) return scaleExtent;
      scaleExtent = _ == null ? d3_behavior_zoomInfinity : [ +_[0], +_[1] ];
      return zoom;
    };
    zoom.center = function(_) {
      if (!arguments.length) return center;
      center = _ && [ +_[0], +_[1] ];
      return zoom;
    };
    zoom.size = function(_) {
      if (!arguments.length) return size;
      size = _ && [ +_[0], +_[1] ];
      return zoom;
    };
    zoom.duration = function(_) {
      if (!arguments.length) return duration;
      duration = +_;
      return zoom;
    };
    zoom.x = function(z) {
      if (!arguments.length) return x1;
      x1 = z;
      x0 = z.copy();
      view = {
        x: 0,
        y: 0,
        k: 1
      };
      return zoom;
    };
    zoom.y = function(z) {
      if (!arguments.length) return y1;
      y1 = z;
      y0 = z.copy();
      view = {
        x: 0,
        y: 0,
        k: 1
      };
      return zoom;
    };
    function location(p) {
      return [ (p[0] - view.x) / view.k, (p[1] - view.y) / view.k ];
    }
    function point(l) {
      return [ l[0] * view.k + view.x, l[1] * view.k + view.y ];
    }
    function scaleTo(s) {
      view.k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], s));
    }
    function translateTo(p, l) {
      l = point(l);
      view.x += p[0] - l[0];
      view.y += p[1] - l[1];
    }
    function zoomTo(that, p, l, k) {
      that.__chart__ = {
        x: view.x,
        y: view.y,
        k: view.k
      };
      scaleTo(Math.pow(2, k));
      translateTo(center0 = p, l);
      that = d3.select(that);
      if (duration > 0) that = that.transition().duration(duration);
      that.call(zoom.event);
    }
    function rescale() {
      if (x1) x1.domain(x0.range().map(function(x) {
        return (x - view.x) / view.k;
      }).map(x0.invert));
      if (y1) y1.domain(y0.range().map(function(y) {
        return (y - view.y) / view.k;
      }).map(y0.invert));
    }
    function zoomstarted(dispatch) {
      if (!zooming++) dispatch({
        type: "zoomstart"
      });
    }
    function zoomed(dispatch) {
      rescale();
      dispatch({
        type: "zoom",
        scale: view.k,
        translate: [ view.x, view.y ]
      });
    }
    function zoomended(dispatch) {
      if (!--zooming) dispatch({
        type: "zoomend"
      }), center0 = null;
    }
    function mousedowned() {
      var that = this, target = d3.event.target, dispatch = event.of(that, arguments), dragged = 0, subject = d3.select(d3_window(that)).on(mousemove, moved).on(mouseup, ended), location0 = location(d3.mouse(that)), dragRestore = d3_event_dragSuppress(that);
      d3_selection_interrupt.call(that);
      zoomstarted(dispatch);
      function moved() {
        dragged = 1;
        translateTo(d3.mouse(that), location0);
        zoomed(dispatch);
      }
      function ended() {
        subject.on(mousemove, null).on(mouseup, null);
        dragRestore(dragged && d3.event.target === target);
        zoomended(dispatch);
      }
    }
    function touchstarted() {
      var that = this, dispatch = event.of(that, arguments), locations0 = {}, distance0 = 0, scale0, zoomName = ".zoom-" + d3.event.changedTouches[0].identifier, touchmove = "touchmove" + zoomName, touchend = "touchend" + zoomName, targets = [], subject = d3.select(that), dragRestore = d3_event_dragSuppress(that);
      started();
      zoomstarted(dispatch);
      subject.on(mousedown, null).on(touchstart, started);
      function relocate() {
        var touches = d3.touches(that);
        scale0 = view.k;
        touches.forEach(function(t) {
          if (t.identifier in locations0) locations0[t.identifier] = location(t);
        });
        return touches;
      }
      function started() {
        var target = d3.event.target;
        d3.select(target).on(touchmove, moved).on(touchend, ended);
        targets.push(target);
        var changed = d3.event.changedTouches;
        for (var i = 0, n = changed.length; i < n; ++i) {
          locations0[changed[i].identifier] = null;
        }
        var touches = relocate(), now = Date.now();
        if (touches.length === 1) {
          if (now - touchtime < 500) {
            var p = touches[0];
            zoomTo(that, p, locations0[p.identifier], Math.floor(Math.log(view.k) / Math.LN2) + 1);
            d3_eventPreventDefault();
          }
          touchtime = now;
        } else if (touches.length > 1) {
          var p = touches[0], q = touches[1], dx = p[0] - q[0], dy = p[1] - q[1];
          distance0 = dx * dx + dy * dy;
        }
      }
      function moved() {
        var touches = d3.touches(that), p0, l0, p1, l1;
        d3_selection_interrupt.call(that);
        for (var i = 0, n = touches.length; i < n; ++i, l1 = null) {
          p1 = touches[i];
          if (l1 = locations0[p1.identifier]) {
            if (l0) break;
            p0 = p1, l0 = l1;
          }
        }
        if (l1) {
          var distance1 = (distance1 = p1[0] - p0[0]) * distance1 + (distance1 = p1[1] - p0[1]) * distance1, scale1 = distance0 && Math.sqrt(distance1 / distance0);
          p0 = [ (p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2 ];
          l0 = [ (l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2 ];
          scaleTo(scale1 * scale0);
        }
        touchtime = null;
        translateTo(p0, l0);
        zoomed(dispatch);
      }
      function ended() {
        if (d3.event.touches.length) {
          var changed = d3.event.changedTouches;
          for (var i = 0, n = changed.length; i < n; ++i) {
            delete locations0[changed[i].identifier];
          }
          for (var identifier in locations0) {
            return void relocate();
          }
        }
        d3.selectAll(targets).on(zoomName, null);
        subject.on(mousedown, mousedowned).on(touchstart, touchstarted);
        dragRestore();
        zoomended(dispatch);
      }
    }
    function mousewheeled() {
      var dispatch = event.of(this, arguments);
      if (mousewheelTimer) clearTimeout(mousewheelTimer); else d3_selection_interrupt.call(this), 
      translate0 = location(center0 = center || d3.mouse(this)), zoomstarted(dispatch);
      mousewheelTimer = setTimeout(function() {
        mousewheelTimer = null;
        zoomended(dispatch);
      }, 50);
      d3_eventPreventDefault();
      scaleTo(Math.pow(2, d3_behavior_zoomDelta() * .002) * view.k);
      translateTo(center0, translate0);
      zoomed(dispatch);
    }
    function dblclicked() {
      var p = d3.mouse(this), k = Math.log(view.k) / Math.LN2;
      zoomTo(this, p, location(p), d3.event.shiftKey ? Math.ceil(k) - 1 : Math.floor(k) + 1);
    }
    return d3.rebind(zoom, event, "on");
  };
  var d3_behavior_zoomInfinity = [ 0, Infinity ], d3_behavior_zoomDelta, d3_behavior_zoomWheel;
  d3.color = d3_color;
  function d3_color() {}
  d3_color.prototype.toString = function() {
    return this.rgb() + "";
  };
  d3.hsl = d3_hsl;
  function d3_hsl(h, s, l) {
    return this instanceof d3_hsl ? void (this.h = +h, this.s = +s, this.l = +l) : arguments.length < 2 ? h instanceof d3_hsl ? new d3_hsl(h.h, h.s, h.l) : d3_rgb_parse("" + h, d3_rgb_hsl, d3_hsl) : new d3_hsl(h, s, l);
  }
  var d3_hslPrototype = d3_hsl.prototype = new d3_color();
  d3_hslPrototype.brighter = function(k) {
    k = Math.pow(.7, arguments.length ? k : 1);
    return new d3_hsl(this.h, this.s, this.l / k);
  };
  d3_hslPrototype.darker = function(k) {
    k = Math.pow(.7, arguments.length ? k : 1);
    return new d3_hsl(this.h, this.s, k * this.l);
  };
  d3_hslPrototype.rgb = function() {
    return d3_hsl_rgb(this.h, this.s, this.l);
  };
  function d3_hsl_rgb(h, s, l) {
    var m1, m2;
    h = isNaN(h) ? 0 : (h %= 360) < 0 ? h + 360 : h;
    s = isNaN(s) ? 0 : s < 0 ? 0 : s > 1 ? 1 : s;
    l = l < 0 ? 0 : l > 1 ? 1 : l;
    m2 = l <= .5 ? l * (1 + s) : l + s - l * s;
    m1 = 2 * l - m2;
    function v(h) {
      if (h > 360) h -= 360; else if (h < 0) h += 360;
      if (h < 60) return m1 + (m2 - m1) * h / 60;
      if (h < 180) return m2;
      if (h < 240) return m1 + (m2 - m1) * (240 - h) / 60;
      return m1;
    }
    function vv(h) {
      return Math.round(v(h) * 255);
    }
    return new d3_rgb(vv(h + 120), vv(h), vv(h - 120));
  }
  d3.hcl = d3_hcl;
  function d3_hcl(h, c, l) {
    return this instanceof d3_hcl ? void (this.h = +h, this.c = +c, this.l = +l) : arguments.length < 2 ? h instanceof d3_hcl ? new d3_hcl(h.h, h.c, h.l) : h instanceof d3_lab ? d3_lab_hcl(h.l, h.a, h.b) : d3_lab_hcl((h = d3_rgb_lab((h = d3.rgb(h)).r, h.g, h.b)).l, h.a, h.b) : new d3_hcl(h, c, l);
  }
  var d3_hclPrototype = d3_hcl.prototype = new d3_color();
  d3_hclPrototype.brighter = function(k) {
    return new d3_hcl(this.h, this.c, Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)));
  };
  d3_hclPrototype.darker = function(k) {
    return new d3_hcl(this.h, this.c, Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)));
  };
  d3_hclPrototype.rgb = function() {
    return d3_hcl_lab(this.h, this.c, this.l).rgb();
  };
  function d3_hcl_lab(h, c, l) {
    if (isNaN(h)) h = 0;
    if (isNaN(c)) c = 0;
    return new d3_lab(l, Math.cos(h *= d3_radians) * c, Math.sin(h) * c);
  }
  d3.lab = d3_lab;
  function d3_lab(l, a, b) {
    return this instanceof d3_lab ? void (this.l = +l, this.a = +a, this.b = +b) : arguments.length < 2 ? l instanceof d3_lab ? new d3_lab(l.l, l.a, l.b) : l instanceof d3_hcl ? d3_hcl_lab(l.h, l.c, l.l) : d3_rgb_lab((l = d3_rgb(l)).r, l.g, l.b) : new d3_lab(l, a, b);
  }
  var d3_lab_K = 18;
  var d3_lab_X = .95047, d3_lab_Y = 1, d3_lab_Z = 1.08883;
  var d3_labPrototype = d3_lab.prototype = new d3_color();
  d3_labPrototype.brighter = function(k) {
    return new d3_lab(Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);
  };
  d3_labPrototype.darker = function(k) {
    return new d3_lab(Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);
  };
  d3_labPrototype.rgb = function() {
    return d3_lab_rgb(this.l, this.a, this.b);
  };
  function d3_lab_rgb(l, a, b) {
    var y = (l + 16) / 116, x = y + a / 500, z = y - b / 200;
    x = d3_lab_xyz(x) * d3_lab_X;
    y = d3_lab_xyz(y) * d3_lab_Y;
    z = d3_lab_xyz(z) * d3_lab_Z;
    return new d3_rgb(d3_xyz_rgb(3.2404542 * x - 1.5371385 * y - .4985314 * z), d3_xyz_rgb(-.969266 * x + 1.8760108 * y + .041556 * z), d3_xyz_rgb(.0556434 * x - .2040259 * y + 1.0572252 * z));
  }
  function d3_lab_hcl(l, a, b) {
    return l > 0 ? new d3_hcl(Math.atan2(b, a) * d3_degrees, Math.sqrt(a * a + b * b), l) : new d3_hcl(NaN, NaN, l);
  }
  function d3_lab_xyz(x) {
    return x > .206893034 ? x * x * x : (x - 4 / 29) / 7.787037;
  }
  function d3_xyz_lab(x) {
    return x > .008856 ? Math.pow(x, 1 / 3) : 7.787037 * x + 4 / 29;
  }
  function d3_xyz_rgb(r) {
    return Math.round(255 * (r <= .00304 ? 12.92 * r : 1.055 * Math.pow(r, 1 / 2.4) - .055));
  }
  d3.rgb = d3_rgb;
  function d3_rgb(r, g, b) {
    return this instanceof d3_rgb ? void (this.r = ~~r, this.g = ~~g, this.b = ~~b) : arguments.length < 2 ? r instanceof d3_rgb ? new d3_rgb(r.r, r.g, r.b) : d3_rgb_parse("" + r, d3_rgb, d3_hsl_rgb) : new d3_rgb(r, g, b);
  }
  function d3_rgbNumber(value) {
    return new d3_rgb(value >> 16, value >> 8 & 255, value & 255);
  }
  function d3_rgbString(value) {
    return d3_rgbNumber(value) + "";
  }
  var d3_rgbPrototype = d3_rgb.prototype = new d3_color();
  d3_rgbPrototype.brighter = function(k) {
    k = Math.pow(.7, arguments.length ? k : 1);
    var r = this.r, g = this.g, b = this.b, i = 30;
    if (!r && !g && !b) return new d3_rgb(i, i, i);
    if (r && r < i) r = i;
    if (g && g < i) g = i;
    if (b && b < i) b = i;
    return new d3_rgb(Math.min(255, r / k), Math.min(255, g / k), Math.min(255, b / k));
  };
  d3_rgbPrototype.darker = function(k) {
    k = Math.pow(.7, arguments.length ? k : 1);
    return new d3_rgb(k * this.r, k * this.g, k * this.b);
  };
  d3_rgbPrototype.hsl = function() {
    return d3_rgb_hsl(this.r, this.g, this.b);
  };
  d3_rgbPrototype.toString = function() {
    return "#" + d3_rgb_hex(this.r) + d3_rgb_hex(this.g) + d3_rgb_hex(this.b);
  };
  function d3_rgb_hex(v) {
    return v < 16 ? "0" + Math.max(0, v).toString(16) : Math.min(255, v).toString(16);
  }
  function d3_rgb_parse(format, rgb, hsl) {
    format = format.toLowerCase();
    var r = 0, g = 0, b = 0, m1, m2, color;
    m1 = /([a-z]+)\((.*)\)/.exec(format);
    if (m1) {
      m2 = m1[2].split(",");
      switch (m1[1]) {
       case "hsl":
        {
          return hsl(parseFloat(m2[0]), parseFloat(m2[1]) / 100, parseFloat(m2[2]) / 100);
        }

       case "rgb":
        {
          return rgb(d3_rgb_parseNumber(m2[0]), d3_rgb_parseNumber(m2[1]), d3_rgb_parseNumber(m2[2]));
        }
      }
    }
    if (color = d3_rgb_names.get(format)) {
      return rgb(color.r, color.g, color.b);
    }
    if (format != null && format.charAt(0) === "#" && !isNaN(color = parseInt(format.slice(1), 16))) {
      if (format.length === 4) {
        r = (color & 3840) >> 4;
        r = r >> 4 | r;
        g = color & 240;
        g = g >> 4 | g;
        b = color & 15;
        b = b << 4 | b;
      } else if (format.length === 7) {
        r = (color & 16711680) >> 16;
        g = (color & 65280) >> 8;
        b = color & 255;
      }
    }
    return rgb(r, g, b);
  }
  function d3_rgb_hsl(r, g, b) {
    var min = Math.min(r /= 255, g /= 255, b /= 255), max = Math.max(r, g, b), d = max - min, h, s, l = (max + min) / 2;
    if (d) {
      s = l < .5 ? d / (max + min) : d / (2 - max - min);
      if (r == max) h = (g - b) / d + (g < b ? 6 : 0); else if (g == max) h = (b - r) / d + 2; else h = (r - g) / d + 4;
      h *= 60;
    } else {
      h = NaN;
      s = l > 0 && l < 1 ? 0 : h;
    }
    return new d3_hsl(h, s, l);
  }
  function d3_rgb_lab(r, g, b) {
    r = d3_rgb_xyz(r);
    g = d3_rgb_xyz(g);
    b = d3_rgb_xyz(b);
    var x = d3_xyz_lab((.4124564 * r + .3575761 * g + .1804375 * b) / d3_lab_X), y = d3_xyz_lab((.2126729 * r + .7151522 * g + .072175 * b) / d3_lab_Y), z = d3_xyz_lab((.0193339 * r + .119192 * g + .9503041 * b) / d3_lab_Z);
    return d3_lab(116 * y - 16, 500 * (x - y), 200 * (y - z));
  }
  function d3_rgb_xyz(r) {
    return (r /= 255) <= .04045 ? r / 12.92 : Math.pow((r + .055) / 1.055, 2.4);
  }
  function d3_rgb_parseNumber(c) {
    var f = parseFloat(c);
    return c.charAt(c.length - 1) === "%" ? Math.round(f * 2.55) : f;
  }
  var d3_rgb_names = d3.map({
    aliceblue: 15792383,
    antiquewhite: 16444375,
    aqua: 65535,
    aquamarine: 8388564,
    azure: 15794175,
    beige: 16119260,
    bisque: 16770244,
    black: 0,
    blanchedalmond: 16772045,
    blue: 255,
    blueviolet: 9055202,
    brown: 10824234,
    burlywood: 14596231,
    cadetblue: 6266528,
    chartreuse: 8388352,
    chocolate: 13789470,
    coral: 16744272,
    cornflowerblue: 6591981,
    cornsilk: 16775388,
    crimson: 14423100,
    cyan: 65535,
    darkblue: 139,
    darkcyan: 35723,
    darkgoldenrod: 12092939,
    darkgray: 11119017,
    darkgreen: 25600,
    darkgrey: 11119017,
    darkkhaki: 12433259,
    darkmagenta: 9109643,
    darkolivegreen: 5597999,
    darkorange: 16747520,
    darkorchid: 10040012,
    darkred: 9109504,
    darksalmon: 15308410,
    darkseagreen: 9419919,
    darkslateblue: 4734347,
    darkslategray: 3100495,
    darkslategrey: 3100495,
    darkturquoise: 52945,
    darkviolet: 9699539,
    deeppink: 16716947,
    deepskyblue: 49151,
    dimgray: 6908265,
    dimgrey: 6908265,
    dodgerblue: 2003199,
    firebrick: 11674146,
    floralwhite: 16775920,
    forestgreen: 2263842,
    fuchsia: 16711935,
    gainsboro: 14474460,
    ghostwhite: 16316671,
    gold: 16766720,
    goldenrod: 14329120,
    gray: 8421504,
    green: 32768,
    greenyellow: 11403055,
    grey: 8421504,
    honeydew: 15794160,
    hotpink: 16738740,
    indianred: 13458524,
    indigo: 4915330,
    ivory: 16777200,
    khaki: 15787660,
    lavender: 15132410,
    lavenderblush: 16773365,
    lawngreen: 8190976,
    lemonchiffon: 16775885,
    lightblue: 11393254,
    lightcoral: 15761536,
    lightcyan: 14745599,
    lightgoldenrodyellow: 16448210,
    lightgray: 13882323,
    lightgreen: 9498256,
    lightgrey: 13882323,
    lightpink: 16758465,
    lightsalmon: 16752762,
    lightseagreen: 2142890,
    lightskyblue: 8900346,
    lightslategray: 7833753,
    lightslategrey: 7833753,
    lightsteelblue: 11584734,
    lightyellow: 16777184,
    lime: 65280,
    limegreen: 3329330,
    linen: 16445670,
    magenta: 16711935,
    maroon: 8388608,
    mediumaquamarine: 6737322,
    mediumblue: 205,
    mediumorchid: 12211667,
    mediumpurple: 9662683,
    mediumseagreen: 3978097,
    mediumslateblue: 8087790,
    mediumspringgreen: 64154,
    mediumturquoise: 4772300,
    mediumvioletred: 13047173,
    midnightblue: 1644912,
    mintcream: 16121850,
    mistyrose: 16770273,
    moccasin: 16770229,
    navajowhite: 16768685,
    navy: 128,
    oldlace: 16643558,
    olive: 8421376,
    olivedrab: 7048739,
    orange: 16753920,
    orangered: 16729344,
    orchid: 14315734,
    palegoldenrod: 15657130,
    palegreen: 10025880,
    paleturquoise: 11529966,
    palevioletred: 14381203,
    papayawhip: 16773077,
    peachpuff: 16767673,
    peru: 13468991,
    pink: 16761035,
    plum: 14524637,
    powderblue: 11591910,
    purple: 8388736,
    rebeccapurple: 6697881,
    red: 16711680,
    rosybrown: 12357519,
    royalblue: 4286945,
    saddlebrown: 9127187,
    salmon: 16416882,
    sandybrown: 16032864,
    seagreen: 3050327,
    seashell: 16774638,
    sienna: 10506797,
    silver: 12632256,
    skyblue: 8900331,
    slateblue: 6970061,
    slategray: 7372944,
    slategrey: 7372944,
    snow: 16775930,
    springgreen: 65407,
    steelblue: 4620980,
    tan: 13808780,
    teal: 32896,
    thistle: 14204888,
    tomato: 16737095,
    turquoise: 4251856,
    violet: 15631086,
    wheat: 16113331,
    white: 16777215,
    whitesmoke: 16119285,
    yellow: 16776960,
    yellowgreen: 10145074
  });
  d3_rgb_names.forEach(function(key, value) {
    d3_rgb_names.set(key, d3_rgbNumber(value));
  });
  function d3_functor(v) {
    return typeof v === "function" ? v : function() {
      return v;
    };
  }
  d3.functor = d3_functor;
  d3.xhr = d3_xhrType(d3_identity);
  function d3_xhrType(response) {
    return function(url, mimeType, callback) {
      if (arguments.length === 2 && typeof mimeType === "function") callback = mimeType, 
      mimeType = null;
      return d3_xhr(url, mimeType, response, callback);
    };
  }
  function d3_xhr(url, mimeType, response, callback) {
    var xhr = {}, dispatch = d3.dispatch("beforesend", "progress", "load", "error"), headers = {}, request = new XMLHttpRequest(), responseType = null;
    if (this.XDomainRequest && !("withCredentials" in request) && /^(http(s)?:)?\/\//.test(url)) request = new XDomainRequest();
    "onload" in request ? request.onload = request.onerror = respond : request.onreadystatechange = function() {
      request.readyState > 3 && respond();
    };
    function respond() {
      var status = request.status, result;
      if (!status && d3_xhrHasResponse(request) || status >= 200 && status < 300 || status === 304) {
        try {
          result = response.call(xhr, request);
        } catch (e) {
          dispatch.error.call(xhr, e);
          return;
        }
        dispatch.load.call(xhr, result);
      } else {
        dispatch.error.call(xhr, request);
      }
    }
    request.onprogress = function(event) {
      var o = d3.event;
      d3.event = event;
      try {
        dispatch.progress.call(xhr, request);
      } finally {
        d3.event = o;
      }
    };
    xhr.header = function(name, value) {
      name = (name + "").toLowerCase();
      if (arguments.length < 2) return headers[name];
      if (value == null) delete headers[name]; else headers[name] = value + "";
      return xhr;
    };
    xhr.mimeType = function(value) {
      if (!arguments.length) return mimeType;
      mimeType = value == null ? null : value + "";
      return xhr;
    };
    xhr.responseType = function(value) {
      if (!arguments.length) return responseType;
      responseType = value;
      return xhr;
    };
    xhr.response = function(value) {
      response = value;
      return xhr;
    };
    [ "get", "post" ].forEach(function(method) {
      xhr[method] = function() {
        return xhr.send.apply(xhr, [ method ].concat(d3_array(arguments)));
      };
    });
    xhr.send = function(method, data, callback) {
      if (arguments.length === 2 && typeof data === "function") callback = data, data = null;
      request.open(method, url, true);
      if (mimeType != null && !("accept" in headers)) headers["accept"] = mimeType + ",*/*";
      if (request.setRequestHeader) for (var name in headers) request.setRequestHeader(name, headers[name]);
      if (mimeType != null && request.overrideMimeType) request.overrideMimeType(mimeType);
      if (responseType != null) request.responseType = responseType;
      if (callback != null) xhr.on("error", callback).on("load", function(request) {
        callback(null, request);
      });
      dispatch.beforesend.call(xhr, request);
      request.send(data == null ? null : data);
      return xhr;
    };
    xhr.abort = function() {
      request.abort();
      return xhr;
    };
    d3.rebind(xhr, dispatch, "on");
    return callback == null ? xhr : xhr.get(d3_xhr_fixCallback(callback));
  }
  function d3_xhr_fixCallback(callback) {
    return callback.length === 1 ? function(error, request) {
      callback(error == null ? request : null);
    } : callback;
  }
  function d3_xhrHasResponse(request) {
    var type = request.responseType;
    return type && type !== "text" ? request.response : request.responseText;
  }
  d3.dsv = function(delimiter, mimeType) {
    var reFormat = new RegExp('["' + delimiter + "\n]"), delimiterCode = delimiter.charCodeAt(0);
    function dsv(url, row, callback) {
      if (arguments.length < 3) callback = row, row = null;
      var xhr = d3_xhr(url, mimeType, row == null ? response : typedResponse(row), callback);
      xhr.row = function(_) {
        return arguments.length ? xhr.response((row = _) == null ? response : typedResponse(_)) : row;
      };
      return xhr;
    }
    function response(request) {
      return dsv.parse(request.responseText);
    }
    function typedResponse(f) {
      return function(request) {
        return dsv.parse(request.responseText, f);
      };
    }
    dsv.parse = function(text, f) {
      var o;
      return dsv.parseRows(text, function(row, i) {
        if (o) return o(row, i - 1);
        var a = new Function("d", "return {" + row.map(function(name, i) {
          return JSON.stringify(name) + ": d[" + i + "]";
        }).join(",") + "}");
        o = f ? function(row, i) {
          return f(a(row), i);
        } : a;
      });
    };
    dsv.parseRows = function(text, f) {
      var EOL = {}, EOF = {}, rows = [], N = text.length, I = 0, n = 0, t, eol;
      function token() {
        if (I >= N) return EOF;
        if (eol) return eol = false, EOL;
        var j = I;
        if (text.charCodeAt(j) === 34) {
          var i = j;
          while (i++ < N) {
            if (text.charCodeAt(i) === 34) {
              if (text.charCodeAt(i + 1) !== 34) break;
              ++i;
            }
          }
          I = i + 2;
          var c = text.charCodeAt(i + 1);
          if (c === 13) {
            eol = true;
            if (text.charCodeAt(i + 2) === 10) ++I;
          } else if (c === 10) {
            eol = true;
          }
          return text.slice(j + 1, i).replace(/""/g, '"');
        }
        while (I < N) {
          var c = text.charCodeAt(I++), k = 1;
          if (c === 10) eol = true; else if (c === 13) {
            eol = true;
            if (text.charCodeAt(I) === 10) ++I, ++k;
          } else if (c !== delimiterCode) continue;
          return text.slice(j, I - k);
        }
        return text.slice(j);
      }
      while ((t = token()) !== EOF) {
        var a = [];
        while (t !== EOL && t !== EOF) {
          a.push(t);
          t = token();
        }
        if (f && (a = f(a, n++)) == null) continue;
        rows.push(a);
      }
      return rows;
    };
    dsv.format = function(rows) {
      if (Array.isArray(rows[0])) return dsv.formatRows(rows);
      var fieldSet = new d3_Set(), fields = [];
      rows.forEach(function(row) {
        for (var field in row) {
          if (!fieldSet.has(field)) {
            fields.push(fieldSet.add(field));
          }
        }
      });
      return [ fields.map(formatValue).join(delimiter) ].concat(rows.map(function(row) {
        return fields.map(function(field) {
          return formatValue(row[field]);
        }).join(delimiter);
      })).join("\n");
    };
    dsv.formatRows = function(rows) {
      return rows.map(formatRow).join("\n");
    };
    function formatRow(row) {
      return row.map(formatValue).join(delimiter);
    }
    function formatValue(text) {
      return reFormat.test(text) ? '"' + text.replace(/\"/g, '""') + '"' : text;
    }
    return dsv;
  };
  d3.csv = d3.dsv(",", "text/csv");
  d3.tsv = d3.dsv("	", "text/tab-separated-values");
  var d3_timer_queueHead, d3_timer_queueTail, d3_timer_interval, d3_timer_timeout, d3_timer_active, d3_timer_frame = this[d3_vendorSymbol(this, "requestAnimationFrame")] || function(callback) {
    setTimeout(callback, 17);
  };
  d3.timer = function(callback, delay, then) {
    var n = arguments.length;
    if (n < 2) delay = 0;
    if (n < 3) then = Date.now();
    var time = then + delay, timer = {
      c: callback,
      t: time,
      f: false,
      n: null
    };
    if (d3_timer_queueTail) d3_timer_queueTail.n = timer; else d3_timer_queueHead = timer;
    d3_timer_queueTail = timer;
    if (!d3_timer_interval) {
      d3_timer_timeout = clearTimeout(d3_timer_timeout);
      d3_timer_interval = 1;
      d3_timer_frame(d3_timer_step);
    }
  };
  function d3_timer_step() {
    var now = d3_timer_mark(), delay = d3_timer_sweep() - now;
    if (delay > 24) {
      if (isFinite(delay)) {
        clearTimeout(d3_timer_timeout);
        d3_timer_timeout = setTimeout(d3_timer_step, delay);
      }
      d3_timer_interval = 0;
    } else {
      d3_timer_interval = 1;
      d3_timer_frame(d3_timer_step);
    }
  }
  d3.timer.flush = function() {
    d3_timer_mark();
    d3_timer_sweep();
  };
  function d3_timer_mark() {
    var now = Date.now();
    d3_timer_active = d3_timer_queueHead;
    while (d3_timer_active) {
      if (now >= d3_timer_active.t) d3_timer_active.f = d3_timer_active.c(now - d3_timer_active.t);
      d3_timer_active = d3_timer_active.n;
    }
    return now;
  }
  function d3_timer_sweep() {
    var t0, t1 = d3_timer_queueHead, time = Infinity;
    while (t1) {
      if (t1.f) {
        t1 = t0 ? t0.n = t1.n : d3_timer_queueHead = t1.n;
      } else {
        if (t1.t < time) time = t1.t;
        t1 = (t0 = t1).n;
      }
    }
    d3_timer_queueTail = t0;
    return time;
  }
  function d3_format_precision(x, p) {
    return p - (x ? Math.ceil(Math.log(x) / Math.LN10) : 1);
  }
  d3.round = function(x, n) {
    return n ? Math.round(x * (n = Math.pow(10, n))) / n : Math.round(x);
  };
  var d3_formatPrefixes = [ "y", "z", "a", "f", "p", "n", "µ", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y" ].map(d3_formatPrefix);
  d3.formatPrefix = function(value, precision) {
    var i = 0;
    if (value) {
      if (value < 0) value *= -1;
      if (precision) value = d3.round(value, d3_format_precision(value, precision));
      i = 1 + Math.floor(1e-12 + Math.log(value) / Math.LN10);
      i = Math.max(-24, Math.min(24, Math.floor((i - 1) / 3) * 3));
    }
    return d3_formatPrefixes[8 + i / 3];
  };
  function d3_formatPrefix(d, i) {
    var k = Math.pow(10, abs(8 - i) * 3);
    return {
      scale: i > 8 ? function(d) {
        return d / k;
      } : function(d) {
        return d * k;
      },
      symbol: d
    };
  }
  function d3_locale_numberFormat(locale) {
    var locale_decimal = locale.decimal, locale_thousands = locale.thousands, locale_grouping = locale.grouping, locale_currency = locale.currency, formatGroup = locale_grouping && locale_thousands ? function(value, width) {
      var i = value.length, t = [], j = 0, g = locale_grouping[0], length = 0;
      while (i > 0 && g > 0) {
        if (length + g + 1 > width) g = Math.max(1, width - length);
        t.push(value.substring(i -= g, i + g));
        if ((length += g + 1) > width) break;
        g = locale_grouping[j = (j + 1) % locale_grouping.length];
      }
      return t.reverse().join(locale_thousands);
    } : d3_identity;
    return function(specifier) {
      var match = d3_format_re.exec(specifier), fill = match[1] || " ", align = match[2] || ">", sign = match[3] || "-", symbol = match[4] || "", zfill = match[5], width = +match[6], comma = match[7], precision = match[8], type = match[9], scale = 1, prefix = "", suffix = "", integer = false, exponent = true;
      if (precision) precision = +precision.substring(1);
      if (zfill || fill === "0" && align === "=") {
        zfill = fill = "0";
        align = "=";
      }
      switch (type) {
       case "n":
        comma = true;
        type = "g";
        break;

       case "%":
        scale = 100;
        suffix = "%";
        type = "f";
        break;

       case "p":
        scale = 100;
        suffix = "%";
        type = "r";
        break;

       case "b":
       case "o":
       case "x":
       case "X":
        if (symbol === "#") prefix = "0" + type.toLowerCase();

       case "c":
        exponent = false;

       case "d":
        integer = true;
        precision = 0;
        break;

       case "s":
        scale = -1;
        type = "r";
        break;
      }
      if (symbol === "$") prefix = locale_currency[0], suffix = locale_currency[1];
      if (type == "r" && !precision) type = "g";
      if (precision != null) {
        if (type == "g") precision = Math.max(1, Math.min(21, precision)); else if (type == "e" || type == "f") precision = Math.max(0, Math.min(20, precision));
      }
      type = d3_format_types.get(type) || d3_format_typeDefault;
      var zcomma = zfill && comma;
      return function(value) {
        var fullSuffix = suffix;
        if (integer && value % 1) return "";
        var negative = value < 0 || value === 0 && 1 / value < 0 ? (value = -value, "-") : sign === "-" ? "" : sign;
        if (scale < 0) {
          var unit = d3.formatPrefix(value, precision);
          value = unit.scale(value);
          fullSuffix = unit.symbol + suffix;
        } else {
          value *= scale;
        }
        value = type(value, precision);
        var i = value.lastIndexOf("."), before, after;
        if (i < 0) {
          var j = exponent ? value.lastIndexOf("e") : -1;
          if (j < 0) before = value, after = ""; else before = value.substring(0, j), after = value.substring(j);
        } else {
          before = value.substring(0, i);
          after = locale_decimal + value.substring(i + 1);
        }
        if (!zfill && comma) before = formatGroup(before, Infinity);
        var length = prefix.length + before.length + after.length + (zcomma ? 0 : negative.length), padding = length < width ? new Array(length = width - length + 1).join(fill) : "";
        if (zcomma) before = formatGroup(padding + before, padding.length ? width - after.length : Infinity);
        negative += prefix;
        value = before + after;
        return (align === "<" ? negative + value + padding : align === ">" ? padding + negative + value : align === "^" ? padding.substring(0, length >>= 1) + negative + value + padding.substring(length) : negative + (zcomma ? value : padding + value)) + fullSuffix;
      };
    };
  }
  var d3_format_re = /(?:([^{])?([<>=^]))?([+\- ])?([$#])?(0)?(\d+)?(,)?(\.-?\d+)?([a-z%])?/i;
  var d3_format_types = d3.map({
    b: function(x) {
      return x.toString(2);
    },
    c: function(x) {
      return String.fromCharCode(x);
    },
    o: function(x) {
      return x.toString(8);
    },
    x: function(x) {
      return x.toString(16);
    },
    X: function(x) {
      return x.toString(16).toUpperCase();
    },
    g: function(x, p) {
      return x.toPrecision(p);
    },
    e: function(x, p) {
      return x.toExponential(p);
    },
    f: function(x, p) {
      return x.toFixed(p);
    },
    r: function(x, p) {
      return (x = d3.round(x, d3_format_precision(x, p))).toFixed(Math.max(0, Math.min(20, d3_format_precision(x * (1 + 1e-15), p))));
    }
  });
  function d3_format_typeDefault(x) {
    return x + "";
  }
  var d3_time = d3.time = {}, d3_date = Date;
  function d3_date_utc() {
    this._ = new Date(arguments.length > 1 ? Date.UTC.apply(this, arguments) : arguments[0]);
  }
  d3_date_utc.prototype = {
    getDate: function() {
      return this._.getUTCDate();
    },
    getDay: function() {
      return this._.getUTCDay();
    },
    getFullYear: function() {
      return this._.getUTCFullYear();
    },
    getHours: function() {
      return this._.getUTCHours();
    },
    getMilliseconds: function() {
      return this._.getUTCMilliseconds();
    },
    getMinutes: function() {
      return this._.getUTCMinutes();
    },
    getMonth: function() {
      return this._.getUTCMonth();
    },
    getSeconds: function() {
      return this._.getUTCSeconds();
    },
    getTime: function() {
      return this._.getTime();
    },
    getTimezoneOffset: function() {
      return 0;
    },
    valueOf: function() {
      return this._.valueOf();
    },
    setDate: function() {
      d3_time_prototype.setUTCDate.apply(this._, arguments);
    },
    setDay: function() {
      d3_time_prototype.setUTCDay.apply(this._, arguments);
    },
    setFullYear: function() {
      d3_time_prototype.setUTCFullYear.apply(this._, arguments);
    },
    setHours: function() {
      d3_time_prototype.setUTCHours.apply(this._, arguments);
    },
    setMilliseconds: function() {
      d3_time_prototype.setUTCMilliseconds.apply(this._, arguments);
    },
    setMinutes: function() {
      d3_time_prototype.setUTCMinutes.apply(this._, arguments);
    },
    setMonth: function() {
      d3_time_prototype.setUTCMonth.apply(this._, arguments);
    },
    setSeconds: function() {
      d3_time_prototype.setUTCSeconds.apply(this._, arguments);
    },
    setTime: function() {
      d3_time_prototype.setTime.apply(this._, arguments);
    }
  };
  var d3_time_prototype = Date.prototype;
  function d3_time_interval(local, step, number) {
    function round(date) {
      var d0 = local(date), d1 = offset(d0, 1);
      return date - d0 < d1 - date ? d0 : d1;
    }
    function ceil(date) {
      step(date = local(new d3_date(date - 1)), 1);
      return date;
    }
    function offset(date, k) {
      step(date = new d3_date(+date), k);
      return date;
    }
    function range(t0, t1, dt) {
      var time = ceil(t0), times = [];
      if (dt > 1) {
        while (time < t1) {
          if (!(number(time) % dt)) times.push(new Date(+time));
          step(time, 1);
        }
      } else {
        while (time < t1) times.push(new Date(+time)), step(time, 1);
      }
      return times;
    }
    function range_utc(t0, t1, dt) {
      try {
        d3_date = d3_date_utc;
        var utc = new d3_date_utc();
        utc._ = t0;
        return range(utc, t1, dt);
      } finally {
        d3_date = Date;
      }
    }
    local.floor = local;
    local.round = round;
    local.ceil = ceil;
    local.offset = offset;
    local.range = range;
    var utc = local.utc = d3_time_interval_utc(local);
    utc.floor = utc;
    utc.round = d3_time_interval_utc(round);
    utc.ceil = d3_time_interval_utc(ceil);
    utc.offset = d3_time_interval_utc(offset);
    utc.range = range_utc;
    return local;
  }
  function d3_time_interval_utc(method) {
    return function(date, k) {
      try {
        d3_date = d3_date_utc;
        var utc = new d3_date_utc();
        utc._ = date;
        return method(utc, k)._;
      } finally {
        d3_date = Date;
      }
    };
  }
  d3_time.year = d3_time_interval(function(date) {
    date = d3_time.day(date);
    date.setMonth(0, 1);
    return date;
  }, function(date, offset) {
    date.setFullYear(date.getFullYear() + offset);
  }, function(date) {
    return date.getFullYear();
  });
  d3_time.years = d3_time.year.range;
  d3_time.years.utc = d3_time.year.utc.range;
  d3_time.day = d3_time_interval(function(date) {
    var day = new d3_date(2e3, 0);
    day.setFullYear(date.getFullYear(), date.getMonth(), date.getDate());
    return day;
  }, function(date, offset) {
    date.setDate(date.getDate() + offset);
  }, function(date) {
    return date.getDate() - 1;
  });
  d3_time.days = d3_time.day.range;
  d3_time.days.utc = d3_time.day.utc.range;
  d3_time.dayOfYear = function(date) {
    var year = d3_time.year(date);
    return Math.floor((date - year - (date.getTimezoneOffset() - year.getTimezoneOffset()) * 6e4) / 864e5);
  };
  [ "sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday" ].forEach(function(day, i) {
    i = 7 - i;
    var interval = d3_time[day] = d3_time_interval(function(date) {
      (date = d3_time.day(date)).setDate(date.getDate() - (date.getDay() + i) % 7);
      return date;
    }, function(date, offset) {
      date.setDate(date.getDate() + Math.floor(offset) * 7);
    }, function(date) {
      var day = d3_time.year(date).getDay();
      return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7) - (day !== i);
    });
    d3_time[day + "s"] = interval.range;
    d3_time[day + "s"].utc = interval.utc.range;
    d3_time[day + "OfYear"] = function(date) {
      var day = d3_time.year(date).getDay();
      return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7);
    };
  });
  d3_time.week = d3_time.sunday;
  d3_time.weeks = d3_time.sunday.range;
  d3_time.weeks.utc = d3_time.sunday.utc.range;
  d3_time.weekOfYear = d3_time.sundayOfYear;
  function d3_locale_timeFormat(locale) {
    var locale_dateTime = locale.dateTime, locale_date = locale.date, locale_time = locale.time, locale_periods = locale.periods, locale_days = locale.days, locale_shortDays = locale.shortDays, locale_months = locale.months, locale_shortMonths = locale.shortMonths;
    function d3_time_format(template) {
      var n = template.length;
      function format(date) {
        var string = [], i = -1, j = 0, c, p, f;
        while (++i < n) {
          if (template.charCodeAt(i) === 37) {
            string.push(template.slice(j, i));
            if ((p = d3_time_formatPads[c = template.charAt(++i)]) != null) c = template.charAt(++i);
            if (f = d3_time_formats[c]) c = f(date, p == null ? c === "e" ? " " : "0" : p);
            string.push(c);
            j = i + 1;
          }
        }
        string.push(template.slice(j, i));
        return string.join("");
      }
      format.parse = function(string) {
        var d = {
          y: 1900,
          m: 0,
          d: 1,
          H: 0,
          M: 0,
          S: 0,
          L: 0,
          Z: null
        }, i = d3_time_parse(d, template, string, 0);
        if (i != string.length) return null;
        if ("p" in d) d.H = d.H % 12 + d.p * 12;
        var localZ = d.Z != null && d3_date !== d3_date_utc, date = new (localZ ? d3_date_utc : d3_date)();
        if ("j" in d) date.setFullYear(d.y, 0, d.j); else if ("w" in d && ("W" in d || "U" in d)) {
          date.setFullYear(d.y, 0, 1);
          date.setFullYear(d.y, 0, "W" in d ? (d.w + 6) % 7 + d.W * 7 - (date.getDay() + 5) % 7 : d.w + d.U * 7 - (date.getDay() + 6) % 7);
        } else date.setFullYear(d.y, d.m, d.d);
        date.setHours(d.H + (d.Z / 100 | 0), d.M + d.Z % 100, d.S, d.L);
        return localZ ? date._ : date;
      };
      format.toString = function() {
        return template;
      };
      return format;
    }
    function d3_time_parse(date, template, string, j) {
      var c, p, t, i = 0, n = template.length, m = string.length;
      while (i < n) {
        if (j >= m) return -1;
        c = template.charCodeAt(i++);
        if (c === 37) {
          t = template.charAt(i++);
          p = d3_time_parsers[t in d3_time_formatPads ? template.charAt(i++) : t];
          if (!p || (j = p(date, string, j)) < 0) return -1;
        } else if (c != string.charCodeAt(j++)) {
          return -1;
        }
      }
      return j;
    }
    d3_time_format.utc = function(template) {
      var local = d3_time_format(template);
      function format(date) {
        try {
          d3_date = d3_date_utc;
          var utc = new d3_date();
          utc._ = date;
          return local(utc);
        } finally {
          d3_date = Date;
        }
      }
      format.parse = function(string) {
        try {
          d3_date = d3_date_utc;
          var date = local.parse(string);
          return date && date._;
        } finally {
          d3_date = Date;
        }
      };
      format.toString = local.toString;
      return format;
    };
    d3_time_format.multi = d3_time_format.utc.multi = d3_time_formatMulti;
    var d3_time_periodLookup = d3.map(), d3_time_dayRe = d3_time_formatRe(locale_days), d3_time_dayLookup = d3_time_formatLookup(locale_days), d3_time_dayAbbrevRe = d3_time_formatRe(locale_shortDays), d3_time_dayAbbrevLookup = d3_time_formatLookup(locale_shortDays), d3_time_monthRe = d3_time_formatRe(locale_months), d3_time_monthLookup = d3_time_formatLookup(locale_months), d3_time_monthAbbrevRe = d3_time_formatRe(locale_shortMonths), d3_time_monthAbbrevLookup = d3_time_formatLookup(locale_shortMonths);
    locale_periods.forEach(function(p, i) {
      d3_time_periodLookup.set(p.toLowerCase(), i);
    });
    var d3_time_formats = {
      a: function(d) {
        return locale_shortDays[d.getDay()];
      },
      A: function(d) {
        return locale_days[d.getDay()];
      },
      b: function(d) {
        return locale_shortMonths[d.getMonth()];
      },
      B: function(d) {
        return locale_months[d.getMonth()];
      },
      c: d3_time_format(locale_dateTime),
      d: function(d, p) {
        return d3_time_formatPad(d.getDate(), p, 2);
      },
      e: function(d, p) {
        return d3_time_formatPad(d.getDate(), p, 2);
      },
      H: function(d, p) {
        return d3_time_formatPad(d.getHours(), p, 2);
      },
      I: function(d, p) {
        return d3_time_formatPad(d.getHours() % 12 || 12, p, 2);
      },
      j: function(d, p) {
        return d3_time_formatPad(1 + d3_time.dayOfYear(d), p, 3);
      },
      L: function(d, p) {
        return d3_time_formatPad(d.getMilliseconds(), p, 3);
      },
      m: function(d, p) {
        return d3_time_formatPad(d.getMonth() + 1, p, 2);
      },
      M: function(d, p) {
        return d3_time_formatPad(d.getMinutes(), p, 2);
      },
      p: function(d) {
        return locale_periods[+(d.getHours() >= 12)];
      },
      S: function(d, p) {
        return d3_time_formatPad(d.getSeconds(), p, 2);
      },
      U: function(d, p) {
        return d3_time_formatPad(d3_time.sundayOfYear(d), p, 2);
      },
      w: function(d) {
        return d.getDay();
      },
      W: function(d, p) {
        return d3_time_formatPad(d3_time.mondayOfYear(d), p, 2);
      },
      x: d3_time_format(locale_date),
      X: d3_time_format(locale_time),
      y: function(d, p) {
        return d3_time_formatPad(d.getFullYear() % 100, p, 2);
      },
      Y: function(d, p) {
        return d3_time_formatPad(d.getFullYear() % 1e4, p, 4);
      },
      Z: d3_time_zone,
      "%": function() {
        return "%";
      }
    };
    var d3_time_parsers = {
      a: d3_time_parseWeekdayAbbrev,
      A: d3_time_parseWeekday,
      b: d3_time_parseMonthAbbrev,
      B: d3_time_parseMonth,
      c: d3_time_parseLocaleFull,
      d: d3_time_parseDay,
      e: d3_time_parseDay,
      H: d3_time_parseHour24,
      I: d3_time_parseHour24,
      j: d3_time_parseDayOfYear,
      L: d3_time_parseMilliseconds,
      m: d3_time_parseMonthNumber,
      M: d3_time_parseMinutes,
      p: d3_time_parseAmPm,
      S: d3_time_parseSeconds,
      U: d3_time_parseWeekNumberSunday,
      w: d3_time_parseWeekdayNumber,
      W: d3_time_parseWeekNumberMonday,
      x: d3_time_parseLocaleDate,
      X: d3_time_parseLocaleTime,
      y: d3_time_parseYear,
      Y: d3_time_parseFullYear,
      Z: d3_time_parseZone,
      "%": d3_time_parseLiteralPercent
    };
    function d3_time_parseWeekdayAbbrev(date, string, i) {
      d3_time_dayAbbrevRe.lastIndex = 0;
      var n = d3_time_dayAbbrevRe.exec(string.slice(i));
      return n ? (date.w = d3_time_dayAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
    }
    function d3_time_parseWeekday(date, string, i) {
      d3_time_dayRe.lastIndex = 0;
      var n = d3_time_dayRe.exec(string.slice(i));
      return n ? (date.w = d3_time_dayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
    }
    function d3_time_parseMonthAbbrev(date, string, i) {
      d3_time_monthAbbrevRe.lastIndex = 0;
      var n = d3_time_monthAbbrevRe.exec(string.slice(i));
      return n ? (date.m = d3_time_monthAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
    }
    function d3_time_parseMonth(date, string, i) {
      d3_time_monthRe.lastIndex = 0;
      var n = d3_time_monthRe.exec(string.slice(i));
      return n ? (date.m = d3_time_monthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
    }
    function d3_time_parseLocaleFull(date, string, i) {
      return d3_time_parse(date, d3_time_formats.c.toString(), string, i);
    }
    function d3_time_parseLocaleDate(date, string, i) {
      return d3_time_parse(date, d3_time_formats.x.toString(), string, i);
    }
    function d3_time_parseLocaleTime(date, string, i) {
      return d3_time_parse(date, d3_time_formats.X.toString(), string, i);
    }
    function d3_time_parseAmPm(date, string, i) {
      var n = d3_time_periodLookup.get(string.slice(i, i += 2).toLowerCase());
      return n == null ? -1 : (date.p = n, i);
    }
    return d3_time_format;
  }
  var d3_time_formatPads = {
    "-": "",
    _: " ",
    "0": "0"
  }, d3_time_numberRe = /^\s*\d+/, d3_time_percentRe = /^%/;
  function d3_time_formatPad(value, fill, width) {
    var sign = value < 0 ? "-" : "", string = (sign ? -value : value) + "", length = string.length;
    return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);
  }
  function d3_time_formatRe(names) {
    return new RegExp("^(?:" + names.map(d3.requote).join("|") + ")", "i");
  }
  function d3_time_formatLookup(names) {
    var map = new d3_Map(), i = -1, n = names.length;
    while (++i < n) map.set(names[i].toLowerCase(), i);
    return map;
  }
  function d3_time_parseWeekdayNumber(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 1));
    return n ? (date.w = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseWeekNumberSunday(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i));
    return n ? (date.U = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseWeekNumberMonday(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i));
    return n ? (date.W = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseFullYear(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 4));
    return n ? (date.y = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseYear(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
    return n ? (date.y = d3_time_expandYear(+n[0]), i + n[0].length) : -1;
  }
  function d3_time_parseZone(date, string, i) {
    return /^[+-]\d{4}$/.test(string = string.slice(i, i + 5)) ? (date.Z = -string, 
    i + 5) : -1;
  }
  function d3_time_expandYear(d) {
    return d + (d > 68 ? 1900 : 2e3);
  }
  function d3_time_parseMonthNumber(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
    return n ? (date.m = n[0] - 1, i + n[0].length) : -1;
  }
  function d3_time_parseDay(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
    return n ? (date.d = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseDayOfYear(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 3));
    return n ? (date.j = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseHour24(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
    return n ? (date.H = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseMinutes(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
    return n ? (date.M = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseSeconds(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
    return n ? (date.S = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseMilliseconds(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 3));
    return n ? (date.L = +n[0], i + n[0].length) : -1;
  }
  function d3_time_zone(d) {
    var z = d.getTimezoneOffset(), zs = z > 0 ? "-" : "+", zh = abs(z) / 60 | 0, zm = abs(z) % 60;
    return zs + d3_time_formatPad(zh, "0", 2) + d3_time_formatPad(zm, "0", 2);
  }
  function d3_time_parseLiteralPercent(date, string, i) {
    d3_time_percentRe.lastIndex = 0;
    var n = d3_time_percentRe.exec(string.slice(i, i + 1));
    return n ? i + n[0].length : -1;
  }
  function d3_time_formatMulti(formats) {
    var n = formats.length, i = -1;
    while (++i < n) formats[i][0] = this(formats[i][0]);
    return function(date) {
      var i = 0, f = formats[i];
      while (!f[1](date)) f = formats[++i];
      return f[0](date);
    };
  }
  d3.locale = function(locale) {
    return {
      numberFormat: d3_locale_numberFormat(locale),
      timeFormat: d3_locale_timeFormat(locale)
    };
  };
  var d3_locale_enUS = d3.locale({
    decimal: ".",
    thousands: ",",
    grouping: [ 3 ],
    currency: [ "$", "" ],
    dateTime: "%a %b %e %X %Y",
    date: "%m/%d/%Y",
    time: "%H:%M:%S",
    periods: [ "AM", "PM" ],
    days: [ "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" ],
    shortDays: [ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" ],
    months: [ "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" ],
    shortMonths: [ "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" ]
  });
  d3.format = d3_locale_enUS.numberFormat;
  d3.geo = {};
  function d3_adder() {}
  d3_adder.prototype = {
    s: 0,
    t: 0,
    add: function(y) {
      d3_adderSum(y, this.t, d3_adderTemp);
      d3_adderSum(d3_adderTemp.s, this.s, this);
      if (this.s) this.t += d3_adderTemp.t; else this.s = d3_adderTemp.t;
    },
    reset: function() {
      this.s = this.t = 0;
    },
    valueOf: function() {
      return this.s;
    }
  };
  var d3_adderTemp = new d3_adder();
  function d3_adderSum(a, b, o) {
    var x = o.s = a + b, bv = x - a, av = x - bv;
    o.t = a - av + (b - bv);
  }
  d3.geo.stream = function(object, listener) {
    if (object && d3_geo_streamObjectType.hasOwnProperty(object.type)) {
      d3_geo_streamObjectType[object.type](object, listener);
    } else {
      d3_geo_streamGeometry(object, listener);
    }
  };
  function d3_geo_streamGeometry(geometry, listener) {
    if (geometry && d3_geo_streamGeometryType.hasOwnProperty(geometry.type)) {
      d3_geo_streamGeometryType[geometry.type](geometry, listener);
    }
  }
  var d3_geo_streamObjectType = {
    Feature: function(feature, listener) {
      d3_geo_streamGeometry(feature.geometry, listener);
    },
    FeatureCollection: function(object, listener) {
      var features = object.features, i = -1, n = features.length;
      while (++i < n) d3_geo_streamGeometry(features[i].geometry, listener);
    }
  };
  var d3_geo_streamGeometryType = {
    Sphere: function(object, listener) {
      listener.sphere();
    },
    Point: function(object, listener) {
      object = object.coordinates;
      listener.point(object[0], object[1], object[2]);
    },
    MultiPoint: function(object, listener) {
      var coordinates = object.coordinates, i = -1, n = coordinates.length;
      while (++i < n) object = coordinates[i], listener.point(object[0], object[1], object[2]);
    },
    LineString: function(object, listener) {
      d3_geo_streamLine(object.coordinates, listener, 0);
    },
    MultiLineString: function(object, listener) {
      var coordinates = object.coordinates, i = -1, n = coordinates.length;
      while (++i < n) d3_geo_streamLine(coordinates[i], listener, 0);
    },
    Polygon: function(object, listener) {
      d3_geo_streamPolygon(object.coordinates, listener);
    },
    MultiPolygon: function(object, listener) {
      var coordinates = object.coordinates, i = -1, n = coordinates.length;
      while (++i < n) d3_geo_streamPolygon(coordinates[i], listener);
    },
    GeometryCollection: function(object, listener) {
      var geometries = object.geometries, i = -1, n = geometries.length;
      while (++i < n) d3_geo_streamGeometry(geometries[i], listener);
    }
  };
  function d3_geo_streamLine(coordinates, listener, closed) {
    var i = -1, n = coordinates.length - closed, coordinate;
    listener.lineStart();
    while (++i < n) coordinate = coordinates[i], listener.point(coordinate[0], coordinate[1], coordinate[2]);
    listener.lineEnd();
  }
  function d3_geo_streamPolygon(coordinates, listener) {
    var i = -1, n = coordinates.length;
    listener.polygonStart();
    while (++i < n) d3_geo_streamLine(coordinates[i], listener, 1);
    listener.polygonEnd();
  }
  d3.geo.area = function(object) {
    d3_geo_areaSum = 0;
    d3.geo.stream(object, d3_geo_area);
    return d3_geo_areaSum;
  };
  var d3_geo_areaSum, d3_geo_areaRingSum = new d3_adder();
  var d3_geo_area = {
    sphere: function() {
      d3_geo_areaSum += 4 * π;
    },
    point: d3_noop,
    lineStart: d3_noop,
    lineEnd: d3_noop,
    polygonStart: function() {
      d3_geo_areaRingSum.reset();
      d3_geo_area.lineStart = d3_geo_areaRingStart;
    },
    polygonEnd: function() {
      var area = 2 * d3_geo_areaRingSum;
      d3_geo_areaSum += area < 0 ? 4 * π + area : area;
      d3_geo_area.lineStart = d3_geo_area.lineEnd = d3_geo_area.point = d3_noop;
    }
  };
  function d3_geo_areaRingStart() {
    var λ00, φ00, λ0, cosφ0, sinφ0;
    d3_geo_area.point = function(λ, φ) {
      d3_geo_area.point = nextPoint;
      λ0 = (λ00 = λ) * d3_radians, cosφ0 = Math.cos(φ = (φ00 = φ) * d3_radians / 2 + π / 4), 
      sinφ0 = Math.sin(φ);
    };
    function nextPoint(λ, φ) {
      λ *= d3_radians;
      φ = φ * d3_radians / 2 + π / 4;
      var dλ = λ - λ0, sdλ = dλ >= 0 ? 1 : -1, adλ = sdλ * dλ, cosφ = Math.cos(φ), sinφ = Math.sin(φ), k = sinφ0 * sinφ, u = cosφ0 * cosφ + k * Math.cos(adλ), v = k * sdλ * Math.sin(adλ);
      d3_geo_areaRingSum.add(Math.atan2(v, u));
      λ0 = λ, cosφ0 = cosφ, sinφ0 = sinφ;
    }
    d3_geo_area.lineEnd = function() {
      nextPoint(λ00, φ00);
    };
  }
  function d3_geo_cartesian(spherical) {
    var λ = spherical[0], φ = spherical[1], cosφ = Math.cos(φ);
    return [ cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(φ) ];
  }
  function d3_geo_cartesianDot(a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
  }
  function d3_geo_cartesianCross(a, b) {
    return [ a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0] ];
  }
  function d3_geo_cartesianAdd(a, b) {
    a[0] += b[0];
    a[1] += b[1];
    a[2] += b[2];
  }
  function d3_geo_cartesianScale(vector, k) {
    return [ vector[0] * k, vector[1] * k, vector[2] * k ];
  }
  function d3_geo_cartesianNormalize(d) {
    var l = Math.sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);
    d[0] /= l;
    d[1] /= l;
    d[2] /= l;
  }
  function d3_geo_spherical(cartesian) {
    return [ Math.atan2(cartesian[1], cartesian[0]), d3_asin(cartesian[2]) ];
  }
  function d3_geo_sphericalEqual(a, b) {
    return abs(a[0] - b[0]) < ε && abs(a[1] - b[1]) < ε;
  }
  d3.geo.bounds = function() {
    var λ0, φ0, λ1, φ1, λ_, λ__, φ__, p0, dλSum, ranges, range;
    var bound = {
      point: point,
      lineStart: lineStart,
      lineEnd: lineEnd,
      polygonStart: function() {
        bound.point = ringPoint;
        bound.lineStart = ringStart;
        bound.lineEnd = ringEnd;
        dλSum = 0;
        d3_geo_area.polygonStart();
      },
      polygonEnd: function() {
        d3_geo_area.polygonEnd();
        bound.point = point;
        bound.lineStart = lineStart;
        bound.lineEnd = lineEnd;
        if (d3_geo_areaRingSum < 0) λ0 = -(λ1 = 180), φ0 = -(φ1 = 90); else if (dλSum > ε) φ1 = 90; else if (dλSum < -ε) φ0 = -90;
        range[0] = λ0, range[1] = λ1;
      }
    };
    function point(λ, φ) {
      ranges.push(range = [ λ0 = λ, λ1 = λ ]);
      if (φ < φ0) φ0 = φ;
      if (φ > φ1) φ1 = φ;
    }
    function linePoint(λ, φ) {
      var p = d3_geo_cartesian([ λ * d3_radians, φ * d3_radians ]);
      if (p0) {
        var normal = d3_geo_cartesianCross(p0, p), equatorial = [ normal[1], -normal[0], 0 ], inflection = d3_geo_cartesianCross(equatorial, normal);
        d3_geo_cartesianNormalize(inflection);
        inflection = d3_geo_spherical(inflection);
        var dλ = λ - λ_, s = dλ > 0 ? 1 : -1, λi = inflection[0] * d3_degrees * s, antimeridian = abs(dλ) > 180;
        if (antimeridian ^ (s * λ_ < λi && λi < s * λ)) {
          var φi = inflection[1] * d3_degrees;
          if (φi > φ1) φ1 = φi;
        } else if (λi = (λi + 360) % 360 - 180, antimeridian ^ (s * λ_ < λi && λi < s * λ)) {
          var φi = -inflection[1] * d3_degrees;
          if (φi < φ0) φ0 = φi;
        } else {
          if (φ < φ0) φ0 = φ;
          if (φ > φ1) φ1 = φ;
        }
        if (antimeridian) {
          if (λ < λ_) {
            if (angle(λ0, λ) > angle(λ0, λ1)) λ1 = λ;
          } else {
            if (angle(λ, λ1) > angle(λ0, λ1)) λ0 = λ;
          }
        } else {
          if (λ1 >= λ0) {
            if (λ < λ0) λ0 = λ;
            if (λ > λ1) λ1 = λ;
          } else {
            if (λ > λ_) {
              if (angle(λ0, λ) > angle(λ0, λ1)) λ1 = λ;
            } else {
              if (angle(λ, λ1) > angle(λ0, λ1)) λ0 = λ;
            }
          }
        }
      } else {
        point(λ, φ);
      }
      p0 = p, λ_ = λ;
    }
    function lineStart() {
      bound.point = linePoint;
    }
    function lineEnd() {
      range[0] = λ0, range[1] = λ1;
      bound.point = point;
      p0 = null;
    }
    function ringPoint(λ, φ) {
      if (p0) {
        var dλ = λ - λ_;
        dλSum += abs(dλ) > 180 ? dλ + (dλ > 0 ? 360 : -360) : dλ;
      } else λ__ = λ, φ__ = φ;
      d3_geo_area.point(λ, φ);
      linePoint(λ, φ);
    }
    function ringStart() {
      d3_geo_area.lineStart();
    }
    function ringEnd() {
      ringPoint(λ__, φ__);
      d3_geo_area.lineEnd();
      if (abs(dλSum) > ε) λ0 = -(λ1 = 180);
      range[0] = λ0, range[1] = λ1;
      p0 = null;
    }
    function angle(λ0, λ1) {
      return (λ1 -= λ0) < 0 ? λ1 + 360 : λ1;
    }
    function compareRanges(a, b) {
      return a[0] - b[0];
    }
    function withinRange(x, range) {
      return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;
    }
    return function(feature) {
      φ1 = λ1 = -(λ0 = φ0 = Infinity);
      ranges = [];
      d3.geo.stream(feature, bound);
      var n = ranges.length;
      if (n) {
        ranges.sort(compareRanges);
        for (var i = 1, a = ranges[0], b, merged = [ a ]; i < n; ++i) {
          b = ranges[i];
          if (withinRange(b[0], a) || withinRange(b[1], a)) {
            if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];
            if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];
          } else {
            merged.push(a = b);
          }
        }
        var best = -Infinity, dλ;
        for (var n = merged.length - 1, i = 0, a = merged[n], b; i <= n; a = b, ++i) {
          b = merged[i];
          if ((dλ = angle(a[1], b[0])) > best) best = dλ, λ0 = b[0], λ1 = a[1];
        }
      }
      ranges = range = null;
      return λ0 === Infinity || φ0 === Infinity ? [ [ NaN, NaN ], [ NaN, NaN ] ] : [ [ λ0, φ0 ], [ λ1, φ1 ] ];
    };
  }();
  d3.geo.centroid = function(object) {
    d3_geo_centroidW0 = d3_geo_centroidW1 = d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;
    d3.geo.stream(object, d3_geo_centroid);
    var x = d3_geo_centroidX2, y = d3_geo_centroidY2, z = d3_geo_centroidZ2, m = x * x + y * y + z * z;
    if (m < ε2) {
      x = d3_geo_centroidX1, y = d3_geo_centroidY1, z = d3_geo_centroidZ1;
      if (d3_geo_centroidW1 < ε) x = d3_geo_centroidX0, y = d3_geo_centroidY0, z = d3_geo_centroidZ0;
      m = x * x + y * y + z * z;
      if (m < ε2) return [ NaN, NaN ];
    }
    return [ Math.atan2(y, x) * d3_degrees, d3_asin(z / Math.sqrt(m)) * d3_degrees ];
  };
  var d3_geo_centroidW0, d3_geo_centroidW1, d3_geo_centroidX0, d3_geo_centroidY0, d3_geo_centroidZ0, d3_geo_centroidX1, d3_geo_centroidY1, d3_geo_centroidZ1, d3_geo_centroidX2, d3_geo_centroidY2, d3_geo_centroidZ2;
  var d3_geo_centroid = {
    sphere: d3_noop,
    point: d3_geo_centroidPoint,
    lineStart: d3_geo_centroidLineStart,
    lineEnd: d3_geo_centroidLineEnd,
    polygonStart: function() {
      d3_geo_centroid.lineStart = d3_geo_centroidRingStart;
    },
    polygonEnd: function() {
      d3_geo_centroid.lineStart = d3_geo_centroidLineStart;
    }
  };
  function d3_geo_centroidPoint(λ, φ) {
    λ *= d3_radians;
    var cosφ = Math.cos(φ *= d3_radians);
    d3_geo_centroidPointXYZ(cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(φ));
  }
  function d3_geo_centroidPointXYZ(x, y, z) {
    ++d3_geo_centroidW0;
    d3_geo_centroidX0 += (x - d3_geo_centroidX0) / d3_geo_centroidW0;
    d3_geo_centroidY0 += (y - d3_geo_centroidY0) / d3_geo_centroidW0;
    d3_geo_centroidZ0 += (z - d3_geo_centroidZ0) / d3_geo_centroidW0;
  }
  function d3_geo_centroidLineStart() {
    var x0, y0, z0;
    d3_geo_centroid.point = function(λ, φ) {
      λ *= d3_radians;
      var cosφ = Math.cos(φ *= d3_radians);
      x0 = cosφ * Math.cos(λ);
      y0 = cosφ * Math.sin(λ);
      z0 = Math.sin(φ);
      d3_geo_centroid.point = nextPoint;
      d3_geo_centroidPointXYZ(x0, y0, z0);
    };
    function nextPoint(λ, φ) {
      λ *= d3_radians;
      var cosφ = Math.cos(φ *= d3_radians), x = cosφ * Math.cos(λ), y = cosφ * Math.sin(λ), z = Math.sin(φ), w = Math.atan2(Math.sqrt((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);
      d3_geo_centroidW1 += w;
      d3_geo_centroidX1 += w * (x0 + (x0 = x));
      d3_geo_centroidY1 += w * (y0 + (y0 = y));
      d3_geo_centroidZ1 += w * (z0 + (z0 = z));
      d3_geo_centroidPointXYZ(x0, y0, z0);
    }
  }
  function d3_geo_centroidLineEnd() {
    d3_geo_centroid.point = d3_geo_centroidPoint;
  }
  function d3_geo_centroidRingStart() {
    var λ00, φ00, x0, y0, z0;
    d3_geo_centroid.point = function(λ, φ) {
      λ00 = λ, φ00 = φ;
      d3_geo_centroid.point = nextPoint;
      λ *= d3_radians;
      var cosφ = Math.cos(φ *= d3_radians);
      x0 = cosφ * Math.cos(λ);
      y0 = cosφ * Math.sin(λ);
      z0 = Math.sin(φ);
      d3_geo_centroidPointXYZ(x0, y0, z0);
    };
    d3_geo_centroid.lineEnd = function() {
      nextPoint(λ00, φ00);
      d3_geo_centroid.lineEnd = d3_geo_centroidLineEnd;
      d3_geo_centroid.point = d3_geo_centroidPoint;
    };
    function nextPoint(λ, φ) {
      λ *= d3_radians;
      var cosφ = Math.cos(φ *= d3_radians), x = cosφ * Math.cos(λ), y = cosφ * Math.sin(λ), z = Math.sin(φ), cx = y0 * z - z0 * y, cy = z0 * x - x0 * z, cz = x0 * y - y0 * x, m = Math.sqrt(cx * cx + cy * cy + cz * cz), u = x0 * x + y0 * y + z0 * z, v = m && -d3_acos(u) / m, w = Math.atan2(m, u);
      d3_geo_centroidX2 += v * cx;
      d3_geo_centroidY2 += v * cy;
      d3_geo_centroidZ2 += v * cz;
      d3_geo_centroidW1 += w;
      d3_geo_centroidX1 += w * (x0 + (x0 = x));
      d3_geo_centroidY1 += w * (y0 + (y0 = y));
      d3_geo_centroidZ1 += w * (z0 + (z0 = z));
      d3_geo_centroidPointXYZ(x0, y0, z0);
    }
  }
  function d3_geo_compose(a, b) {
    function compose(x, y) {
      return x = a(x, y), b(x[0], x[1]);
    }
    if (a.invert && b.invert) compose.invert = function(x, y) {
      return x = b.invert(x, y), x && a.invert(x[0], x[1]);
    };
    return compose;
  }
  function d3_true() {
    return true;
  }
  function d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener) {
    var subject = [], clip = [];
    segments.forEach(function(segment) {
      if ((n = segment.length - 1) <= 0) return;
      var n, p0 = segment[0], p1 = segment[n];
      if (d3_geo_sphericalEqual(p0, p1)) {
        listener.lineStart();
        for (var i = 0; i < n; ++i) listener.point((p0 = segment[i])[0], p0[1]);
        listener.lineEnd();
        return;
      }
      var a = new d3_geo_clipPolygonIntersection(p0, segment, null, true), b = new d3_geo_clipPolygonIntersection(p0, null, a, false);
      a.o = b;
      subject.push(a);
      clip.push(b);
      a = new d3_geo_clipPolygonIntersection(p1, segment, null, false);
      b = new d3_geo_clipPolygonIntersection(p1, null, a, true);
      a.o = b;
      subject.push(a);
      clip.push(b);
    });
    clip.sort(compare);
    d3_geo_clipPolygonLinkCircular(subject);
    d3_geo_clipPolygonLinkCircular(clip);
    if (!subject.length) return;
    for (var i = 0, entry = clipStartInside, n = clip.length; i < n; ++i) {
      clip[i].e = entry = !entry;
    }
    var start = subject[0], points, point;
    while (1) {
      var current = start, isSubject = true;
      while (current.v) if ((current = current.n) === start) return;
      points = current.z;
      listener.lineStart();
      do {
        current.v = current.o.v = true;
        if (current.e) {
          if (isSubject) {
            for (var i = 0, n = points.length; i < n; ++i) listener.point((point = points[i])[0], point[1]);
          } else {
            interpolate(current.x, current.n.x, 1, listener);
          }
          current = current.n;
        } else {
          if (isSubject) {
            points = current.p.z;
            for (var i = points.length - 1; i >= 0; --i) listener.point((point = points[i])[0], point[1]);
          } else {
            interpolate(current.x, current.p.x, -1, listener);
          }
          current = current.p;
        }
        current = current.o;
        points = current.z;
        isSubject = !isSubject;
      } while (!current.v);
      listener.lineEnd();
    }
  }
  function d3_geo_clipPolygonLinkCircular(array) {
    if (!(n = array.length)) return;
    var n, i = 0, a = array[0], b;
    while (++i < n) {
      a.n = b = array[i];
      b.p = a;
      a = b;
    }
    a.n = b = array[0];
    b.p = a;
  }
  function d3_geo_clipPolygonIntersection(point, points, other, entry) {
    this.x = point;
    this.z = points;
    this.o = other;
    this.e = entry;
    this.v = false;
    this.n = this.p = null;
  }
  function d3_geo_clip(pointVisible, clipLine, interpolate, clipStart) {
    return function(rotate, listener) {
      var line = clipLine(listener), rotatedClipStart = rotate.invert(clipStart[0], clipStart[1]);
      var clip = {
        point: point,
        lineStart: lineStart,
        lineEnd: lineEnd,
        polygonStart: function() {
          clip.point = pointRing;
          clip.lineStart = ringStart;
          clip.lineEnd = ringEnd;
          segments = [];
          polygon = [];
        },
        polygonEnd: function() {
          clip.point = point;
          clip.lineStart = lineStart;
          clip.lineEnd = lineEnd;
          segments = d3.merge(segments);
          var clipStartInside = d3_geo_pointInPolygon(rotatedClipStart, polygon);
          if (segments.length) {
            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;
            d3_geo_clipPolygon(segments, d3_geo_clipSort, clipStartInside, interpolate, listener);
          } else if (clipStartInside) {
            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;
            listener.lineStart();
            interpolate(null, null, 1, listener);
            listener.lineEnd();
          }
          if (polygonStarted) listener.polygonEnd(), polygonStarted = false;
          segments = polygon = null;
        },
        sphere: function() {
          listener.polygonStart();
          listener.lineStart();
          interpolate(null, null, 1, listener);
          listener.lineEnd();
          listener.polygonEnd();
        }
      };
      function point(λ, φ) {
        var point = rotate(λ, φ);
        if (pointVisible(λ = point[0], φ = point[1])) listener.point(λ, φ);
      }
      function pointLine(λ, φ) {
        var point = rotate(λ, φ);
        line.point(point[0], point[1]);
      }
      function lineStart() {
        clip.point = pointLine;
        line.lineStart();
      }
      function lineEnd() {
        clip.point = point;
        line.lineEnd();
      }
      var segments;
      var buffer = d3_geo_clipBufferListener(), ringListener = clipLine(buffer), polygonStarted = false, polygon, ring;
      function pointRing(λ, φ) {
        ring.push([ λ, φ ]);
        var point = rotate(λ, φ);
        ringListener.point(point[0], point[1]);
      }
      function ringStart() {
        ringListener.lineStart();
        ring = [];
      }
      function ringEnd() {
        pointRing(ring[0][0], ring[0][1]);
        ringListener.lineEnd();
        var clean = ringListener.clean(), ringSegments = buffer.buffer(), segment, n = ringSegments.length;
        ring.pop();
        polygon.push(ring);
        ring = null;
        if (!n) return;
        if (clean & 1) {
          segment = ringSegments[0];
          var n = segment.length - 1, i = -1, point;
          if (n > 0) {
            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;
            listener.lineStart();
            while (++i < n) listener.point((point = segment[i])[0], point[1]);
            listener.lineEnd();
          }
          return;
        }
        if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));
        segments.push(ringSegments.filter(d3_geo_clipSegmentLength1));
      }
      return clip;
    };
  }
  function d3_geo_clipSegmentLength1(segment) {
    return segment.length > 1;
  }
  function d3_geo_clipBufferListener() {
    var lines = [], line;
    return {
      lineStart: function() {
        lines.push(line = []);
      },
      point: function(λ, φ) {
        line.push([ λ, φ ]);
      },
      lineEnd: d3_noop,
      buffer: function() {
        var buffer = lines;
        lines = [];
        line = null;
        return buffer;
      },
      rejoin: function() {
        if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));
      }
    };
  }
  function d3_geo_clipSort(a, b) {
    return ((a = a.x)[0] < 0 ? a[1] - halfπ - ε : halfπ - a[1]) - ((b = b.x)[0] < 0 ? b[1] - halfπ - ε : halfπ - b[1]);
  }
  var d3_geo_clipAntimeridian = d3_geo_clip(d3_true, d3_geo_clipAntimeridianLine, d3_geo_clipAntimeridianInterpolate, [ -π, -π / 2 ]);
  function d3_geo_clipAntimeridianLine(listener) {
    var λ0 = NaN, φ0 = NaN, sλ0 = NaN, clean;
    return {
      lineStart: function() {
        listener.lineStart();
        clean = 1;
      },
      point: function(λ1, φ1) {
        var sλ1 = λ1 > 0 ? π : -π, dλ = abs(λ1 - λ0);
        if (abs(dλ - π) < ε) {
          listener.point(λ0, φ0 = (φ0 + φ1) / 2 > 0 ? halfπ : -halfπ);
          listener.point(sλ0, φ0);
          listener.lineEnd();
          listener.lineStart();
          listener.point(sλ1, φ0);
          listener.point(λ1, φ0);
          clean = 0;
        } else if (sλ0 !== sλ1 && dλ >= π) {
          if (abs(λ0 - sλ0) < ε) λ0 -= sλ0 * ε;
          if (abs(λ1 - sλ1) < ε) λ1 -= sλ1 * ε;
          φ0 = d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1);
          listener.point(sλ0, φ0);
          listener.lineEnd();
          listener.lineStart();
          listener.point(sλ1, φ0);
          clean = 0;
        }
        listener.point(λ0 = λ1, φ0 = φ1);
        sλ0 = sλ1;
      },
      lineEnd: function() {
        listener.lineEnd();
        λ0 = φ0 = NaN;
      },
      clean: function() {
        return 2 - clean;
      }
    };
  }
  function d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1) {
    var cosφ0, cosφ1, sinλ0_λ1 = Math.sin(λ0 - λ1);
    return abs(sinλ0_λ1) > ε ? Math.atan((Math.sin(φ0) * (cosφ1 = Math.cos(φ1)) * Math.sin(λ1) - Math.sin(φ1) * (cosφ0 = Math.cos(φ0)) * Math.sin(λ0)) / (cosφ0 * cosφ1 * sinλ0_λ1)) : (φ0 + φ1) / 2;
  }
  function d3_geo_clipAntimeridianInterpolate(from, to, direction, listener) {
    var φ;
    if (from == null) {
      φ = direction * halfπ;
      listener.point(-π, φ);
      listener.point(0, φ);
      listener.point(π, φ);
      listener.point(π, 0);
      listener.point(π, -φ);
      listener.point(0, -φ);
      listener.point(-π, -φ);
      listener.point(-π, 0);
      listener.point(-π, φ);
    } else if (abs(from[0] - to[0]) > ε) {
      var s = from[0] < to[0] ? π : -π;
      φ = direction * s / 2;
      listener.point(-s, φ);
      listener.point(0, φ);
      listener.point(s, φ);
    } else {
      listener.point(to[0], to[1]);
    }
  }
  function d3_geo_pointInPolygon(point, polygon) {
    var meridian = point[0], parallel = point[1], meridianNormal = [ Math.sin(meridian), -Math.cos(meridian), 0 ], polarAngle = 0, winding = 0;
    d3_geo_areaRingSum.reset();
    for (var i = 0, n = polygon.length; i < n; ++i) {
      var ring = polygon[i], m = ring.length;
      if (!m) continue;
      var point0 = ring[0], λ0 = point0[0], φ0 = point0[1] / 2 + π / 4, sinφ0 = Math.sin(φ0), cosφ0 = Math.cos(φ0), j = 1;
      while (true) {
        if (j === m) j = 0;
        point = ring[j];
        var λ = point[0], φ = point[1] / 2 + π / 4, sinφ = Math.sin(φ), cosφ = Math.cos(φ), dλ = λ - λ0, sdλ = dλ >= 0 ? 1 : -1, adλ = sdλ * dλ, antimeridian = adλ > π, k = sinφ0 * sinφ;
        d3_geo_areaRingSum.add(Math.atan2(k * sdλ * Math.sin(adλ), cosφ0 * cosφ + k * Math.cos(adλ)));
        polarAngle += antimeridian ? dλ + sdλ * τ : dλ;
        if (antimeridian ^ λ0 >= meridian ^ λ >= meridian) {
          var arc = d3_geo_cartesianCross(d3_geo_cartesian(point0), d3_geo_cartesian(point));
          d3_geo_cartesianNormalize(arc);
          var intersection = d3_geo_cartesianCross(meridianNormal, arc);
          d3_geo_cartesianNormalize(intersection);
          var φarc = (antimeridian ^ dλ >= 0 ? -1 : 1) * d3_asin(intersection[2]);
          if (parallel > φarc || parallel === φarc && (arc[0] || arc[1])) {
            winding += antimeridian ^ dλ >= 0 ? 1 : -1;
          }
        }
        if (!j++) break;
        λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ, point0 = point;
      }
    }
    return (polarAngle < -ε || polarAngle < ε && d3_geo_areaRingSum < 0) ^ winding & 1;
  }
  function d3_geo_clipCircle(radius) {
    var cr = Math.cos(radius), smallRadius = cr > 0, notHemisphere = abs(cr) > ε, interpolate = d3_geo_circleInterpolate(radius, 6 * d3_radians);
    return d3_geo_clip(visible, clipLine, interpolate, smallRadius ? [ 0, -radius ] : [ -π, radius - π ]);
    function visible(λ, φ) {
      return Math.cos(λ) * Math.cos(φ) > cr;
    }
    function clipLine(listener) {
      var point0, c0, v0, v00, clean;
      return {
        lineStart: function() {
          v00 = v0 = false;
          clean = 1;
        },
        point: function(λ, φ) {
          var point1 = [ λ, φ ], point2, v = visible(λ, φ), c = smallRadius ? v ? 0 : code(λ, φ) : v ? code(λ + (λ < 0 ? π : -π), φ) : 0;
          if (!point0 && (v00 = v0 = v)) listener.lineStart();
          if (v !== v0) {
            point2 = intersect(point0, point1);
            if (d3_geo_sphericalEqual(point0, point2) || d3_geo_sphericalEqual(point1, point2)) {
              point1[0] += ε;
              point1[1] += ε;
              v = visible(point1[0], point1[1]);
            }
          }
          if (v !== v0) {
            clean = 0;
            if (v) {
              listener.lineStart();
              point2 = intersect(point1, point0);
              listener.point(point2[0], point2[1]);
            } else {
              point2 = intersect(point0, point1);
              listener.point(point2[0], point2[1]);
              listener.lineEnd();
            }
            point0 = point2;
          } else if (notHemisphere && point0 && smallRadius ^ v) {
            var t;
            if (!(c & c0) && (t = intersect(point1, point0, true))) {
              clean = 0;
              if (smallRadius) {
                listener.lineStart();
                listener.point(t[0][0], t[0][1]);
                listener.point(t[1][0], t[1][1]);
                listener.lineEnd();
              } else {
                listener.point(t[1][0], t[1][1]);
                listener.lineEnd();
                listener.lineStart();
                listener.point(t[0][0], t[0][1]);
              }
            }
          }
          if (v && (!point0 || !d3_geo_sphericalEqual(point0, point1))) {
            listener.point(point1[0], point1[1]);
          }
          point0 = point1, v0 = v, c0 = c;
        },
        lineEnd: function() {
          if (v0) listener.lineEnd();
          point0 = null;
        },
        clean: function() {
          return clean | (v00 && v0) << 1;
        }
      };
    }
    function intersect(a, b, two) {
      var pa = d3_geo_cartesian(a), pb = d3_geo_cartesian(b);
      var n1 = [ 1, 0, 0 ], n2 = d3_geo_cartesianCross(pa, pb), n2n2 = d3_geo_cartesianDot(n2, n2), n1n2 = n2[0], determinant = n2n2 - n1n2 * n1n2;
      if (!determinant) return !two && a;
      var c1 = cr * n2n2 / determinant, c2 = -cr * n1n2 / determinant, n1xn2 = d3_geo_cartesianCross(n1, n2), A = d3_geo_cartesianScale(n1, c1), B = d3_geo_cartesianScale(n2, c2);
      d3_geo_cartesianAdd(A, B);
      var u = n1xn2, w = d3_geo_cartesianDot(A, u), uu = d3_geo_cartesianDot(u, u), t2 = w * w - uu * (d3_geo_cartesianDot(A, A) - 1);
      if (t2 < 0) return;
      var t = Math.sqrt(t2), q = d3_geo_cartesianScale(u, (-w - t) / uu);
      d3_geo_cartesianAdd(q, A);
      q = d3_geo_spherical(q);
      if (!two) return q;
      var λ0 = a[0], λ1 = b[0], φ0 = a[1], φ1 = b[1], z;
      if (λ1 < λ0) z = λ0, λ0 = λ1, λ1 = z;
      var δλ = λ1 - λ0, polar = abs(δλ - π) < ε, meridian = polar || δλ < ε;
      if (!polar && φ1 < φ0) z = φ0, φ0 = φ1, φ1 = z;
      if (meridian ? polar ? φ0 + φ1 > 0 ^ q[1] < (abs(q[0] - λ0) < ε ? φ0 : φ1) : φ0 <= q[1] && q[1] <= φ1 : δλ > π ^ (λ0 <= q[0] && q[0] <= λ1)) {
        var q1 = d3_geo_cartesianScale(u, (-w + t) / uu);
        d3_geo_cartesianAdd(q1, A);
        return [ q, d3_geo_spherical(q1) ];
      }
    }
    function code(λ, φ) {
      var r = smallRadius ? radius : π - radius, code = 0;
      if (λ < -r) code |= 1; else if (λ > r) code |= 2;
      if (φ < -r) code |= 4; else if (φ > r) code |= 8;
      return code;
    }
  }
  function d3_geom_clipLine(x0, y0, x1, y1) {
    return function(line) {
      var a = line.a, b = line.b, ax = a.x, ay = a.y, bx = b.x, by = b.y, t0 = 0, t1 = 1, dx = bx - ax, dy = by - ay, r;
      r = x0 - ax;
      if (!dx && r > 0) return;
      r /= dx;
      if (dx < 0) {
        if (r < t0) return;
        if (r < t1) t1 = r;
      } else if (dx > 0) {
        if (r > t1) return;
        if (r > t0) t0 = r;
      }
      r = x1 - ax;
      if (!dx && r < 0) return;
      r /= dx;
      if (dx < 0) {
        if (r > t1) return;
        if (r > t0) t0 = r;
      } else if (dx > 0) {
        if (r < t0) return;
        if (r < t1) t1 = r;
      }
      r = y0 - ay;
      if (!dy && r > 0) return;
      r /= dy;
      if (dy < 0) {
        if (r < t0) return;
        if (r < t1) t1 = r;
      } else if (dy > 0) {
        if (r > t1) return;
        if (r > t0) t0 = r;
      }
      r = y1 - ay;
      if (!dy && r < 0) return;
      r /= dy;
      if (dy < 0) {
        if (r > t1) return;
        if (r > t0) t0 = r;
      } else if (dy > 0) {
        if (r < t0) return;
        if (r < t1) t1 = r;
      }
      if (t0 > 0) line.a = {
        x: ax + t0 * dx,
        y: ay + t0 * dy
      };
      if (t1 < 1) line.b = {
        x: ax + t1 * dx,
        y: ay + t1 * dy
      };
      return line;
    };
  }
  var d3_geo_clipExtentMAX = 1e9;
  d3.geo.clipExtent = function() {
    var x0, y0, x1, y1, stream, clip, clipExtent = {
      stream: function(output) {
        if (stream) stream.valid = false;
        stream = clip(output);
        stream.valid = true;
        return stream;
      },
      extent: function(_) {
        if (!arguments.length) return [ [ x0, y0 ], [ x1, y1 ] ];
        clip = d3_geo_clipExtent(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]);
        if (stream) stream.valid = false, stream = null;
        return clipExtent;
      }
    };
    return clipExtent.extent([ [ 0, 0 ], [ 960, 500 ] ]);
  };
  function d3_geo_clipExtent(x0, y0, x1, y1) {
    return function(listener) {
      var listener_ = listener, bufferListener = d3_geo_clipBufferListener(), clipLine = d3_geom_clipLine(x0, y0, x1, y1), segments, polygon, ring;
      var clip = {
        point: point,
        lineStart: lineStart,
        lineEnd: lineEnd,
        polygonStart: function() {
          listener = bufferListener;
          segments = [];
          polygon = [];
          clean = true;
        },
        polygonEnd: function() {
          listener = listener_;
          segments = d3.merge(segments);
          var clipStartInside = insidePolygon([ x0, y1 ]), inside = clean && clipStartInside, visible = segments.length;
          if (inside || visible) {
            listener.polygonStart();
            if (inside) {
              listener.lineStart();
              interpolate(null, null, 1, listener);
              listener.lineEnd();
            }
            if (visible) {
              d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener);
            }
            listener.polygonEnd();
          }
          segments = polygon = ring = null;
        }
      };
      function insidePolygon(p) {
        var wn = 0, n = polygon.length, y = p[1];
        for (var i = 0; i < n; ++i) {
          for (var j = 1, v = polygon[i], m = v.length, a = v[0], b; j < m; ++j) {
            b = v[j];
            if (a[1] <= y) {
              if (b[1] > y && d3_cross2d(a, b, p) > 0) ++wn;
            } else {
              if (b[1] <= y && d3_cross2d(a, b, p) < 0) --wn;
            }
            a = b;
          }
        }
        return wn !== 0;
      }
      function interpolate(from, to, direction, listener) {
        var a = 0, a1 = 0;
        if (from == null || (a = corner(from, direction)) !== (a1 = corner(to, direction)) || comparePoints(from, to) < 0 ^ direction > 0) {
          do {
            listener.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);
          } while ((a = (a + direction + 4) % 4) !== a1);
        } else {
          listener.point(to[0], to[1]);
        }
      }
      function pointVisible(x, y) {
        return x0 <= x && x <= x1 && y0 <= y && y <= y1;
      }
      function point(x, y) {
        if (pointVisible(x, y)) listener.point(x, y);
      }
      var x__, y__, v__, x_, y_, v_, first, clean;
      function lineStart() {
        clip.point = linePoint;
        if (polygon) polygon.push(ring = []);
        first = true;
        v_ = false;
        x_ = y_ = NaN;
      }
      function lineEnd() {
        if (segments) {
          linePoint(x__, y__);
          if (v__ && v_) bufferListener.rejoin();
          segments.push(bufferListener.buffer());
        }
        clip.point = point;
        if (v_) listener.lineEnd();
      }
      function linePoint(x, y) {
        x = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, x));
        y = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, y));
        var v = pointVisible(x, y);
        if (polygon) ring.push([ x, y ]);
        if (first) {
          x__ = x, y__ = y, v__ = v;
          first = false;
          if (v) {
            listener.lineStart();
            listener.point(x, y);
          }
        } else {
          if (v && v_) listener.point(x, y); else {
            var l = {
              a: {
                x: x_,
                y: y_
              },
              b: {
                x: x,
                y: y
              }
            };
            if (clipLine(l)) {
              if (!v_) {
                listener.lineStart();
                listener.point(l.a.x, l.a.y);
              }
              listener.point(l.b.x, l.b.y);
              if (!v) listener.lineEnd();
              clean = false;
            } else if (v) {
              listener.lineStart();
              listener.point(x, y);
              clean = false;
            }
          }
        }
        x_ = x, y_ = y, v_ = v;
      }
      return clip;
    };
    function corner(p, direction) {
      return abs(p[0] - x0) < ε ? direction > 0 ? 0 : 3 : abs(p[0] - x1) < ε ? direction > 0 ? 2 : 1 : abs(p[1] - y0) < ε ? direction > 0 ? 1 : 0 : direction > 0 ? 3 : 2;
    }
    function compare(a, b) {
      return comparePoints(a.x, b.x);
    }
    function comparePoints(a, b) {
      var ca = corner(a, 1), cb = corner(b, 1);
      return ca !== cb ? ca - cb : ca === 0 ? b[1] - a[1] : ca === 1 ? a[0] - b[0] : ca === 2 ? a[1] - b[1] : b[0] - a[0];
    }
  }
  function d3_geo_conic(projectAt) {
    var φ0 = 0, φ1 = π / 3, m = d3_geo_projectionMutator(projectAt), p = m(φ0, φ1);
    p.parallels = function(_) {
      if (!arguments.length) return [ φ0 / π * 180, φ1 / π * 180 ];
      return m(φ0 = _[0] * π / 180, φ1 = _[1] * π / 180);
    };
    return p;
  }
  function d3_geo_conicEqualArea(φ0, φ1) {
    var sinφ0 = Math.sin(φ0), n = (sinφ0 + Math.sin(φ1)) / 2, C = 1 + sinφ0 * (2 * n - sinφ0), ρ0 = Math.sqrt(C) / n;
    function forward(λ, φ) {
      var ρ = Math.sqrt(C - 2 * n * Math.sin(φ)) / n;
      return [ ρ * Math.sin(λ *= n), ρ0 - ρ * Math.cos(λ) ];
    }
    forward.invert = function(x, y) {
      var ρ0_y = ρ0 - y;
      return [ Math.atan2(x, ρ0_y) / n, d3_asin((C - (x * x + ρ0_y * ρ0_y) * n * n) / (2 * n)) ];
    };
    return forward;
  }
  (d3.geo.conicEqualArea = function() {
    return d3_geo_conic(d3_geo_conicEqualArea);
  }).raw = d3_geo_conicEqualArea;
  d3.geo.albers = function() {
    return d3.geo.conicEqualArea().rotate([ 96, 0 ]).center([ -.6, 38.7 ]).parallels([ 29.5, 45.5 ]).scale(1070);
  };
  d3.geo.albersUsa = function() {
    var lower48 = d3.geo.albers();
    var alaska = d3.geo.conicEqualArea().rotate([ 154, 0 ]).center([ -2, 58.5 ]).parallels([ 55, 65 ]);
    var hawaii = d3.geo.conicEqualArea().rotate([ 157, 0 ]).center([ -3, 19.9 ]).parallels([ 8, 18 ]);
    var point, pointStream = {
      point: function(x, y) {
        point = [ x, y ];
      }
    }, lower48Point, alaskaPoint, hawaiiPoint;
    function albersUsa(coordinates) {
      var x = coordinates[0], y = coordinates[1];
      point = null;
      (lower48Point(x, y), point) || (alaskaPoint(x, y), point) || hawaiiPoint(x, y);
      return point;
    }
    albersUsa.invert = function(coordinates) {
      var k = lower48.scale(), t = lower48.translate(), x = (coordinates[0] - t[0]) / k, y = (coordinates[1] - t[1]) / k;
      return (y >= .12 && y < .234 && x >= -.425 && x < -.214 ? alaska : y >= .166 && y < .234 && x >= -.214 && x < -.115 ? hawaii : lower48).invert(coordinates);
    };
    albersUsa.stream = function(stream) {
      var lower48Stream = lower48.stream(stream), alaskaStream = alaska.stream(stream), hawaiiStream = hawaii.stream(stream);
      return {
        point: function(x, y) {
          lower48Stream.point(x, y);
          alaskaStream.point(x, y);
          hawaiiStream.point(x, y);
        },
        sphere: function() {
          lower48Stream.sphere();
          alaskaStream.sphere();
          hawaiiStream.sphere();
        },
        lineStart: function() {
          lower48Stream.lineStart();
          alaskaStream.lineStart();
          hawaiiStream.lineStart();
        },
        lineEnd: function() {
          lower48Stream.lineEnd();
          alaskaStream.lineEnd();
          hawaiiStream.lineEnd();
        },
        polygonStart: function() {
          lower48Stream.polygonStart();
          alaskaStream.polygonStart();
          hawaiiStream.polygonStart();
        },
        polygonEnd: function() {
          lower48Stream.polygonEnd();
          alaskaStream.polygonEnd();
          hawaiiStream.polygonEnd();
        }
      };
    };
    albersUsa.precision = function(_) {
      if (!arguments.length) return lower48.precision();
      lower48.precision(_);
      alaska.precision(_);
      hawaii.precision(_);
      return albersUsa;
    };
    albersUsa.scale = function(_) {
      if (!arguments.length) return lower48.scale();
      lower48.scale(_);
      alaska.scale(_ * .35);
      hawaii.scale(_);
      return albersUsa.translate(lower48.translate());
    };
    albersUsa.translate = function(_) {
      if (!arguments.length) return lower48.translate();
      var k = lower48.scale(), x = +_[0], y = +_[1];
      lower48Point = lower48.translate(_).clipExtent([ [ x - .455 * k, y - .238 * k ], [ x + .455 * k, y + .238 * k ] ]).stream(pointStream).point;
      alaskaPoint = alaska.translate([ x - .307 * k, y + .201 * k ]).clipExtent([ [ x - .425 * k + ε, y + .12 * k + ε ], [ x - .214 * k - ε, y + .234 * k - ε ] ]).stream(pointStream).point;
      hawaiiPoint = hawaii.translate([ x - .205 * k, y + .212 * k ]).clipExtent([ [ x - .214 * k + ε, y + .166 * k + ε ], [ x - .115 * k - ε, y + .234 * k - ε ] ]).stream(pointStream).point;
      return albersUsa;
    };
    return albersUsa.scale(1070);
  };
  var d3_geo_pathAreaSum, d3_geo_pathAreaPolygon, d3_geo_pathArea = {
    point: d3_noop,
    lineStart: d3_noop,
    lineEnd: d3_noop,
    polygonStart: function() {
      d3_geo_pathAreaPolygon = 0;
      d3_geo_pathArea.lineStart = d3_geo_pathAreaRingStart;
    },
    polygonEnd: function() {
      d3_geo_pathArea.lineStart = d3_geo_pathArea.lineEnd = d3_geo_pathArea.point = d3_noop;
      d3_geo_pathAreaSum += abs(d3_geo_pathAreaPolygon / 2);
    }
  };
  function d3_geo_pathAreaRingStart() {
    var x00, y00, x0, y0;
    d3_geo_pathArea.point = function(x, y) {
      d3_geo_pathArea.point = nextPoint;
      x00 = x0 = x, y00 = y0 = y;
    };
    function nextPoint(x, y) {
      d3_geo_pathAreaPolygon += y0 * x - x0 * y;
      x0 = x, y0 = y;
    }
    d3_geo_pathArea.lineEnd = function() {
      nextPoint(x00, y00);
    };
  }
  var d3_geo_pathBoundsX0, d3_geo_pathBoundsY0, d3_geo_pathBoundsX1, d3_geo_pathBoundsY1;
  var d3_geo_pathBounds = {
    point: d3_geo_pathBoundsPoint,
    lineStart: d3_noop,
    lineEnd: d3_noop,
    polygonStart: d3_noop,
    polygonEnd: d3_noop
  };
  function d3_geo_pathBoundsPoint(x, y) {
    if (x < d3_geo_pathBoundsX0) d3_geo_pathBoundsX0 = x;
    if (x > d3_geo_pathBoundsX1) d3_geo_pathBoundsX1 = x;
    if (y < d3_geo_pathBoundsY0) d3_geo_pathBoundsY0 = y;
    if (y > d3_geo_pathBoundsY1) d3_geo_pathBoundsY1 = y;
  }
  function d3_geo_pathBuffer() {
    var pointCircle = d3_geo_pathBufferCircle(4.5), buffer = [];
    var stream = {
      point: point,
      lineStart: function() {
        stream.point = pointLineStart;
      },
      lineEnd: lineEnd,
      polygonStart: function() {
        stream.lineEnd = lineEndPolygon;
      },
      polygonEnd: function() {
        stream.lineEnd = lineEnd;
        stream.point = point;
      },
      pointRadius: function(_) {
        pointCircle = d3_geo_pathBufferCircle(_);
        return stream;
      },
      result: function() {
        if (buffer.length) {
          var result = buffer.join("");
          buffer = [];
          return result;
        }
      }
    };
    function point(x, y) {
      buffer.push("M", x, ",", y, pointCircle);
    }
    function pointLineStart(x, y) {
      buffer.push("M", x, ",", y);
      stream.point = pointLine;
    }
    function pointLine(x, y) {
      buffer.push("L", x, ",", y);
    }
    function lineEnd() {
      stream.point = point;
    }
    function lineEndPolygon() {
      buffer.push("Z");
    }
    return stream;
  }
  function d3_geo_pathBufferCircle(radius) {
    return "m0," + radius + "a" + radius + "," + radius + " 0 1,1 0," + -2 * radius + "a" + radius + "," + radius + " 0 1,1 0," + 2 * radius + "z";
  }
  var d3_geo_pathCentroid = {
    point: d3_geo_pathCentroidPoint,
    lineStart: d3_geo_pathCentroidLineStart,
    lineEnd: d3_geo_pathCentroidLineEnd,
    polygonStart: function() {
      d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidRingStart;
    },
    polygonEnd: function() {
      d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;
      d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidLineStart;
      d3_geo_pathCentroid.lineEnd = d3_geo_pathCentroidLineEnd;
    }
  };
  function d3_geo_pathCentroidPoint(x, y) {
    d3_geo_centroidX0 += x;
    d3_geo_centroidY0 += y;
    ++d3_geo_centroidZ0;
  }
  function d3_geo_pathCentroidLineStart() {
    var x0, y0;
    d3_geo_pathCentroid.point = function(x, y) {
      d3_geo_pathCentroid.point = nextPoint;
      d3_geo_pathCentroidPoint(x0 = x, y0 = y);
    };
    function nextPoint(x, y) {
      var dx = x - x0, dy = y - y0, z = Math.sqrt(dx * dx + dy * dy);
      d3_geo_centroidX1 += z * (x0 + x) / 2;
      d3_geo_centroidY1 += z * (y0 + y) / 2;
      d3_geo_centroidZ1 += z;
      d3_geo_pathCentroidPoint(x0 = x, y0 = y);
    }
  }
  function d3_geo_pathCentroidLineEnd() {
    d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;
  }
  function d3_geo_pathCentroidRingStart() {
    var x00, y00, x0, y0;
    d3_geo_pathCentroid.point = function(x, y) {
      d3_geo_pathCentroid.point = nextPoint;
      d3_geo_pathCentroidPoint(x00 = x0 = x, y00 = y0 = y);
    };
    function nextPoint(x, y) {
      var dx = x - x0, dy = y - y0, z = Math.sqrt(dx * dx + dy * dy);
      d3_geo_centroidX1 += z * (x0 + x) / 2;
      d3_geo_centroidY1 += z * (y0 + y) / 2;
      d3_geo_centroidZ1 += z;
      z = y0 * x - x0 * y;
      d3_geo_centroidX2 += z * (x0 + x);
      d3_geo_centroidY2 += z * (y0 + y);
      d3_geo_centroidZ2 += z * 3;
      d3_geo_pathCentroidPoint(x0 = x, y0 = y);
    }
    d3_geo_pathCentroid.lineEnd = function() {
      nextPoint(x00, y00);
    };
  }
  function d3_geo_pathContext(context) {
    var pointRadius = 4.5;
    var stream = {
      point: point,
      lineStart: function() {
        stream.point = pointLineStart;
      },
      lineEnd: lineEnd,
      polygonStart: function() {
        stream.lineEnd = lineEndPolygon;
      },
      polygonEnd: function() {
        stream.lineEnd = lineEnd;
        stream.point = point;
      },
      pointRadius: function(_) {
        pointRadius = _;
        return stream;
      },
      result: d3_noop
    };
    function point(x, y) {
      context.moveTo(x + pointRadius, y);
      context.arc(x, y, pointRadius, 0, τ);
    }
    function pointLineStart(x, y) {
      context.moveTo(x, y);
      stream.point = pointLine;
    }
    function pointLine(x, y) {
      context.lineTo(x, y);
    }
    function lineEnd() {
      stream.point = point;
    }
    function lineEndPolygon() {
      context.closePath();
    }
    return stream;
  }
  function d3_geo_resample(project) {
    var δ2 = .5, cosMinDistance = Math.cos(30 * d3_radians), maxDepth = 16;
    function resample(stream) {
      return (maxDepth ? resampleRecursive : resampleNone)(stream);
    }
    function resampleNone(stream) {
      return d3_geo_transformPoint(stream, function(x, y) {
        x = project(x, y);
        stream.point(x[0], x[1]);
      });
    }
    function resampleRecursive(stream) {
      var λ00, φ00, x00, y00, a00, b00, c00, λ0, x0, y0, a0, b0, c0;
      var resample = {
        point: point,
        lineStart: lineStart,
        lineEnd: lineEnd,
        polygonStart: function() {
          stream.polygonStart();
          resample.lineStart = ringStart;
        },
        polygonEnd: function() {
          stream.polygonEnd();
          resample.lineStart = lineStart;
        }
      };
      function point(x, y) {
        x = project(x, y);
        stream.point(x[0], x[1]);
      }
      function lineStart() {
        x0 = NaN;
        resample.point = linePoint;
        stream.lineStart();
      }
      function linePoint(λ, φ) {
        var c = d3_geo_cartesian([ λ, φ ]), p = project(λ, φ);
        resampleLineTo(x0, y0, λ0, a0, b0, c0, x0 = p[0], y0 = p[1], λ0 = λ, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);
        stream.point(x0, y0);
      }
      function lineEnd() {
        resample.point = point;
        stream.lineEnd();
      }
      function ringStart() {
        lineStart();
        resample.point = ringPoint;
        resample.lineEnd = ringEnd;
      }
      function ringPoint(λ, φ) {
        linePoint(λ00 = λ, φ00 = φ), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;
        resample.point = linePoint;
      }
      function ringEnd() {
        resampleLineTo(x0, y0, λ0, a0, b0, c0, x00, y00, λ00, a00, b00, c00, maxDepth, stream);
        resample.lineEnd = lineEnd;
        lineEnd();
      }
      return resample;
    }
    function resampleLineTo(x0, y0, λ0, a0, b0, c0, x1, y1, λ1, a1, b1, c1, depth, stream) {
      var dx = x1 - x0, dy = y1 - y0, d2 = dx * dx + dy * dy;
      if (d2 > 4 * δ2 && depth--) {
        var a = a0 + a1, b = b0 + b1, c = c0 + c1, m = Math.sqrt(a * a + b * b + c * c), φ2 = Math.asin(c /= m), λ2 = abs(abs(c) - 1) < ε || abs(λ0 - λ1) < ε ? (λ0 + λ1) / 2 : Math.atan2(b, a), p = project(λ2, φ2), x2 = p[0], y2 = p[1], dx2 = x2 - x0, dy2 = y2 - y0, dz = dy * dx2 - dx * dy2;
        if (dz * dz / d2 > δ2 || abs((dx * dx2 + dy * dy2) / d2 - .5) > .3 || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) {
          resampleLineTo(x0, y0, λ0, a0, b0, c0, x2, y2, λ2, a /= m, b /= m, c, depth, stream);
          stream.point(x2, y2);
          resampleLineTo(x2, y2, λ2, a, b, c, x1, y1, λ1, a1, b1, c1, depth, stream);
        }
      }
    }
    resample.precision = function(_) {
      if (!arguments.length) return Math.sqrt(δ2);
      maxDepth = (δ2 = _ * _) > 0 && 16;
      return resample;
    };
    return resample;
  }
  d3.geo.path = function() {
    var pointRadius = 4.5, projection, context, projectStream, contextStream, cacheStream;
    function path(object) {
      if (object) {
        if (typeof pointRadius === "function") contextStream.pointRadius(+pointRadius.apply(this, arguments));
        if (!cacheStream || !cacheStream.valid) cacheStream = projectStream(contextStream);
        d3.geo.stream(object, cacheStream);
      }
      return contextStream.result();
    }
    path.area = function(object) {
      d3_geo_pathAreaSum = 0;
      d3.geo.stream(object, projectStream(d3_geo_pathArea));
      return d3_geo_pathAreaSum;
    };
    path.centroid = function(object) {
      d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;
      d3.geo.stream(object, projectStream(d3_geo_pathCentroid));
      return d3_geo_centroidZ2 ? [ d3_geo_centroidX2 / d3_geo_centroidZ2, d3_geo_centroidY2 / d3_geo_centroidZ2 ] : d3_geo_centroidZ1 ? [ d3_geo_centroidX1 / d3_geo_centroidZ1, d3_geo_centroidY1 / d3_geo_centroidZ1 ] : d3_geo_centroidZ0 ? [ d3_geo_centroidX0 / d3_geo_centroidZ0, d3_geo_centroidY0 / d3_geo_centroidZ0 ] : [ NaN, NaN ];
    };
    path.bounds = function(object) {
      d3_geo_pathBoundsX1 = d3_geo_pathBoundsY1 = -(d3_geo_pathBoundsX0 = d3_geo_pathBoundsY0 = Infinity);
      d3.geo.stream(object, projectStream(d3_geo_pathBounds));
      return [ [ d3_geo_pathBoundsX0, d3_geo_pathBoundsY0 ], [ d3_geo_pathBoundsX1, d3_geo_pathBoundsY1 ] ];
    };
    path.projection = function(_) {
      if (!arguments.length) return projection;
      projectStream = (projection = _) ? _.stream || d3_geo_pathProjectStream(_) : d3_identity;
      return reset();
    };
    path.context = function(_) {
      if (!arguments.length) return context;
      contextStream = (context = _) == null ? new d3_geo_pathBuffer() : new d3_geo_pathContext(_);
      if (typeof pointRadius !== "function") contextStream.pointRadius(pointRadius);
      return reset();
    };
    path.pointRadius = function(_) {
      if (!arguments.length) return pointRadius;
      pointRadius = typeof _ === "function" ? _ : (contextStream.pointRadius(+_), +_);
      return path;
    };
    function reset() {
      cacheStream = null;
      return path;
    }
    return path.projection(d3.geo.albersUsa()).context(null);
  };
  function d3_geo_pathProjectStream(project) {
    var resample = d3_geo_resample(function(x, y) {
      return project([ x * d3_degrees, y * d3_degrees ]);
    });
    return function(stream) {
      return d3_geo_projectionRadians(resample(stream));
    };
  }
  d3.geo.transform = function(methods) {
    return {
      stream: function(stream) {
        var transform = new d3_geo_transform(stream);
        for (var k in methods) transform[k] = methods[k];
        return transform;
      }
    };
  };
  function d3_geo_transform(stream) {
    this.stream = stream;
  }
  d3_geo_transform.prototype = {
    point: function(x, y) {
      this.stream.point(x, y);
    },
    sphere: function() {
      this.stream.sphere();
    },
    lineStart: function() {
      this.stream.lineStart();
    },
    lineEnd: function() {
      this.stream.lineEnd();
    },
    polygonStart: function() {
      this.stream.polygonStart();
    },
    polygonEnd: function() {
      this.stream.polygonEnd();
    }
  };
  function d3_geo_transformPoint(stream, point) {
    return {
      point: point,
      sphere: function() {
        stream.sphere();
      },
      lineStart: function() {
        stream.lineStart();
      },
      lineEnd: function() {
        stream.lineEnd();
      },
      polygonStart: function() {
        stream.polygonStart();
      },
      polygonEnd: function() {
        stream.polygonEnd();
      }
    };
  }
  d3.geo.projection = d3_geo_projection;
  d3.geo.projectionMutator = d3_geo_projectionMutator;
  function d3_geo_projection(project) {
    return d3_geo_projectionMutator(function() {
      return project;
    })();
  }
  function d3_geo_projectionMutator(projectAt) {
    var project, rotate, projectRotate, projectResample = d3_geo_resample(function(x, y) {
      x = project(x, y);
      return [ x[0] * k + δx, δy - x[1] * k ];
    }), k = 150, x = 480, y = 250, λ = 0, φ = 0, δλ = 0, δφ = 0, δγ = 0, δx, δy, preclip = d3_geo_clipAntimeridian, postclip = d3_identity, clipAngle = null, clipExtent = null, stream;
    function projection(point) {
      point = projectRotate(point[0] * d3_radians, point[1] * d3_radians);
      return [ point[0] * k + δx, δy - point[1] * k ];
    }
    function invert(point) {
      point = projectRotate.invert((point[0] - δx) / k, (δy - point[1]) / k);
      return point && [ point[0] * d3_degrees, point[1] * d3_degrees ];
    }
    projection.stream = function(output) {
      if (stream) stream.valid = false;
      stream = d3_geo_projectionRadians(preclip(rotate, projectResample(postclip(output))));
      stream.valid = true;
      return stream;
    };
    projection.clipAngle = function(_) {
      if (!arguments.length) return clipAngle;
      preclip = _ == null ? (clipAngle = _, d3_geo_clipAntimeridian) : d3_geo_clipCircle((clipAngle = +_) * d3_radians);
      return invalidate();
    };
    projection.clipExtent = function(_) {
      if (!arguments.length) return clipExtent;
      clipExtent = _;
      postclip = _ ? d3_geo_clipExtent(_[0][0], _[0][1], _[1][0], _[1][1]) : d3_identity;
      return invalidate();
    };
    projection.scale = function(_) {
      if (!arguments.length) return k;
      k = +_;
      return reset();
    };
    projection.translate = function(_) {
      if (!arguments.length) return [ x, y ];
      x = +_[0];
      y = +_[1];
      return reset();
    };
    projection.center = function(_) {
      if (!arguments.length) return [ λ * d3_degrees, φ * d3_degrees ];
      λ = _[0] % 360 * d3_radians;
      φ = _[1] % 360 * d3_radians;
      return reset();
    };
    projection.rotate = function(_) {
      if (!arguments.length) return [ δλ * d3_degrees, δφ * d3_degrees, δγ * d3_degrees ];
      δλ = _[0] % 360 * d3_radians;
      δφ = _[1] % 360 * d3_radians;
      δγ = _.length > 2 ? _[2] % 360 * d3_radians : 0;
      return reset();
    };
    d3.rebind(projection, projectResample, "precision");
    function reset() {
      projectRotate = d3_geo_compose(rotate = d3_geo_rotation(δλ, δφ, δγ), project);
      var center = project(λ, φ);
      δx = x - center[0] * k;
      δy = y + center[1] * k;
      return invalidate();
    }
    function invalidate() {
      if (stream) stream.valid = false, stream = null;
      return projection;
    }
    return function() {
      project = projectAt.apply(this, arguments);
      projection.invert = project.invert && invert;
      return reset();
    };
  }
  function d3_geo_projectionRadians(stream) {
    return d3_geo_transformPoint(stream, function(x, y) {
      stream.point(x * d3_radians, y * d3_radians);
    });
  }
  function d3_geo_equirectangular(λ, φ) {
    return [ λ, φ ];
  }
  (d3.geo.equirectangular = function() {
    return d3_geo_projection(d3_geo_equirectangular);
  }).raw = d3_geo_equirectangular.invert = d3_geo_equirectangular;
  d3.geo.rotation = function(rotate) {
    rotate = d3_geo_rotation(rotate[0] % 360 * d3_radians, rotate[1] * d3_radians, rotate.length > 2 ? rotate[2] * d3_radians : 0);
    function forward(coordinates) {
      coordinates = rotate(coordinates[0] * d3_radians, coordinates[1] * d3_radians);
      return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;
    }
    forward.invert = function(coordinates) {
      coordinates = rotate.invert(coordinates[0] * d3_radians, coordinates[1] * d3_radians);
      return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;
    };
    return forward;
  };
  function d3_geo_identityRotation(λ, φ) {
    return [ λ > π ? λ - τ : λ < -π ? λ + τ : λ, φ ];
  }
  d3_geo_identityRotation.invert = d3_geo_equirectangular;
  function d3_geo_rotation(δλ, δφ, δγ) {
    return δλ ? δφ || δγ ? d3_geo_compose(d3_geo_rotationλ(δλ), d3_geo_rotationφγ(δφ, δγ)) : d3_geo_rotationλ(δλ) : δφ || δγ ? d3_geo_rotationφγ(δφ, δγ) : d3_geo_identityRotation;
  }
  function d3_geo_forwardRotationλ(δλ) {
    return function(λ, φ) {
      return λ += δλ, [ λ > π ? λ - τ : λ < -π ? λ + τ : λ, φ ];
    };
  }
  function d3_geo_rotationλ(δλ) {
    var rotation = d3_geo_forwardRotationλ(δλ);
    rotation.invert = d3_geo_forwardRotationλ(-δλ);
    return rotation;
  }
  function d3_geo_rotationφγ(δφ, δγ) {
    var cosδφ = Math.cos(δφ), sinδφ = Math.sin(δφ), cosδγ = Math.cos(δγ), sinδγ = Math.sin(δγ);
    function rotation(λ, φ) {
      var cosφ = Math.cos(φ), x = Math.cos(λ) * cosφ, y = Math.sin(λ) * cosφ, z = Math.sin(φ), k = z * cosδφ + x * sinδφ;
      return [ Math.atan2(y * cosδγ - k * sinδγ, x * cosδφ - z * sinδφ), d3_asin(k * cosδγ + y * sinδγ) ];
    }
    rotation.invert = function(λ, φ) {
      var cosφ = Math.cos(φ), x = Math.cos(λ) * cosφ, y = Math.sin(λ) * cosφ, z = Math.sin(φ), k = z * cosδγ - y * sinδγ;
      return [ Math.atan2(y * cosδγ + z * sinδγ, x * cosδφ + k * sinδφ), d3_asin(k * cosδφ - x * sinδφ) ];
    };
    return rotation;
  }
  d3.geo.circle = function() {
    var origin = [ 0, 0 ], angle, precision = 6, interpolate;
    function circle() {
      var center = typeof origin === "function" ? origin.apply(this, arguments) : origin, rotate = d3_geo_rotation(-center[0] * d3_radians, -center[1] * d3_radians, 0).invert, ring = [];
      interpolate(null, null, 1, {
        point: function(x, y) {
          ring.push(x = rotate(x, y));
          x[0] *= d3_degrees, x[1] *= d3_degrees;
        }
      });
      return {
        type: "Polygon",
        coordinates: [ ring ]
      };
    }
    circle.origin = function(x) {
      if (!arguments.length) return origin;
      origin = x;
      return circle;
    };
    circle.angle = function(x) {
      if (!arguments.length) return angle;
      interpolate = d3_geo_circleInterpolate((angle = +x) * d3_radians, precision * d3_radians);
      return circle;
    };
    circle.precision = function(_) {
      if (!arguments.length) return precision;
      interpolate = d3_geo_circleInterpolate(angle * d3_radians, (precision = +_) * d3_radians);
      return circle;
    };
    return circle.angle(90);
  };
  function d3_geo_circleInterpolate(radius, precision) {
    var cr = Math.cos(radius), sr = Math.sin(radius);
    return function(from, to, direction, listener) {
      var step = direction * precision;
      if (from != null) {
        from = d3_geo_circleAngle(cr, from);
        to = d3_geo_circleAngle(cr, to);
        if (direction > 0 ? from < to : from > to) from += direction * τ;
      } else {
        from = radius + direction * τ;
        to = radius - .5 * step;
      }
      for (var point, t = from; direction > 0 ? t > to : t < to; t -= step) {
        listener.point((point = d3_geo_spherical([ cr, -sr * Math.cos(t), -sr * Math.sin(t) ]))[0], point[1]);
      }
    };
  }
  function d3_geo_circleAngle(cr, point) {
    var a = d3_geo_cartesian(point);
    a[0] -= cr;
    d3_geo_cartesianNormalize(a);
    var angle = d3_acos(-a[1]);
    return ((-a[2] < 0 ? -angle : angle) + 2 * Math.PI - ε) % (2 * Math.PI);
  }
  d3.geo.distance = function(a, b) {
    var Δλ = (b[0] - a[0]) * d3_radians, φ0 = a[1] * d3_radians, φ1 = b[1] * d3_radians, sinΔλ = Math.sin(Δλ), cosΔλ = Math.cos(Δλ), sinφ0 = Math.sin(φ0), cosφ0 = Math.cos(φ0), sinφ1 = Math.sin(φ1), cosφ1 = Math.cos(φ1), t;
    return Math.atan2(Math.sqrt((t = cosφ1 * sinΔλ) * t + (t = cosφ0 * sinφ1 - sinφ0 * cosφ1 * cosΔλ) * t), sinφ0 * sinφ1 + cosφ0 * cosφ1 * cosΔλ);
  };
  d3.geo.graticule = function() {
    var x1, x0, X1, X0, y1, y0, Y1, Y0, dx = 10, dy = dx, DX = 90, DY = 360, x, y, X, Y, precision = 2.5;
    function graticule() {
      return {
        type: "MultiLineString",
        coordinates: lines()
      };
    }
    function lines() {
      return d3.range(Math.ceil(X0 / DX) * DX, X1, DX).map(X).concat(d3.range(Math.ceil(Y0 / DY) * DY, Y1, DY).map(Y)).concat(d3.range(Math.ceil(x0 / dx) * dx, x1, dx).filter(function(x) {
        return abs(x % DX) > ε;
      }).map(x)).concat(d3.range(Math.ceil(y0 / dy) * dy, y1, dy).filter(function(y) {
        return abs(y % DY) > ε;
      }).map(y));
    }
    graticule.lines = function() {
      return lines().map(function(coordinates) {
        return {
          type: "LineString",
          coordinates: coordinates
        };
      });
    };
    graticule.outline = function() {
      return {
        type: "Polygon",
        coordinates: [ X(X0).concat(Y(Y1).slice(1), X(X1).reverse().slice(1), Y(Y0).reverse().slice(1)) ]
      };
    };
    graticule.extent = function(_) {
      if (!arguments.length) return graticule.minorExtent();
      return graticule.majorExtent(_).minorExtent(_);
    };
    graticule.majorExtent = function(_) {
      if (!arguments.length) return [ [ X0, Y0 ], [ X1, Y1 ] ];
      X0 = +_[0][0], X1 = +_[1][0];
      Y0 = +_[0][1], Y1 = +_[1][1];
      if (X0 > X1) _ = X0, X0 = X1, X1 = _;
      if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;
      return graticule.precision(precision);
    };
    graticule.minorExtent = function(_) {
      if (!arguments.length) return [ [ x0, y0 ], [ x1, y1 ] ];
      x0 = +_[0][0], x1 = +_[1][0];
      y0 = +_[0][1], y1 = +_[1][1];
      if (x0 > x1) _ = x0, x0 = x1, x1 = _;
      if (y0 > y1) _ = y0, y0 = y1, y1 = _;
      return graticule.precision(precision);
    };
    graticule.step = function(_) {
      if (!arguments.length) return graticule.minorStep();
      return graticule.majorStep(_).minorStep(_);
    };
    graticule.majorStep = function(_) {
      if (!arguments.length) return [ DX, DY ];
      DX = +_[0], DY = +_[1];
      return graticule;
    };
    graticule.minorStep = function(_) {
      if (!arguments.length) return [ dx, dy ];
      dx = +_[0], dy = +_[1];
      return graticule;
    };
    graticule.precision = function(_) {
      if (!arguments.length) return precision;
      precision = +_;
      x = d3_geo_graticuleX(y0, y1, 90);
      y = d3_geo_graticuleY(x0, x1, precision);
      X = d3_geo_graticuleX(Y0, Y1, 90);
      Y = d3_geo_graticuleY(X0, X1, precision);
      return graticule;
    };
    return graticule.majorExtent([ [ -180, -90 + ε ], [ 180, 90 - ε ] ]).minorExtent([ [ -180, -80 - ε ], [ 180, 80 + ε ] ]);
  };
  function d3_geo_graticuleX(y0, y1, dy) {
    var y = d3.range(y0, y1 - ε, dy).concat(y1);
    return function(x) {
      return y.map(function(y) {
        return [ x, y ];
      });
    };
  }
  function d3_geo_graticuleY(x0, x1, dx) {
    var x = d3.range(x0, x1 - ε, dx).concat(x1);
    return function(y) {
      return x.map(function(x) {
        return [ x, y ];
      });
    };
  }
  function d3_source(d) {
    return d.source;
  }
  function d3_target(d) {
    return d.target;
  }
  d3.geo.greatArc = function() {
    var source = d3_source, source_, target = d3_target, target_;
    function greatArc() {
      return {
        type: "LineString",
        coordinates: [ source_ || source.apply(this, arguments), target_ || target.apply(this, arguments) ]
      };
    }
    greatArc.distance = function() {
      return d3.geo.distance(source_ || source.apply(this, arguments), target_ || target.apply(this, arguments));
    };
    greatArc.source = function(_) {
      if (!arguments.length) return source;
      source = _, source_ = typeof _ === "function" ? null : _;
      return greatArc;
    };
    greatArc.target = function(_) {
      if (!arguments.length) return target;
      target = _, target_ = typeof _ === "function" ? null : _;
      return greatArc;
    };
    greatArc.precision = function() {
      return arguments.length ? greatArc : 0;
    };
    return greatArc;
  };
  d3.geo.interpolate = function(source, target) {
    return d3_geo_interpolate(source[0] * d3_radians, source[1] * d3_radians, target[0] * d3_radians, target[1] * d3_radians);
  };
  function d3_geo_interpolate(x0, y0, x1, y1) {
    var cy0 = Math.cos(y0), sy0 = Math.sin(y0), cy1 = Math.cos(y1), sy1 = Math.sin(y1), kx0 = cy0 * Math.cos(x0), ky0 = cy0 * Math.sin(x0), kx1 = cy1 * Math.cos(x1), ky1 = cy1 * Math.sin(x1), d = 2 * Math.asin(Math.sqrt(d3_haversin(y1 - y0) + cy0 * cy1 * d3_haversin(x1 - x0))), k = 1 / Math.sin(d);
    var interpolate = d ? function(t) {
      var B = Math.sin(t *= d) * k, A = Math.sin(d - t) * k, x = A * kx0 + B * kx1, y = A * ky0 + B * ky1, z = A * sy0 + B * sy1;
      return [ Math.atan2(y, x) * d3_degrees, Math.atan2(z, Math.sqrt(x * x + y * y)) * d3_degrees ];
    } : function() {
      return [ x0 * d3_degrees, y0 * d3_degrees ];
    };
    interpolate.distance = d;
    return interpolate;
  }
  d3.geo.length = function(object) {
    d3_geo_lengthSum = 0;
    d3.geo.stream(object, d3_geo_length);
    return d3_geo_lengthSum;
  };
  var d3_geo_lengthSum;
  var d3_geo_length = {
    sphere: d3_noop,
    point: d3_noop,
    lineStart: d3_geo_lengthLineStart,
    lineEnd: d3_noop,
    polygonStart: d3_noop,
    polygonEnd: d3_noop
  };
  function d3_geo_lengthLineStart() {
    var λ0, sinφ0, cosφ0;
    d3_geo_length.point = function(λ, φ) {
      λ0 = λ * d3_radians, sinφ0 = Math.sin(φ *= d3_radians), cosφ0 = Math.cos(φ);
      d3_geo_length.point = nextPoint;
    };
    d3_geo_length.lineEnd = function() {
      d3_geo_length.point = d3_geo_length.lineEnd = d3_noop;
    };
    function nextPoint(λ, φ) {
      var sinφ = Math.sin(φ *= d3_radians), cosφ = Math.cos(φ), t = abs((λ *= d3_radians) - λ0), cosΔλ = Math.cos(t);
      d3_geo_lengthSum += Math.atan2(Math.sqrt((t = cosφ * Math.sin(t)) * t + (t = cosφ0 * sinφ - sinφ0 * cosφ * cosΔλ) * t), sinφ0 * sinφ + cosφ0 * cosφ * cosΔλ);
      λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ;
    }
  }
  function d3_geo_azimuthal(scale, angle) {
    function azimuthal(λ, φ) {
      var cosλ = Math.cos(λ), cosφ = Math.cos(φ), k = scale(cosλ * cosφ);
      return [ k * cosφ * Math.sin(λ), k * Math.sin(φ) ];
    }
    azimuthal.invert = function(x, y) {
      var ρ = Math.sqrt(x * x + y * y), c = angle(ρ), sinc = Math.sin(c), cosc = Math.cos(c);
      return [ Math.atan2(x * sinc, ρ * cosc), Math.asin(ρ && y * sinc / ρ) ];
    };
    return azimuthal;
  }
  var d3_geo_azimuthalEqualArea = d3_geo_azimuthal(function(cosλcosφ) {
    return Math.sqrt(2 / (1 + cosλcosφ));
  }, function(ρ) {
    return 2 * Math.asin(ρ / 2);
  });
  (d3.geo.azimuthalEqualArea = function() {
    return d3_geo_projection(d3_geo_azimuthalEqualArea);
  }).raw = d3_geo_azimuthalEqualArea;
  var d3_geo_azimuthalEquidistant = d3_geo_azimuthal(function(cosλcosφ) {
    var c = Math.acos(cosλcosφ);
    return c && c / Math.sin(c);
  }, d3_identity);
  (d3.geo.azimuthalEquidistant = function() {
    return d3_geo_projection(d3_geo_azimuthalEquidistant);
  }).raw = d3_geo_azimuthalEquidistant;
  function d3_geo_conicConformal(φ0, φ1) {
    var cosφ0 = Math.cos(φ0), t = function(φ) {
      return Math.tan(π / 4 + φ / 2);
    }, n = φ0 === φ1 ? Math.sin(φ0) : Math.log(cosφ0 / Math.cos(φ1)) / Math.log(t(φ1) / t(φ0)), F = cosφ0 * Math.pow(t(φ0), n) / n;
    if (!n) return d3_geo_mercator;
    function forward(λ, φ) {
      if (F > 0) {
        if (φ < -halfπ + ε) φ = -halfπ + ε;
      } else {
        if (φ > halfπ - ε) φ = halfπ - ε;
      }
      var ρ = F / Math.pow(t(φ), n);
      return [ ρ * Math.sin(n * λ), F - ρ * Math.cos(n * λ) ];
    }
    forward.invert = function(x, y) {
      var ρ0_y = F - y, ρ = d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y);
      return [ Math.atan2(x, ρ0_y) / n, 2 * Math.atan(Math.pow(F / ρ, 1 / n)) - halfπ ];
    };
    return forward;
  }
  (d3.geo.conicConformal = function() {
    return d3_geo_conic(d3_geo_conicConformal);
  }).raw = d3_geo_conicConformal;
  function d3_geo_conicEquidistant(φ0, φ1) {
    var cosφ0 = Math.cos(φ0), n = φ0 === φ1 ? Math.sin(φ0) : (cosφ0 - Math.cos(φ1)) / (φ1 - φ0), G = cosφ0 / n + φ0;
    if (abs(n) < ε) return d3_geo_equirectangular;
    function forward(λ, φ) {
      var ρ = G - φ;
      return [ ρ * Math.sin(n * λ), G - ρ * Math.cos(n * λ) ];
    }
    forward.invert = function(x, y) {
      var ρ0_y = G - y;
      return [ Math.atan2(x, ρ0_y) / n, G - d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y) ];
    };
    return forward;
  }
  (d3.geo.conicEquidistant = function() {
    return d3_geo_conic(d3_geo_conicEquidistant);
  }).raw = d3_geo_conicEquidistant;
  var d3_geo_gnomonic = d3_geo_azimuthal(function(cosλcosφ) {
    return 1 / cosλcosφ;
  }, Math.atan);
  (d3.geo.gnomonic = function() {
    return d3_geo_projection(d3_geo_gnomonic);
  }).raw = d3_geo_gnomonic;
  function d3_geo_mercator(λ, φ) {
    return [ λ, Math.log(Math.tan(π / 4 + φ / 2)) ];
  }
  d3_geo_mercator.invert = function(x, y) {
    return [ x, 2 * Math.atan(Math.exp(y)) - halfπ ];
  };
  function d3_geo_mercatorProjection(project) {
    var m = d3_geo_projection(project), scale = m.scale, translate = m.translate, clipExtent = m.clipExtent, clipAuto;
    m.scale = function() {
      var v = scale.apply(m, arguments);
      return v === m ? clipAuto ? m.clipExtent(null) : m : v;
    };
    m.translate = function() {
      var v = translate.apply(m, arguments);
      return v === m ? clipAuto ? m.clipExtent(null) : m : v;
    };
    m.clipExtent = function(_) {
      var v = clipExtent.apply(m, arguments);
      if (v === m) {
        if (clipAuto = _ == null) {
          var k = π * scale(), t = translate();
          clipExtent([ [ t[0] - k, t[1] - k ], [ t[0] + k, t[1] + k ] ]);
        }
      } else if (clipAuto) {
        v = null;
      }
      return v;
    };
    return m.clipExtent(null);
  }
  (d3.geo.mercator = function() {
    return d3_geo_mercatorProjection(d3_geo_mercator);
  }).raw = d3_geo_mercator;
  var d3_geo_orthographic = d3_geo_azimuthal(function() {
    return 1;
  }, Math.asin);
  (d3.geo.orthographic = function() {
    return d3_geo_projection(d3_geo_orthographic);
  }).raw = d3_geo_orthographic;
  var d3_geo_stereographic = d3_geo_azimuthal(function(cosλcosφ) {
    return 1 / (1 + cosλcosφ);
  }, function(ρ) {
    return 2 * Math.atan(ρ);
  });
  (d3.geo.stereographic = function() {
    return d3_geo_projection(d3_geo_stereographic);
  }).raw = d3_geo_stereographic;
  function d3_geo_transverseMercator(λ, φ) {
    return [ Math.log(Math.tan(π / 4 + φ / 2)), -λ ];
  }
  d3_geo_transverseMercator.invert = function(x, y) {
    return [ -y, 2 * Math.atan(Math.exp(x)) - halfπ ];
  };
  (d3.geo.transverseMercator = function() {
    var projection = d3_geo_mercatorProjection(d3_geo_transverseMercator), center = projection.center, rotate = projection.rotate;
    projection.center = function(_) {
      return _ ? center([ -_[1], _[0] ]) : (_ = center(), [ _[1], -_[0] ]);
    };
    projection.rotate = function(_) {
      return _ ? rotate([ _[0], _[1], _.length > 2 ? _[2] + 90 : 90 ]) : (_ = rotate(), 
      [ _[0], _[1], _[2] - 90 ]);
    };
    return rotate([ 0, 0, 90 ]);
  }).raw = d3_geo_transverseMercator;
  d3.geom = {};
  function d3_geom_pointX(d) {
    return d[0];
  }
  function d3_geom_pointY(d) {
    return d[1];
  }
  d3.geom.hull = function(vertices) {
    var x = d3_geom_pointX, y = d3_geom_pointY;
    if (arguments.length) return hull(vertices);
    function hull(data) {
      if (data.length < 3) return [];
      var fx = d3_functor(x), fy = d3_functor(y), i, n = data.length, points = [], flippedPoints = [];
      for (i = 0; i < n; i++) {
        points.push([ +fx.call(this, data[i], i), +fy.call(this, data[i], i), i ]);
      }
      points.sort(d3_geom_hullOrder);
      for (i = 0; i < n; i++) flippedPoints.push([ points[i][0], -points[i][1] ]);
      var upper = d3_geom_hullUpper(points), lower = d3_geom_hullUpper(flippedPoints);
      var skipLeft = lower[0] === upper[0], skipRight = lower[lower.length - 1] === upper[upper.length - 1], polygon = [];
      for (i = upper.length - 1; i >= 0; --i) polygon.push(data[points[upper[i]][2]]);
      for (i = +skipLeft; i < lower.length - skipRight; ++i) polygon.push(data[points[lower[i]][2]]);
      return polygon;
    }
    hull.x = function(_) {
      return arguments.length ? (x = _, hull) : x;
    };
    hull.y = function(_) {
      return arguments.length ? (y = _, hull) : y;
    };
    return hull;
  };
  function d3_geom_hullUpper(points) {
    var n = points.length, hull = [ 0, 1 ], hs = 2;
    for (var i = 2; i < n; i++) {
      while (hs > 1 && d3_cross2d(points[hull[hs - 2]], points[hull[hs - 1]], points[i]) <= 0) --hs;
      hull[hs++] = i;
    }
    return hull.slice(0, hs);
  }
  function d3_geom_hullOrder(a, b) {
    return a[0] - b[0] || a[1] - b[1];
  }
  d3.geom.polygon = function(coordinates) {
    d3_subclass(coordinates, d3_geom_polygonPrototype);
    return coordinates;
  };
  var d3_geom_polygonPrototype = d3.geom.polygon.prototype = [];
  d3_geom_polygonPrototype.area = function() {
    var i = -1, n = this.length, a, b = this[n - 1], area = 0;
    while (++i < n) {
      a = b;
      b = this[i];
      area += a[1] * b[0] - a[0] * b[1];
    }
    return area * .5;
  };
  d3_geom_polygonPrototype.centroid = function(k) {
    var i = -1, n = this.length, x = 0, y = 0, a, b = this[n - 1], c;
    if (!arguments.length) k = -1 / (6 * this.area());
    while (++i < n) {
      a = b;
      b = this[i];
      c = a[0] * b[1] - b[0] * a[1];
      x += (a[0] + b[0]) * c;
      y += (a[1] + b[1]) * c;
    }
    return [ x * k, y * k ];
  };
  d3_geom_polygonPrototype.clip = function(subject) {
    var input, closed = d3_geom_polygonClosed(subject), i = -1, n = this.length - d3_geom_polygonClosed(this), j, m, a = this[n - 1], b, c, d;
    while (++i < n) {
      input = subject.slice();
      subject.length = 0;
      b = this[i];
      c = input[(m = input.length - closed) - 1];
      j = -1;
      while (++j < m) {
        d = input[j];
        if (d3_geom_polygonInside(d, a, b)) {
          if (!d3_geom_polygonInside(c, a, b)) {
            subject.push(d3_geom_polygonIntersect(c, d, a, b));
          }
          subject.push(d);
        } else if (d3_geom_polygonInside(c, a, b)) {
          subject.push(d3_geom_polygonIntersect(c, d, a, b));
        }
        c = d;
      }
      if (closed) subject.push(subject[0]);
      a = b;
    }
    return subject;
  };
  function d3_geom_polygonInside(p, a, b) {
    return (b[0] - a[0]) * (p[1] - a[1]) < (b[1] - a[1]) * (p[0] - a[0]);
  }
  function d3_geom_polygonIntersect(c, d, a, b) {
    var x1 = c[0], x3 = a[0], x21 = d[0] - x1, x43 = b[0] - x3, y1 = c[1], y3 = a[1], y21 = d[1] - y1, y43 = b[1] - y3, ua = (x43 * (y1 - y3) - y43 * (x1 - x3)) / (y43 * x21 - x43 * y21);
    return [ x1 + ua * x21, y1 + ua * y21 ];
  }
  function d3_geom_polygonClosed(coordinates) {
    var a = coordinates[0], b = coordinates[coordinates.length - 1];
    return !(a[0] - b[0] || a[1] - b[1]);
  }
  var d3_geom_voronoiEdges, d3_geom_voronoiCells, d3_geom_voronoiBeaches, d3_geom_voronoiBeachPool = [], d3_geom_voronoiFirstCircle, d3_geom_voronoiCircles, d3_geom_voronoiCirclePool = [];
  function d3_geom_voronoiBeach() {
    d3_geom_voronoiRedBlackNode(this);
    this.edge = this.site = this.circle = null;
  }
  function d3_geom_voronoiCreateBeach(site) {
    var beach = d3_geom_voronoiBeachPool.pop() || new d3_geom_voronoiBeach();
    beach.site = site;
    return beach;
  }
  function d3_geom_voronoiDetachBeach(beach) {
    d3_geom_voronoiDetachCircle(beach);
    d3_geom_voronoiBeaches.remove(beach);
    d3_geom_voronoiBeachPool.push(beach);
    d3_geom_voronoiRedBlackNode(beach);
  }
  function d3_geom_voronoiRemoveBeach(beach) {
    var circle = beach.circle, x = circle.x, y = circle.cy, vertex = {
      x: x,
      y: y
    }, previous = beach.P, next = beach.N, disappearing = [ beach ];
    d3_geom_voronoiDetachBeach(beach);
    var lArc = previous;
    while (lArc.circle && abs(x - lArc.circle.x) < ε && abs(y - lArc.circle.cy) < ε) {
      previous = lArc.P;
      disappearing.unshift(lArc);
      d3_geom_voronoiDetachBeach(lArc);
      lArc = previous;
    }
    disappearing.unshift(lArc);
    d3_geom_voronoiDetachCircle(lArc);
    var rArc = next;
    while (rArc.circle && abs(x - rArc.circle.x) < ε && abs(y - rArc.circle.cy) < ε) {
      next = rArc.N;
      disappearing.push(rArc);
      d3_geom_voronoiDetachBeach(rArc);
      rArc = next;
    }
    disappearing.push(rArc);
    d3_geom_voronoiDetachCircle(rArc);
    var nArcs = disappearing.length, iArc;
    for (iArc = 1; iArc < nArcs; ++iArc) {
      rArc = disappearing[iArc];
      lArc = disappearing[iArc - 1];
      d3_geom_voronoiSetEdgeEnd(rArc.edge, lArc.site, rArc.site, vertex);
    }
    lArc = disappearing[0];
    rArc = disappearing[nArcs - 1];
    rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, rArc.site, null, vertex);
    d3_geom_voronoiAttachCircle(lArc);
    d3_geom_voronoiAttachCircle(rArc);
  }
  function d3_geom_voronoiAddBeach(site) {
    var x = site.x, directrix = site.y, lArc, rArc, dxl, dxr, node = d3_geom_voronoiBeaches._;
    while (node) {
      dxl = d3_geom_voronoiLeftBreakPoint(node, directrix) - x;
      if (dxl > ε) node = node.L; else {
        dxr = x - d3_geom_voronoiRightBreakPoint(node, directrix);
        if (dxr > ε) {
          if (!node.R) {
            lArc = node;
            break;
          }
          node = node.R;
        } else {
          if (dxl > -ε) {
            lArc = node.P;
            rArc = node;
          } else if (dxr > -ε) {
            lArc = node;
            rArc = node.N;
          } else {
            lArc = rArc = node;
          }
          break;
        }
      }
    }
    var newArc = d3_geom_voronoiCreateBeach(site);
    d3_geom_voronoiBeaches.insert(lArc, newArc);
    if (!lArc && !rArc) return;
    if (lArc === rArc) {
      d3_geom_voronoiDetachCircle(lArc);
      rArc = d3_geom_voronoiCreateBeach(lArc.site);
      d3_geom_voronoiBeaches.insert(newArc, rArc);
      newArc.edge = rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);
      d3_geom_voronoiAttachCircle(lArc);
      d3_geom_voronoiAttachCircle(rArc);
      return;
    }
    if (!rArc) {
      newArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);
      return;
    }
    d3_geom_voronoiDetachCircle(lArc);
    d3_geom_voronoiDetachCircle(rArc);
    var lSite = lArc.site, ax = lSite.x, ay = lSite.y, bx = site.x - ax, by = site.y - ay, rSite = rArc.site, cx = rSite.x - ax, cy = rSite.y - ay, d = 2 * (bx * cy - by * cx), hb = bx * bx + by * by, hc = cx * cx + cy * cy, vertex = {
      x: (cy * hb - by * hc) / d + ax,
      y: (bx * hc - cx * hb) / d + ay
    };
    d3_geom_voronoiSetEdgeEnd(rArc.edge, lSite, rSite, vertex);
    newArc.edge = d3_geom_voronoiCreateEdge(lSite, site, null, vertex);
    rArc.edge = d3_geom_voronoiCreateEdge(site, rSite, null, vertex);
    d3_geom_voronoiAttachCircle(lArc);
    d3_geom_voronoiAttachCircle(rArc);
  }
  function d3_geom_voronoiLeftBreakPoint(arc, directrix) {
    var site = arc.site, rfocx = site.x, rfocy = site.y, pby2 = rfocy - directrix;
    if (!pby2) return rfocx;
    var lArc = arc.P;
    if (!lArc) return -Infinity;
    site = lArc.site;
    var lfocx = site.x, lfocy = site.y, plby2 = lfocy - directrix;
    if (!plby2) return lfocx;
    var hl = lfocx - rfocx, aby2 = 1 / pby2 - 1 / plby2, b = hl / plby2;
    if (aby2) return (-b + Math.sqrt(b * b - 2 * aby2 * (hl * hl / (-2 * plby2) - lfocy + plby2 / 2 + rfocy - pby2 / 2))) / aby2 + rfocx;
    return (rfocx + lfocx) / 2;
  }
  function d3_geom_voronoiRightBreakPoint(arc, directrix) {
    var rArc = arc.N;
    if (rArc) return d3_geom_voronoiLeftBreakPoint(rArc, directrix);
    var site = arc.site;
    return site.y === directrix ? site.x : Infinity;
  }
  function d3_geom_voronoiCell(site) {
    this.site = site;
    this.edges = [];
  }
  d3_geom_voronoiCell.prototype.prepare = function() {
    var halfEdges = this.edges, iHalfEdge = halfEdges.length, edge;
    while (iHalfEdge--) {
      edge = halfEdges[iHalfEdge].edge;
      if (!edge.b || !edge.a) halfEdges.splice(iHalfEdge, 1);
    }
    halfEdges.sort(d3_geom_voronoiHalfEdgeOrder);
    return halfEdges.length;
  };
  function d3_geom_voronoiCloseCells(extent) {
    var x0 = extent[0][0], x1 = extent[1][0], y0 = extent[0][1], y1 = extent[1][1], x2, y2, x3, y3, cells = d3_geom_voronoiCells, iCell = cells.length, cell, iHalfEdge, halfEdges, nHalfEdges, start, end;
    while (iCell--) {
      cell = cells[iCell];
      if (!cell || !cell.prepare()) continue;
      halfEdges = cell.edges;
      nHalfEdges = halfEdges.length;
      iHalfEdge = 0;
      while (iHalfEdge < nHalfEdges) {
        end = halfEdges[iHalfEdge].end(), x3 = end.x, y3 = end.y;
        start = halfEdges[++iHalfEdge % nHalfEdges].start(), x2 = start.x, y2 = start.y;
        if (abs(x3 - x2) > ε || abs(y3 - y2) > ε) {
          halfEdges.splice(iHalfEdge, 0, new d3_geom_voronoiHalfEdge(d3_geom_voronoiCreateBorderEdge(cell.site, end, abs(x3 - x0) < ε && y1 - y3 > ε ? {
            x: x0,
            y: abs(x2 - x0) < ε ? y2 : y1
          } : abs(y3 - y1) < ε && x1 - x3 > ε ? {
            x: abs(y2 - y1) < ε ? x2 : x1,
            y: y1
          } : abs(x3 - x1) < ε && y3 - y0 > ε ? {
            x: x1,
            y: abs(x2 - x1) < ε ? y2 : y0
          } : abs(y3 - y0) < ε && x3 - x0 > ε ? {
            x: abs(y2 - y0) < ε ? x2 : x0,
            y: y0
          } : null), cell.site, null));
          ++nHalfEdges;
        }
      }
    }
  }
  function d3_geom_voronoiHalfEdgeOrder(a, b) {
    return b.angle - a.angle;
  }
  function d3_geom_voronoiCircle() {
    d3_geom_voronoiRedBlackNode(this);
    this.x = this.y = this.arc = this.site = this.cy = null;
  }
  function d3_geom_voronoiAttachCircle(arc) {
    var lArc = arc.P, rArc = arc.N;
    if (!lArc || !rArc) return;
    var lSite = lArc.site, cSite = arc.site, rSite = rArc.site;
    if (lSite === rSite) return;
    var bx = cSite.x, by = cSite.y, ax = lSite.x - bx, ay = lSite.y - by, cx = rSite.x - bx, cy = rSite.y - by;
    var d = 2 * (ax * cy - ay * cx);
    if (d >= -ε2) return;
    var ha = ax * ax + ay * ay, hc = cx * cx + cy * cy, x = (cy * ha - ay * hc) / d, y = (ax * hc - cx * ha) / d, cy = y + by;
    var circle = d3_geom_voronoiCirclePool.pop() || new d3_geom_voronoiCircle();
    circle.arc = arc;
    circle.site = cSite;
    circle.x = x + bx;
    circle.y = cy + Math.sqrt(x * x + y * y);
    circle.cy = cy;
    arc.circle = circle;
    var before = null, node = d3_geom_voronoiCircles._;
    while (node) {
      if (circle.y < node.y || circle.y === node.y && circle.x <= node.x) {
        if (node.L) node = node.L; else {
          before = node.P;
          break;
        }
      } else {
        if (node.R) node = node.R; else {
          before = node;
          break;
        }
      }
    }
    d3_geom_voronoiCircles.insert(before, circle);
    if (!before) d3_geom_voronoiFirstCircle = circle;
  }
  function d3_geom_voronoiDetachCircle(arc) {
    var circle = arc.circle;
    if (circle) {
      if (!circle.P) d3_geom_voronoiFirstCircle = circle.N;
      d3_geom_voronoiCircles.remove(circle);
      d3_geom_voronoiCirclePool.push(circle);
      d3_geom_voronoiRedBlackNode(circle);
      arc.circle = null;
    }
  }
  function d3_geom_voronoiClipEdges(extent) {
    var edges = d3_geom_voronoiEdges, clip = d3_geom_clipLine(extent[0][0], extent[0][1], extent[1][0], extent[1][1]), i = edges.length, e;
    while (i--) {
      e = edges[i];
      if (!d3_geom_voronoiConnectEdge(e, extent) || !clip(e) || abs(e.a.x - e.b.x) < ε && abs(e.a.y - e.b.y) < ε) {
        e.a = e.b = null;
        edges.splice(i, 1);
      }
    }
  }
  function d3_geom_voronoiConnectEdge(edge, extent) {
    var vb = edge.b;
    if (vb) return true;
    var va = edge.a, x0 = extent[0][0], x1 = extent[1][0], y0 = extent[0][1], y1 = extent[1][1], lSite = edge.l, rSite = edge.r, lx = lSite.x, ly = lSite.y, rx = rSite.x, ry = rSite.y, fx = (lx + rx) / 2, fy = (ly + ry) / 2, fm, fb;
    if (ry === ly) {
      if (fx < x0 || fx >= x1) return;
      if (lx > rx) {
        if (!va) va = {
          x: fx,
          y: y0
        }; else if (va.y >= y1) return;
        vb = {
          x: fx,
          y: y1
        };
      } else {
        if (!va) va = {
          x: fx,
          y: y1
        }; else if (va.y < y0) return;
        vb = {
          x: fx,
          y: y0
        };
      }
    } else {
      fm = (lx - rx) / (ry - ly);
      fb = fy - fm * fx;
      if (fm < -1 || fm > 1) {
        if (lx > rx) {
          if (!va) va = {
            x: (y0 - fb) / fm,
            y: y0
          }; else if (va.y >= y1) return;
          vb = {
            x: (y1 - fb) / fm,
            y: y1
          };
        } else {
          if (!va) va = {
            x: (y1 - fb) / fm,
            y: y1
          }; else if (va.y < y0) return;
          vb = {
            x: (y0 - fb) / fm,
            y: y0
          };
        }
      } else {
        if (ly < ry) {
          if (!va) va = {
            x: x0,
            y: fm * x0 + fb
          }; else if (va.x >= x1) return;
          vb = {
            x: x1,
            y: fm * x1 + fb
          };
        } else {
          if (!va) va = {
            x: x1,
            y: fm * x1 + fb
          }; else if (va.x < x0) return;
          vb = {
            x: x0,
            y: fm * x0 + fb
          };
        }
      }
    }
    edge.a = va;
    edge.b = vb;
    return true;
  }
  function d3_geom_voronoiEdge(lSite, rSite) {
    this.l = lSite;
    this.r = rSite;
    this.a = this.b = null;
  }
  function d3_geom_voronoiCreateEdge(lSite, rSite, va, vb) {
    var edge = new d3_geom_voronoiEdge(lSite, rSite);
    d3_geom_voronoiEdges.push(edge);
    if (va) d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, va);
    if (vb) d3_geom_voronoiSetEdgeEnd(edge, rSite, lSite, vb);
    d3_geom_voronoiCells[lSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, lSite, rSite));
    d3_geom_voronoiCells[rSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, rSite, lSite));
    return edge;
  }
  function d3_geom_voronoiCreateBorderEdge(lSite, va, vb) {
    var edge = new d3_geom_voronoiEdge(lSite, null);
    edge.a = va;
    edge.b = vb;
    d3_geom_voronoiEdges.push(edge);
    return edge;
  }
  function d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, vertex) {
    if (!edge.a && !edge.b) {
      edge.a = vertex;
      edge.l = lSite;
      edge.r = rSite;
    } else if (edge.l === rSite) {
      edge.b = vertex;
    } else {
      edge.a = vertex;
    }
  }
  function d3_geom_voronoiHalfEdge(edge, lSite, rSite) {
    var va = edge.a, vb = edge.b;
    this.edge = edge;
    this.site = lSite;
    this.angle = rSite ? Math.atan2(rSite.y - lSite.y, rSite.x - lSite.x) : edge.l === lSite ? Math.atan2(vb.x - va.x, va.y - vb.y) : Math.atan2(va.x - vb.x, vb.y - va.y);
  }
  d3_geom_voronoiHalfEdge.prototype = {
    start: function() {
      return this.edge.l === this.site ? this.edge.a : this.edge.b;
    },
    end: function() {
      return this.edge.l === this.site ? this.edge.b : this.edge.a;
    }
  };
  function d3_geom_voronoiRedBlackTree() {
    this._ = null;
  }
  function d3_geom_voronoiRedBlackNode(node) {
    node.U = node.C = node.L = node.R = node.P = node.N = null;
  }
  d3_geom_voronoiRedBlackTree.prototype = {
    insert: function(after, node) {
      var parent, grandpa, uncle;
      if (after) {
        node.P = after;
        node.N = after.N;
        if (after.N) after.N.P = node;
        after.N = node;
        if (after.R) {
          after = after.R;
          while (after.L) after = after.L;
          after.L = node;
        } else {
          after.R = node;
        }
        parent = after;
      } else if (this._) {
        after = d3_geom_voronoiRedBlackFirst(this._);
        node.P = null;
        node.N = after;
        after.P = after.L = node;
        parent = after;
      } else {
        node.P = node.N = null;
        this._ = node;
        parent = null;
      }
      node.L = node.R = null;
      node.U = parent;
      node.C = true;
      after = node;
      while (parent && parent.C) {
        grandpa = parent.U;
        if (parent === grandpa.L) {
          uncle = grandpa.R;
          if (uncle && uncle.C) {
            parent.C = uncle.C = false;
            grandpa.C = true;
            after = grandpa;
          } else {
            if (after === parent.R) {
              d3_geom_voronoiRedBlackRotateLeft(this, parent);
              after = parent;
              parent = after.U;
            }
            parent.C = false;
            grandpa.C = true;
            d3_geom_voronoiRedBlackRotateRight(this, grandpa);
          }
        } else {
          uncle = grandpa.L;
          if (uncle && uncle.C) {
            parent.C = uncle.C = false;
            grandpa.C = true;
            after = grandpa;
          } else {
            if (after === parent.L) {
              d3_geom_voronoiRedBlackRotateRight(this, parent);
              after = parent;
              parent = after.U;
            }
            parent.C = false;
            grandpa.C = true;
            d3_geom_voronoiRedBlackRotateLeft(this, grandpa);
          }
        }
        parent = after.U;
      }
      this._.C = false;
    },
    remove: function(node) {
      if (node.N) node.N.P = node.P;
      if (node.P) node.P.N = node.N;
      node.N = node.P = null;
      var parent = node.U, sibling, left = node.L, right = node.R, next, red;
      if (!left) next = right; else if (!right) next = left; else next = d3_geom_voronoiRedBlackFirst(right);
      if (parent) {
        if (parent.L === node) parent.L = next; else parent.R = next;
      } else {
        this._ = next;
      }
      if (left && right) {
        red = next.C;
        next.C = node.C;
        next.L = left;
        left.U = next;
        if (next !== right) {
          parent = next.U;
          next.U = node.U;
          node = next.R;
          parent.L = node;
          next.R = right;
          right.U = next;
        } else {
          next.U = parent;
          parent = next;
          node = next.R;
        }
      } else {
        red = node.C;
        node = next;
      }
      if (node) node.U = parent;
      if (red) return;
      if (node && node.C) {
        node.C = false;
        return;
      }
      do {
        if (node === this._) break;
        if (node === parent.L) {
          sibling = parent.R;
          if (sibling.C) {
            sibling.C = false;
            parent.C = true;
            d3_geom_voronoiRedBlackRotateLeft(this, parent);
            sibling = parent.R;
          }
          if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {
            if (!sibling.R || !sibling.R.C) {
              sibling.L.C = false;
              sibling.C = true;
              d3_geom_voronoiRedBlackRotateRight(this, sibling);
              sibling = parent.R;
            }
            sibling.C = parent.C;
            parent.C = sibling.R.C = false;
            d3_geom_voronoiRedBlackRotateLeft(this, parent);
            node = this._;
            break;
          }
        } else {
          sibling = parent.L;
          if (sibling.C) {
            sibling.C = false;
            parent.C = true;
            d3_geom_voronoiRedBlackRotateRight(this, parent);
            sibling = parent.L;
          }
          if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {
            if (!sibling.L || !sibling.L.C) {
              sibling.R.C = false;
              sibling.C = true;
              d3_geom_voronoiRedBlackRotateLeft(this, sibling);
              sibling = parent.L;
            }
            sibling.C = parent.C;
            parent.C = sibling.L.C = false;
            d3_geom_voronoiRedBlackRotateRight(this, parent);
            node = this._;
            break;
          }
        }
        sibling.C = true;
        node = parent;
        parent = parent.U;
      } while (!node.C);
      if (node) node.C = false;
    }
  };
  function d3_geom_voronoiRedBlackRotateLeft(tree, node) {
    var p = node, q = node.R, parent = p.U;
    if (parent) {
      if (parent.L === p) parent.L = q; else parent.R = q;
    } else {
      tree._ = q;
    }
    q.U = parent;
    p.U = q;
    p.R = q.L;
    if (p.R) p.R.U = p;
    q.L = p;
  }
  function d3_geom_voronoiRedBlackRotateRight(tree, node) {
    var p = node, q = node.L, parent = p.U;
    if (parent) {
      if (parent.L === p) parent.L = q; else parent.R = q;
    } else {
      tree._ = q;
    }
    q.U = parent;
    p.U = q;
    p.L = q.R;
    if (p.L) p.L.U = p;
    q.R = p;
  }
  function d3_geom_voronoiRedBlackFirst(node) {
    while (node.L) node = node.L;
    return node;
  }
  function d3_geom_voronoi(sites, bbox) {
    var site = sites.sort(d3_geom_voronoiVertexOrder).pop(), x0, y0, circle;
    d3_geom_voronoiEdges = [];
    d3_geom_voronoiCells = new Array(sites.length);
    d3_geom_voronoiBeaches = new d3_geom_voronoiRedBlackTree();
    d3_geom_voronoiCircles = new d3_geom_voronoiRedBlackTree();
    while (true) {
      circle = d3_geom_voronoiFirstCircle;
      if (site && (!circle || site.y < circle.y || site.y === circle.y && site.x < circle.x)) {
        if (site.x !== x0 || site.y !== y0) {
          d3_geom_voronoiCells[site.i] = new d3_geom_voronoiCell(site);
          d3_geom_voronoiAddBeach(site);
          x0 = site.x, y0 = site.y;
        }
        site = sites.pop();
      } else if (circle) {
        d3_geom_voronoiRemoveBeach(circle.arc);
      } else {
        break;
      }
    }
    if (bbox) d3_geom_voronoiClipEdges(bbox), d3_geom_voronoiCloseCells(bbox);
    var diagram = {
      cells: d3_geom_voronoiCells,
      edges: d3_geom_voronoiEdges
    };
    d3_geom_voronoiBeaches = d3_geom_voronoiCircles = d3_geom_voronoiEdges = d3_geom_voronoiCells = null;
    return diagram;
  }
  function d3_geom_voronoiVertexOrder(a, b) {
    return b.y - a.y || b.x - a.x;
  }
  d3.geom.voronoi = function(points) {
    var x = d3_geom_pointX, y = d3_geom_pointY, fx = x, fy = y, clipExtent = d3_geom_voronoiClipExtent;
    if (points) return voronoi(points);
    function voronoi(data) {
      var polygons = new Array(data.length), x0 = clipExtent[0][0], y0 = clipExtent[0][1], x1 = clipExtent[1][0], y1 = clipExtent[1][1];
      d3_geom_voronoi(sites(data), clipExtent).cells.forEach(function(cell, i) {
        var edges = cell.edges, site = cell.site, polygon = polygons[i] = edges.length ? edges.map(function(e) {
          var s = e.start();
          return [ s.x, s.y ];
        }) : site.x >= x0 && site.x <= x1 && site.y >= y0 && site.y <= y1 ? [ [ x0, y1 ], [ x1, y1 ], [ x1, y0 ], [ x0, y0 ] ] : [];
        polygon.point = data[i];
      });
      return polygons;
    }
    function sites(data) {
      return data.map(function(d, i) {
        return {
          x: Math.round(fx(d, i) / ε) * ε,
          y: Math.round(fy(d, i) / ε) * ε,
          i: i
        };
      });
    }
    voronoi.links = function(data) {
      return d3_geom_voronoi(sites(data)).edges.filter(function(edge) {
        return edge.l && edge.r;
      }).map(function(edge) {
        return {
          source: data[edge.l.i],
          target: data[edge.r.i]
        };
      });
    };
    voronoi.triangles = function(data) {
      var triangles = [];
      d3_geom_voronoi(sites(data)).cells.forEach(function(cell, i) {
        var site = cell.site, edges = cell.edges.sort(d3_geom_voronoiHalfEdgeOrder), j = -1, m = edges.length, e0, s0, e1 = edges[m - 1].edge, s1 = e1.l === site ? e1.r : e1.l;
        while (++j < m) {
          e0 = e1;
          s0 = s1;
          e1 = edges[j].edge;
          s1 = e1.l === site ? e1.r : e1.l;
          if (i < s0.i && i < s1.i && d3_geom_voronoiTriangleArea(site, s0, s1) < 0) {
            triangles.push([ data[i], data[s0.i], data[s1.i] ]);
          }
        }
      });
      return triangles;
    };
    voronoi.x = function(_) {
      return arguments.length ? (fx = d3_functor(x = _), voronoi) : x;
    };
    voronoi.y = function(_) {
      return arguments.length ? (fy = d3_functor(y = _), voronoi) : y;
    };
    voronoi.clipExtent = function(_) {
      if (!arguments.length) return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent;
      clipExtent = _ == null ? d3_geom_voronoiClipExtent : _;
      return voronoi;
    };
    voronoi.size = function(_) {
      if (!arguments.length) return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent && clipExtent[1];
      return voronoi.clipExtent(_ && [ [ 0, 0 ], _ ]);
    };
    return voronoi;
  };
  var d3_geom_voronoiClipExtent = [ [ -1e6, -1e6 ], [ 1e6, 1e6 ] ];
  function d3_geom_voronoiTriangleArea(a, b, c) {
    return (a.x - c.x) * (b.y - a.y) - (a.x - b.x) * (c.y - a.y);
  }
  d3.geom.delaunay = function(vertices) {
    return d3.geom.voronoi().triangles(vertices);
  };
  d3.geom.quadtree = function(points, x1, y1, x2, y2) {
    var x = d3_geom_pointX, y = d3_geom_pointY, compat;
    if (compat = arguments.length) {
      x = d3_geom_quadtreeCompatX;
      y = d3_geom_quadtreeCompatY;
      if (compat === 3) {
        y2 = y1;
        x2 = x1;
        y1 = x1 = 0;
      }
      return quadtree(points);
    }
    function quadtree(data) {
      var d, fx = d3_functor(x), fy = d3_functor(y), xs, ys, i, n, x1_, y1_, x2_, y2_;
      if (x1 != null) {
        x1_ = x1, y1_ = y1, x2_ = x2, y2_ = y2;
      } else {
        x2_ = y2_ = -(x1_ = y1_ = Infinity);
        xs = [], ys = [];
        n = data.length;
        if (compat) for (i = 0; i < n; ++i) {
          d = data[i];
          if (d.x < x1_) x1_ = d.x;
          if (d.y < y1_) y1_ = d.y;
          if (d.x > x2_) x2_ = d.x;
          if (d.y > y2_) y2_ = d.y;
          xs.push(d.x);
          ys.push(d.y);
        } else for (i = 0; i < n; ++i) {
          var x_ = +fx(d = data[i], i), y_ = +fy(d, i);
          if (x_ < x1_) x1_ = x_;
          if (y_ < y1_) y1_ = y_;
          if (x_ > x2_) x2_ = x_;
          if (y_ > y2_) y2_ = y_;
          xs.push(x_);
          ys.push(y_);
        }
      }
      var dx = x2_ - x1_, dy = y2_ - y1_;
      if (dx > dy) y2_ = y1_ + dx; else x2_ = x1_ + dy;
      function insert(n, d, x, y, x1, y1, x2, y2) {
        if (isNaN(x) || isNaN(y)) return;
        if (n.leaf) {
          var nx = n.x, ny = n.y;
          if (nx != null) {
            if (abs(nx - x) + abs(ny - y) < .01) {
              insertChild(n, d, x, y, x1, y1, x2, y2);
            } else {
              var nPoint = n.point;
              n.x = n.y = n.point = null;
              insertChild(n, nPoint, nx, ny, x1, y1, x2, y2);
              insertChild(n, d, x, y, x1, y1, x2, y2);
            }
          } else {
            n.x = x, n.y = y, n.point = d;
          }
        } else {
          insertChild(n, d, x, y, x1, y1, x2, y2);
        }
      }
      function insertChild(n, d, x, y, x1, y1, x2, y2) {
        var xm = (x1 + x2) * .5, ym = (y1 + y2) * .5, right = x >= xm, below = y >= ym, i = below << 1 | right;
        n.leaf = false;
        n = n.nodes[i] || (n.nodes[i] = d3_geom_quadtreeNode());
        if (right) x1 = xm; else x2 = xm;
        if (below) y1 = ym; else y2 = ym;
        insert(n, d, x, y, x1, y1, x2, y2);
      }
      var root = d3_geom_quadtreeNode();
      root.add = function(d) {
        insert(root, d, +fx(d, ++i), +fy(d, i), x1_, y1_, x2_, y2_);
      };
      root.visit = function(f) {
        d3_geom_quadtreeVisit(f, root, x1_, y1_, x2_, y2_);
      };
      root.find = function(point) {
        return d3_geom_quadtreeFind(root, point[0], point[1], x1_, y1_, x2_, y2_);
      };
      i = -1;
      if (x1 == null) {
        while (++i < n) {
          insert(root, data[i], xs[i], ys[i], x1_, y1_, x2_, y2_);
        }
        --i;
      } else data.forEach(root.add);
      xs = ys = data = d = null;
      return root;
    }
    quadtree.x = function(_) {
      return arguments.length ? (x = _, quadtree) : x;
    };
    quadtree.y = function(_) {
      return arguments.length ? (y = _, quadtree) : y;
    };
    quadtree.extent = function(_) {
      if (!arguments.length) return x1 == null ? null : [ [ x1, y1 ], [ x2, y2 ] ];
      if (_ == null) x1 = y1 = x2 = y2 = null; else x1 = +_[0][0], y1 = +_[0][1], x2 = +_[1][0], 
      y2 = +_[1][1];
      return quadtree;
    };
    quadtree.size = function(_) {
      if (!arguments.length) return x1 == null ? null : [ x2 - x1, y2 - y1 ];
      if (_ == null) x1 = y1 = x2 = y2 = null; else x1 = y1 = 0, x2 = +_[0], y2 = +_[1];
      return quadtree;
    };
    return quadtree;
  };
  function d3_geom_quadtreeCompatX(d) {
    return d.x;
  }
  function d3_geom_quadtreeCompatY(d) {
    return d.y;
  }
  function d3_geom_quadtreeNode() {
    return {
      leaf: true,
      nodes: [],
      point: null,
      x: null,
      y: null
    };
  }
  function d3_geom_quadtreeVisit(f, node, x1, y1, x2, y2) {
    if (!f(node, x1, y1, x2, y2)) {
      var sx = (x1 + x2) * .5, sy = (y1 + y2) * .5, children = node.nodes;
      if (children[0]) d3_geom_quadtreeVisit(f, children[0], x1, y1, sx, sy);
      if (children[1]) d3_geom_quadtreeVisit(f, children[1], sx, y1, x2, sy);
      if (children[2]) d3_geom_quadtreeVisit(f, children[2], x1, sy, sx, y2);
      if (children[3]) d3_geom_quadtreeVisit(f, children[3], sx, sy, x2, y2);
    }
  }
  function d3_geom_quadtreeFind(root, x, y, x0, y0, x3, y3) {
    var minDistance2 = Infinity, closestPoint;
    (function find(node, x1, y1, x2, y2) {
      if (x1 > x3 || y1 > y3 || x2 < x0 || y2 < y0) return;
      if (point = node.point) {
        var point, dx = x - node.x, dy = y - node.y, distance2 = dx * dx + dy * dy;
        if (distance2 < minDistance2) {
          var distance = Math.sqrt(minDistance2 = distance2);
          x0 = x - distance, y0 = y - distance;
          x3 = x + distance, y3 = y + distance;
          closestPoint = point;
        }
      }
      var children = node.nodes, xm = (x1 + x2) * .5, ym = (y1 + y2) * .5, right = x >= xm, below = y >= ym;
      for (var i = below << 1 | right, j = i + 4; i < j; ++i) {
        if (node = children[i & 3]) switch (i & 3) {
         case 0:
          find(node, x1, y1, xm, ym);
          break;

         case 1:
          find(node, xm, y1, x2, ym);
          break;

         case 2:
          find(node, x1, ym, xm, y2);
          break;

         case 3:
          find(node, xm, ym, x2, y2);
          break;
        }
      }
    })(root, x0, y0, x3, y3);
    return closestPoint;
  }
  d3.interpolateRgb = d3_interpolateRgb;
  function d3_interpolateRgb(a, b) {
    a = d3.rgb(a);
    b = d3.rgb(b);
    var ar = a.r, ag = a.g, ab = a.b, br = b.r - ar, bg = b.g - ag, bb = b.b - ab;
    return function(t) {
      return "#" + d3_rgb_hex(Math.round(ar + br * t)) + d3_rgb_hex(Math.round(ag + bg * t)) + d3_rgb_hex(Math.round(ab + bb * t));
    };
  }
  d3.interpolateObject = d3_interpolateObject;
  function d3_interpolateObject(a, b) {
    var i = {}, c = {}, k;
    for (k in a) {
      if (k in b) {
        i[k] = d3_interpolate(a[k], b[k]);
      } else {
        c[k] = a[k];
      }
    }
    for (k in b) {
      if (!(k in a)) {
        c[k] = b[k];
      }
    }
    return function(t) {
      for (k in i) c[k] = i[k](t);
      return c;
    };
  }
  d3.interpolateNumber = d3_interpolateNumber;
  function d3_interpolateNumber(a, b) {
    a = +a, b = +b;
    return function(t) {
      return a * (1 - t) + b * t;
    };
  }
  d3.interpolateString = d3_interpolateString;
  function d3_interpolateString(a, b) {
    var bi = d3_interpolate_numberA.lastIndex = d3_interpolate_numberB.lastIndex = 0, am, bm, bs, i = -1, s = [], q = [];
    a = a + "", b = b + "";
    while ((am = d3_interpolate_numberA.exec(a)) && (bm = d3_interpolate_numberB.exec(b))) {
      if ((bs = bm.index) > bi) {
        bs = b.slice(bi, bs);
        if (s[i]) s[i] += bs; else s[++i] = bs;
      }
      if ((am = am[0]) === (bm = bm[0])) {
        if (s[i]) s[i] += bm; else s[++i] = bm;
      } else {
        s[++i] = null;
        q.push({
          i: i,
          x: d3_interpolateNumber(am, bm)
        });
      }
      bi = d3_interpolate_numberB.lastIndex;
    }
    if (bi < b.length) {
      bs = b.slice(bi);
      if (s[i]) s[i] += bs; else s[++i] = bs;
    }
    return s.length < 2 ? q[0] ? (b = q[0].x, function(t) {
      return b(t) + "";
    }) : function() {
      return b;
    } : (b = q.length, function(t) {
      for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);
      return s.join("");
    });
  }
  var d3_interpolate_numberA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g, d3_interpolate_numberB = new RegExp(d3_interpolate_numberA.source, "g");
  d3.interpolate = d3_interpolate;
  function d3_interpolate(a, b) {
    var i = d3.interpolators.length, f;
    while (--i >= 0 && !(f = d3.interpolators[i](a, b))) ;
    return f;
  }
  d3.interpolators = [ function(a, b) {
    var t = typeof b;
    return (t === "string" ? d3_rgb_names.has(b.toLowerCase()) || /^(#|rgb\(|hsl\()/i.test(b) ? d3_interpolateRgb : d3_interpolateString : b instanceof d3_color ? d3_interpolateRgb : Array.isArray(b) ? d3_interpolateArray : t === "object" && isNaN(b) ? d3_interpolateObject : d3_interpolateNumber)(a, b);
  } ];
  d3.interpolateArray = d3_interpolateArray;
  function d3_interpolateArray(a, b) {
    var x = [], c = [], na = a.length, nb = b.length, n0 = Math.min(a.length, b.length), i;
    for (i = 0; i < n0; ++i) x.push(d3_interpolate(a[i], b[i]));
    for (;i < na; ++i) c[i] = a[i];
    for (;i < nb; ++i) c[i] = b[i];
    return function(t) {
      for (i = 0; i < n0; ++i) c[i] = x[i](t);
      return c;
    };
  }
  var d3_ease_default = function() {
    return d3_identity;
  };
  var d3_ease = d3.map({
    linear: d3_ease_default,
    poly: d3_ease_poly,
    quad: function() {
      return d3_ease_quad;
    },
    cubic: function() {
      return d3_ease_cubic;
    },
    sin: function() {
      return d3_ease_sin;
    },
    exp: function() {
      return d3_ease_exp;
    },
    circle: function() {
      return d3_ease_circle;
    },
    elastic: d3_ease_elastic,
    back: d3_ease_back,
    bounce: function() {
      return d3_ease_bounce;
    }
  });
  var d3_ease_mode = d3.map({
    "in": d3_identity,
    out: d3_ease_reverse,
    "in-out": d3_ease_reflect,
    "out-in": function(f) {
      return d3_ease_reflect(d3_ease_reverse(f));
    }
  });
  d3.ease = function(name) {
    var i = name.indexOf("-"), t = i >= 0 ? name.slice(0, i) : name, m = i >= 0 ? name.slice(i + 1) : "in";
    t = d3_ease.get(t) || d3_ease_default;
    m = d3_ease_mode.get(m) || d3_identity;
    return d3_ease_clamp(m(t.apply(null, d3_arraySlice.call(arguments, 1))));
  };
  function d3_ease_clamp(f) {
    return function(t) {
      return t <= 0 ? 0 : t >= 1 ? 1 : f(t);
    };
  }
  function d3_ease_reverse(f) {
    return function(t) {
      return 1 - f(1 - t);
    };
  }
  function d3_ease_reflect(f) {
    return function(t) {
      return .5 * (t < .5 ? f(2 * t) : 2 - f(2 - 2 * t));
    };
  }
  function d3_ease_quad(t) {
    return t * t;
  }
  function d3_ease_cubic(t) {
    return t * t * t;
  }
  function d3_ease_cubicInOut(t) {
    if (t <= 0) return 0;
    if (t >= 1) return 1;
    var t2 = t * t, t3 = t2 * t;
    return 4 * (t < .5 ? t3 : 3 * (t - t2) + t3 - .75);
  }
  function d3_ease_poly(e) {
    return function(t) {
      return Math.pow(t, e);
    };
  }
  function d3_ease_sin(t) {
    return 1 - Math.cos(t * halfπ);
  }
  function d3_ease_exp(t) {
    return Math.pow(2, 10 * (t - 1));
  }
  function d3_ease_circle(t) {
    return 1 - Math.sqrt(1 - t * t);
  }
  function d3_ease_elastic(a, p) {
    var s;
    if (arguments.length < 2) p = .45;
    if (arguments.length) s = p / τ * Math.asin(1 / a); else a = 1, s = p / 4;
    return function(t) {
      return 1 + a * Math.pow(2, -10 * t) * Math.sin((t - s) * τ / p);
    };
  }
  function d3_ease_back(s) {
    if (!s) s = 1.70158;
    return function(t) {
      return t * t * ((s + 1) * t - s);
    };
  }
  function d3_ease_bounce(t) {
    return t < 1 / 2.75 ? 7.5625 * t * t : t < 2 / 2.75 ? 7.5625 * (t -= 1.5 / 2.75) * t + .75 : t < 2.5 / 2.75 ? 7.5625 * (t -= 2.25 / 2.75) * t + .9375 : 7.5625 * (t -= 2.625 / 2.75) * t + .984375;
  }
  d3.interpolateHcl = d3_interpolateHcl;
  function d3_interpolateHcl(a, b) {
    a = d3.hcl(a);
    b = d3.hcl(b);
    var ah = a.h, ac = a.c, al = a.l, bh = b.h - ah, bc = b.c - ac, bl = b.l - al;
    if (isNaN(bc)) bc = 0, ac = isNaN(ac) ? b.c : ac;
    if (isNaN(bh)) bh = 0, ah = isNaN(ah) ? b.h : ah; else if (bh > 180) bh -= 360; else if (bh < -180) bh += 360;
    return function(t) {
      return d3_hcl_lab(ah + bh * t, ac + bc * t, al + bl * t) + "";
    };
  }
  d3.interpolateHsl = d3_interpolateHsl;
  function d3_interpolateHsl(a, b) {
    a = d3.hsl(a);
    b = d3.hsl(b);
    var ah = a.h, as = a.s, al = a.l, bh = b.h - ah, bs = b.s - as, bl = b.l - al;
    if (isNaN(bs)) bs = 0, as = isNaN(as) ? b.s : as;
    if (isNaN(bh)) bh = 0, ah = isNaN(ah) ? b.h : ah; else if (bh > 180) bh -= 360; else if (bh < -180) bh += 360;
    return function(t) {
      return d3_hsl_rgb(ah + bh * t, as + bs * t, al + bl * t) + "";
    };
  }
  d3.interpolateLab = d3_interpolateLab;
  function d3_interpolateLab(a, b) {
    a = d3.lab(a);
    b = d3.lab(b);
    var al = a.l, aa = a.a, ab = a.b, bl = b.l - al, ba = b.a - aa, bb = b.b - ab;
    return function(t) {
      return d3_lab_rgb(al + bl * t, aa + ba * t, ab + bb * t) + "";
    };
  }
  d3.interpolateRound = d3_interpolateRound;
  function d3_interpolateRound(a, b) {
    b -= a;
    return function(t) {
      return Math.round(a + b * t);
    };
  }
  d3.transform = function(string) {
    var g = d3_document.createElementNS(d3.ns.prefix.svg, "g");
    return (d3.transform = function(string) {
      if (string != null) {
        g.setAttribute("transform", string);
        var t = g.transform.baseVal.consolidate();
      }
      return new d3_transform(t ? t.matrix : d3_transformIdentity);
    })(string);
  };
  function d3_transform(m) {
    var r0 = [ m.a, m.b ], r1 = [ m.c, m.d ], kx = d3_transformNormalize(r0), kz = d3_transformDot(r0, r1), ky = d3_transformNormalize(d3_transformCombine(r1, r0, -kz)) || 0;
    if (r0[0] * r1[1] < r1[0] * r0[1]) {
      r0[0] *= -1;
      r0[1] *= -1;
      kx *= -1;
      kz *= -1;
    }
    this.rotate = (kx ? Math.atan2(r0[1], r0[0]) : Math.atan2(-r1[0], r1[1])) * d3_degrees;
    this.translate = [ m.e, m.f ];
    this.scale = [ kx, ky ];
    this.skew = ky ? Math.atan2(kz, ky) * d3_degrees : 0;
  }
  d3_transform.prototype.toString = function() {
    return "translate(" + this.translate + ")rotate(" + this.rotate + ")skewX(" + this.skew + ")scale(" + this.scale + ")";
  };
  function d3_transformDot(a, b) {
    return a[0] * b[0] + a[1] * b[1];
  }
  function d3_transformNormalize(a) {
    var k = Math.sqrt(d3_transformDot(a, a));
    if (k) {
      a[0] /= k;
      a[1] /= k;
    }
    return k;
  }
  function d3_transformCombine(a, b, k) {
    a[0] += k * b[0];
    a[1] += k * b[1];
    return a;
  }
  var d3_transformIdentity = {
    a: 1,
    b: 0,
    c: 0,
    d: 1,
    e: 0,
    f: 0
  };
  d3.interpolateTransform = d3_interpolateTransform;
  function d3_interpolateTransform(a, b) {
    var s = [], q = [], n, A = d3.transform(a), B = d3.transform(b), ta = A.translate, tb = B.translate, ra = A.rotate, rb = B.rotate, wa = A.skew, wb = B.skew, ka = A.scale, kb = B.scale;
    if (ta[0] != tb[0] || ta[1] != tb[1]) {
      s.push("translate(", null, ",", null, ")");
      q.push({
        i: 1,
        x: d3_interpolateNumber(ta[0], tb[0])
      }, {
        i: 3,
        x: d3_interpolateNumber(ta[1], tb[1])
      });
    } else if (tb[0] || tb[1]) {
      s.push("translate(" + tb + ")");
    } else {
      s.push("");
    }
    if (ra != rb) {
      if (ra - rb > 180) rb += 360; else if (rb - ra > 180) ra += 360;
      q.push({
        i: s.push(s.pop() + "rotate(", null, ")") - 2,
        x: d3_interpolateNumber(ra, rb)
      });
    } else if (rb) {
      s.push(s.pop() + "rotate(" + rb + ")");
    }
    if (wa != wb) {
      q.push({
        i: s.push(s.pop() + "skewX(", null, ")") - 2,
        x: d3_interpolateNumber(wa, wb)
      });
    } else if (wb) {
      s.push(s.pop() + "skewX(" + wb + ")");
    }
    if (ka[0] != kb[0] || ka[1] != kb[1]) {
      n = s.push(s.pop() + "scale(", null, ",", null, ")");
      q.push({
        i: n - 4,
        x: d3_interpolateNumber(ka[0], kb[0])
      }, {
        i: n - 2,
        x: d3_interpolateNumber(ka[1], kb[1])
      });
    } else if (kb[0] != 1 || kb[1] != 1) {
      s.push(s.pop() + "scale(" + kb + ")");
    }
    n = q.length;
    return function(t) {
      var i = -1, o;
      while (++i < n) s[(o = q[i]).i] = o.x(t);
      return s.join("");
    };
  }
  function d3_uninterpolateNumber(a, b) {
    b = (b -= a = +a) || 1 / b;
    return function(x) {
      return (x - a) / b;
    };
  }
  function d3_uninterpolateClamp(a, b) {
    b = (b -= a = +a) || 1 / b;
    return function(x) {
      return Math.max(0, Math.min(1, (x - a) / b));
    };
  }
  d3.layout = {};
  d3.layout.bundle = function() {
    return function(links) {
      var paths = [], i = -1, n = links.length;
      while (++i < n) paths.push(d3_layout_bundlePath(links[i]));
      return paths;
    };
  };
  function d3_layout_bundlePath(link) {
    var start = link.source, end = link.target, lca = d3_layout_bundleLeastCommonAncestor(start, end), points = [ start ];
    while (start !== lca) {
      start = start.parent;
      points.push(start);
    }
    var k = points.length;
    while (end !== lca) {
      points.splice(k, 0, end);
      end = end.parent;
    }
    return points;
  }
  function d3_layout_bundleAncestors(node) {
    var ancestors = [], parent = node.parent;
    while (parent != null) {
      ancestors.push(node);
      node = parent;
      parent = parent.parent;
    }
    ancestors.push(node);
    return ancestors;
  }
  function d3_layout_bundleLeastCommonAncestor(a, b) {
    if (a === b) return a;
    var aNodes = d3_layout_bundleAncestors(a), bNodes = d3_layout_bundleAncestors(b), aNode = aNodes.pop(), bNode = bNodes.pop(), sharedNode = null;
    while (aNode === bNode) {
      sharedNode = aNode;
      aNode = aNodes.pop();
      bNode = bNodes.pop();
    }
    return sharedNode;
  }
  d3.layout.chord = function() {
    var chord = {}, chords, groups, matrix, n, padding = 0, sortGroups, sortSubgroups, sortChords;
    function relayout() {
      var subgroups = {}, groupSums = [], groupIndex = d3.range(n), subgroupIndex = [], k, x, x0, i, j;
      chords = [];
      groups = [];
      k = 0, i = -1;
      while (++i < n) {
        x = 0, j = -1;
        while (++j < n) {
          x += matrix[i][j];
        }
        groupSums.push(x);
        subgroupIndex.push(d3.range(n));
        k += x;
      }
      if (sortGroups) {
        groupIndex.sort(function(a, b) {
          return sortGroups(groupSums[a], groupSums[b]);
        });
      }
      if (sortSubgroups) {
        subgroupIndex.forEach(function(d, i) {
          d.sort(function(a, b) {
            return sortSubgroups(matrix[i][a], matrix[i][b]);
          });
        });
      }
      k = (τ - padding * n) / k;
      x = 0, i = -1;
      while (++i < n) {
        x0 = x, j = -1;
        while (++j < n) {
          var di = groupIndex[i], dj = subgroupIndex[di][j], v = matrix[di][dj], a0 = x, a1 = x += v * k;
          subgroups[di + "-" + dj] = {
            index: di,
            subindex: dj,
            startAngle: a0,
            endAngle: a1,
            value: v
          };
        }
        groups[di] = {
          index: di,
          startAngle: x0,
          endAngle: x,
          value: (x - x0) / k
        };
        x += padding;
      }
      i = -1;
      while (++i < n) {
        j = i - 1;
        while (++j < n) {
          var source = subgroups[i + "-" + j], target = subgroups[j + "-" + i];
          if (source.value || target.value) {
            chords.push(source.value < target.value ? {
              source: target,
              target: source
            } : {
              source: source,
              target: target
            });
          }
        }
      }
      if (sortChords) resort();
    }
    function resort() {
      chords.sort(function(a, b) {
        return sortChords((a.source.value + a.target.value) / 2, (b.source.value + b.target.value) / 2);
      });
    }
    chord.matrix = function(x) {
      if (!arguments.length) return matrix;
      n = (matrix = x) && matrix.length;
      chords = groups = null;
      return chord;
    };
    chord.padding = function(x) {
      if (!arguments.length) return padding;
      padding = x;
      chords = groups = null;
      return chord;
    };
    chord.sortGroups = function(x) {
      if (!arguments.length) return sortGroups;
      sortGroups = x;
      chords = groups = null;
      return chord;
    };
    chord.sortSubgroups = function(x) {
      if (!arguments.length) return sortSubgroups;
      sortSubgroups = x;
      chords = null;
      return chord;
    };
    chord.sortChords = function(x) {
      if (!arguments.length) return sortChords;
      sortChords = x;
      if (chords) resort();
      return chord;
    };
    chord.chords = function() {
      if (!chords) relayout();
      return chords;
    };
    chord.groups = function() {
      if (!groups) relayout();
      return groups;
    };
    return chord;
  };
  d3.layout.force = function() {
    var force = {}, event = d3.dispatch("start", "tick", "end"), size = [ 1, 1 ], drag, alpha, friction = .9, linkDistance = d3_layout_forceLinkDistance, linkStrength = d3_layout_forceLinkStrength, charge = -30, chargeDistance2 = d3_layout_forceChargeDistance2, gravity = .1, theta2 = .64, nodes = [], links = [], distances, strengths, charges;
    function repulse(node) {
      return function(quad, x1, _, x2) {
        if (quad.point !== node) {
          var dx = quad.cx - node.x, dy = quad.cy - node.y, dw = x2 - x1, dn = dx * dx + dy * dy;
          if (dw * dw / theta2 < dn) {
            if (dn < chargeDistance2) {
              var k = quad.charge / dn;
              node.px -= dx * k;
              node.py -= dy * k;
            }
            return true;
          }
          if (quad.point && dn && dn < chargeDistance2) {
            var k = quad.pointCharge / dn;
            node.px -= dx * k;
            node.py -= dy * k;
          }
        }
        return !quad.charge;
      };
    }
    force.tick = function() {
      if ((alpha *= .99) < .005) {
        event.end({
          type: "end",
          alpha: alpha = 0
        });
        return true;
      }
      var n = nodes.length, m = links.length, q, i, o, s, t, l, k, x, y;
      for (i = 0; i < m; ++i) {
        o = links[i];
        s = o.source;
        t = o.target;
        x = t.x - s.x;
        y = t.y - s.y;
        if (l = x * x + y * y) {
          l = alpha * strengths[i] * ((l = Math.sqrt(l)) - distances[i]) / l;
          x *= l;
          y *= l;
          t.x -= x * (k = s.weight / (t.weight + s.weight));
          t.y -= y * k;
          s.x += x * (k = 1 - k);
          s.y += y * k;
        }
      }
      if (k = alpha * gravity) {
        x = size[0] / 2;
        y = size[1] / 2;
        i = -1;
        if (k) while (++i < n) {
          o = nodes[i];
          o.x += (x - o.x) * k;
          o.y += (y - o.y) * k;
        }
      }
      if (charge) {
        d3_layout_forceAccumulate(q = d3.geom.quadtree(nodes), alpha, charges);
        i = -1;
        while (++i < n) {
          if (!(o = nodes[i]).fixed) {
            q.visit(repulse(o));
          }
        }
      }
      i = -1;
      while (++i < n) {
        o = nodes[i];
        if (o.fixed) {
          o.x = o.px;
          o.y = o.py;
        } else {
          o.x -= (o.px - (o.px = o.x)) * friction;
          o.y -= (o.py - (o.py = o.y)) * friction;
        }
      }
      event.tick({
        type: "tick",
        alpha: alpha
      });
    };
    force.nodes = function(x) {
      if (!arguments.length) return nodes;
      nodes = x;
      return force;
    };
    force.links = function(x) {
      if (!arguments.length) return links;
      links = x;
      return force;
    };
    force.size = function(x) {
      if (!arguments.length) return size;
      size = x;
      return force;
    };
    force.linkDistance = function(x) {
      if (!arguments.length) return linkDistance;
      linkDistance = typeof x === "function" ? x : +x;
      return force;
    };
    force.distance = force.linkDistance;
    force.linkStrength = function(x) {
      if (!arguments.length) return linkStrength;
      linkStrength = typeof x === "function" ? x : +x;
      return force;
    };
    force.friction = function(x) {
      if (!arguments.length) return friction;
      friction = +x;
      return force;
    };
    force.charge = function(x) {
      if (!arguments.length) return charge;
      charge = typeof x === "function" ? x : +x;
      return force;
    };
    force.chargeDistance = function(x) {
      if (!arguments.length) return Math.sqrt(chargeDistance2);
      chargeDistance2 = x * x;
      return force;
    };
    force.gravity = function(x) {
      if (!arguments.length) return gravity;
      gravity = +x;
      return force;
    };
    force.theta = function(x) {
      if (!arguments.length) return Math.sqrt(theta2);
      theta2 = x * x;
      return force;
    };
    force.alpha = function(x) {
      if (!arguments.length) return alpha;
      x = +x;
      if (alpha) {
        if (x > 0) alpha = x; else alpha = 0;
      } else if (x > 0) {
        event.start({
          type: "start",
          alpha: alpha = x
        });
        d3.timer(force.tick);
      }
      return force;
    };
    force.start = function() {
      var i, n = nodes.length, m = links.length, w = size[0], h = size[1], neighbors, o;
      for (i = 0; i < n; ++i) {
        (o = nodes[i]).index = i;
        o.weight = 0;
      }
      for (i = 0; i < m; ++i) {
        o = links[i];
        if (typeof o.source == "number") o.source = nodes[o.source];
        if (typeof o.target == "number") o.target = nodes[o.target];
        ++o.source.weight;
        ++o.target.weight;
      }
      for (i = 0; i < n; ++i) {
        o = nodes[i];
        if (isNaN(o.x)) o.x = position("x", w);
        if (isNaN(o.y)) o.y = position("y", h);
        if (isNaN(o.px)) o.px = o.x;
        if (isNaN(o.py)) o.py = o.y;
      }
      distances = [];
      if (typeof linkDistance === "function") for (i = 0; i < m; ++i) distances[i] = +linkDistance.call(this, links[i], i); else for (i = 0; i < m; ++i) distances[i] = linkDistance;
      strengths = [];
      if (typeof linkStrength === "function") for (i = 0; i < m; ++i) strengths[i] = +linkStrength.call(this, links[i], i); else for (i = 0; i < m; ++i) strengths[i] = linkStrength;
      charges = [];
      if (typeof charge === "function") for (i = 0; i < n; ++i) charges[i] = +charge.call(this, nodes[i], i); else for (i = 0; i < n; ++i) charges[i] = charge;
      function position(dimension, size) {
        if (!neighbors) {
          neighbors = new Array(n);
          for (j = 0; j < n; ++j) {
            neighbors[j] = [];
          }
          for (j = 0; j < m; ++j) {
            var o = links[j];
            neighbors[o.source.index].push(o.target);
            neighbors[o.target.index].push(o.source);
          }
        }
        var candidates = neighbors[i], j = -1, l = candidates.length, x;
        while (++j < l) if (!isNaN(x = candidates[j][dimension])) return x;
        return Math.random() * size;
      }
      return force.resume();
    };
    force.resume = function() {
      return force.alpha(.1);
    };
    force.stop = function() {
      return force.alpha(0);
    };
    force.drag = function() {
      if (!drag) drag = d3.behavior.drag().origin(d3_identity).on("dragstart.force", d3_layout_forceDragstart).on("drag.force", dragmove).on("dragend.force", d3_layout_forceDragend);
      if (!arguments.length) return drag;
      this.on("mouseover.force", d3_layout_forceMouseover).on("mouseout.force", d3_layout_forceMouseout).call(drag);
    };
    function dragmove(d) {
      d.px = d3.event.x, d.py = d3.event.y;
      force.resume();
    }
    return d3.rebind(force, event, "on");
  };
  function d3_layout_forceDragstart(d) {
    d.fixed |= 2;
  }
  function d3_layout_forceDragend(d) {
    d.fixed &= ~6;
  }
  function d3_layout_forceMouseover(d) {
    d.fixed |= 4;
    d.px = d.x, d.py = d.y;
  }
  function d3_layout_forceMouseout(d) {
    d.fixed &= ~4;
  }
  function d3_layout_forceAccumulate(quad, alpha, charges) {
    var cx = 0, cy = 0;
    quad.charge = 0;
    if (!quad.leaf) {
      var nodes = quad.nodes, n = nodes.length, i = -1, c;
      while (++i < n) {
        c = nodes[i];
        if (c == null) continue;
        d3_layout_forceAccumulate(c, alpha, charges);
        quad.charge += c.charge;
        cx += c.charge * c.cx;
        cy += c.charge * c.cy;
      }
    }
    if (quad.point) {
      if (!quad.leaf) {
        quad.point.x += Math.random() - .5;
        quad.point.y += Math.random() - .5;
      }
      var k = alpha * charges[quad.point.index];
      quad.charge += quad.pointCharge = k;
      cx += k * quad.point.x;
      cy += k * quad.point.y;
    }
    quad.cx = cx / quad.charge;
    quad.cy = cy / quad.charge;
  }
  var d3_layout_forceLinkDistance = 20, d3_layout_forceLinkStrength = 1, d3_layout_forceChargeDistance2 = Infinity;
  d3.layout.hierarchy = function() {
    var sort = d3_layout_hierarchySort, children = d3_layout_hierarchyChildren, value = d3_layout_hierarchyValue;
    function hierarchy(root) {
      var stack = [ root ], nodes = [], node;
      root.depth = 0;
      while ((node = stack.pop()) != null) {
        nodes.push(node);
        if ((childs = children.call(hierarchy, node, node.depth)) && (n = childs.length)) {
          var n, childs, child;
          while (--n >= 0) {
            stack.push(child = childs[n]);
            child.parent = node;
            child.depth = node.depth + 1;
          }
          if (value) node.value = 0;
          node.children = childs;
        } else {
          if (value) node.value = +value.call(hierarchy, node, node.depth) || 0;
          delete node.children;
        }
      }
      d3_layout_hierarchyVisitAfter(root, function(node) {
        var childs, parent;
        if (sort && (childs = node.children)) childs.sort(sort);
        if (value && (parent = node.parent)) parent.value += node.value;
      });
      return nodes;
    }
    hierarchy.sort = function(x) {
      if (!arguments.length) return sort;
      sort = x;
      return hierarchy;
    };
    hierarchy.children = function(x) {
      if (!arguments.length) return children;
      children = x;
      return hierarchy;
    };
    hierarchy.value = function(x) {
      if (!arguments.length) return value;
      value = x;
      return hierarchy;
    };
    hierarchy.revalue = function(root) {
      if (value) {
        d3_layout_hierarchyVisitBefore(root, function(node) {
          if (node.children) node.value = 0;
        });
        d3_layout_hierarchyVisitAfter(root, function(node) {
          var parent;
          if (!node.children) node.value = +value.call(hierarchy, node, node.depth) || 0;
          if (parent = node.parent) parent.value += node.value;
        });
      }
      return root;
    };
    return hierarchy;
  };
  function d3_layout_hierarchyRebind(object, hierarchy) {
    d3.rebind(object, hierarchy, "sort", "children", "value");
    object.nodes = object;
    object.links = d3_layout_hierarchyLinks;
    return object;
  }
  function d3_layout_hierarchyVisitBefore(node, callback) {
    var nodes = [ node ];
    while ((node = nodes.pop()) != null) {
      callback(node);
      if ((children = node.children) && (n = children.length)) {
        var n, children;
        while (--n >= 0) nodes.push(children[n]);
      }
    }
  }
  function d3_layout_hierarchyVisitAfter(node, callback) {
    var nodes = [ node ], nodes2 = [];
    while ((node = nodes.pop()) != null) {
      nodes2.push(node);
      if ((children = node.children) && (n = children.length)) {
        var i = -1, n, children;
        while (++i < n) nodes.push(children[i]);
      }
    }
    while ((node = nodes2.pop()) != null) {
      callback(node);
    }
  }
  function d3_layout_hierarchyChildren(d) {
    return d.children;
  }
  function d3_layout_hierarchyValue(d) {
    return d.value;
  }
  function d3_layout_hierarchySort(a, b) {
    return b.value - a.value;
  }
  function d3_layout_hierarchyLinks(nodes) {
    return d3.merge(nodes.map(function(parent) {
      return (parent.children || []).map(function(child) {
        return {
          source: parent,
          target: child
        };
      });
    }));
  }
  d3.layout.partition = function() {
    var hierarchy = d3.layout.hierarchy(), size = [ 1, 1 ];
    function position(node, x, dx, dy) {
      var children = node.children;
      node.x = x;
      node.y = node.depth * dy;
      node.dx = dx;
      node.dy = dy;
      if (children && (n = children.length)) {
        var i = -1, n, c, d;
        dx = node.value ? dx / node.value : 0;
        while (++i < n) {
          position(c = children[i], x, d = c.value * dx, dy);
          x += d;
        }
      }
    }
    function depth(node) {
      var children = node.children, d = 0;
      if (children && (n = children.length)) {
        var i = -1, n;
        while (++i < n) d = Math.max(d, depth(children[i]));
      }
      return 1 + d;
    }
    function partition(d, i) {
      var nodes = hierarchy.call(this, d, i);
      position(nodes[0], 0, size[0], size[1] / depth(nodes[0]));
      return nodes;
    }
    partition.size = function(x) {
      if (!arguments.length) return size;
      size = x;
      return partition;
    };
    return d3_layout_hierarchyRebind(partition, hierarchy);
  };
  d3.layout.pie = function() {
    var value = Number, sort = d3_layout_pieSortByValue, startAngle = 0, endAngle = τ, padAngle = 0;
    function pie(data) {
      var n = data.length, values = data.map(function(d, i) {
        return +value.call(pie, d, i);
      }), a = +(typeof startAngle === "function" ? startAngle.apply(this, arguments) : startAngle), da = (typeof endAngle === "function" ? endAngle.apply(this, arguments) : endAngle) - a, p = Math.min(Math.abs(da) / n, +(typeof padAngle === "function" ? padAngle.apply(this, arguments) : padAngle)), pa = p * (da < 0 ? -1 : 1), k = (da - n * pa) / d3.sum(values), index = d3.range(n), arcs = [], v;
      if (sort != null) index.sort(sort === d3_layout_pieSortByValue ? function(i, j) {
        return values[j] - values[i];
      } : function(i, j) {
        return sort(data[i], data[j]);
      });
      index.forEach(function(i) {
        arcs[i] = {
          data: data[i],
          value: v = values[i],
          startAngle: a,
          endAngle: a += v * k + pa,
          padAngle: p
        };
      });
      return arcs;
    }
    pie.value = function(_) {
      if (!arguments.length) return value;
      value = _;
      return pie;
    };
    pie.sort = function(_) {
      if (!arguments.length) return sort;
      sort = _;
      return pie;
    };
    pie.startAngle = function(_) {
      if (!arguments.length) return startAngle;
      startAngle = _;
      return pie;
    };
    pie.endAngle = function(_) {
      if (!arguments.length) return endAngle;
      endAngle = _;
      return pie;
    };
    pie.padAngle = function(_) {
      if (!arguments.length) return padAngle;
      padAngle = _;
      return pie;
    };
    return pie;
  };
  var d3_layout_pieSortByValue = {};
  d3.layout.stack = function() {
    var values = d3_identity, order = d3_layout_stackOrderDefault, offset = d3_layout_stackOffsetZero, out = d3_layout_stackOut, x = d3_layout_stackX, y = d3_layout_stackY;
    function stack(data, index) {
      if (!(n = data.length)) return data;
      var series = data.map(function(d, i) {
        return values.call(stack, d, i);
      });
      var points = series.map(function(d) {
        return d.map(function(v, i) {
          return [ x.call(stack, v, i), y.call(stack, v, i) ];
        });
      });
      var orders = order.call(stack, points, index);
      series = d3.permute(series, orders);
      points = d3.permute(points, orders);
      var offsets = offset.call(stack, points, index);
      var m = series[0].length, n, i, j, o;
      for (j = 0; j < m; ++j) {
        out.call(stack, series[0][j], o = offsets[j], points[0][j][1]);
        for (i = 1; i < n; ++i) {
          out.call(stack, series[i][j], o += points[i - 1][j][1], points[i][j][1]);
        }
      }
      return data;
    }
    stack.values = function(x) {
      if (!arguments.length) return values;
      values = x;
      return stack;
    };
    stack.order = function(x) {
      if (!arguments.length) return order;
      order = typeof x === "function" ? x : d3_layout_stackOrders.get(x) || d3_layout_stackOrderDefault;
      return stack;
    };
    stack.offset = function(x) {
      if (!arguments.length) return offset;
      offset = typeof x === "function" ? x : d3_layout_stackOffsets.get(x) || d3_layout_stackOffsetZero;
      return stack;
    };
    stack.x = function(z) {
      if (!arguments.length) return x;
      x = z;
      return stack;
    };
    stack.y = function(z) {
      if (!arguments.length) return y;
      y = z;
      return stack;
    };
    stack.out = function(z) {
      if (!arguments.length) return out;
      out = z;
      return stack;
    };
    return stack;
  };
  function d3_layout_stackX(d) {
    return d.x;
  }
  function d3_layout_stackY(d) {
    return d.y;
  }
  function d3_layout_stackOut(d, y0, y) {
    d.y0 = y0;
    d.y = y;
  }
  var d3_layout_stackOrders = d3.map({
    "inside-out": function(data) {
      var n = data.length, i, j, max = data.map(d3_layout_stackMaxIndex), sums = data.map(d3_layout_stackReduceSum), index = d3.range(n).sort(function(a, b) {
        return max[a] - max[b];
      }), top = 0, bottom = 0, tops = [], bottoms = [];
      for (i = 0; i < n; ++i) {
        j = index[i];
        if (top < bottom) {
          top += sums[j];
          tops.push(j);
        } else {
          bottom += sums[j];
          bottoms.push(j);
        }
      }
      return bottoms.reverse().concat(tops);
    },
    reverse: function(data) {
      return d3.range(data.length).reverse();
    },
    "default": d3_layout_stackOrderDefault
  });
  var d3_layout_stackOffsets = d3.map({
    silhouette: function(data) {
      var n = data.length, m = data[0].length, sums = [], max = 0, i, j, o, y0 = [];
      for (j = 0; j < m; ++j) {
        for (i = 0, o = 0; i < n; i++) o += data[i][j][1];
        if (o > max) max = o;
        sums.push(o);
      }
      for (j = 0; j < m; ++j) {
        y0[j] = (max - sums[j]) / 2;
      }
      return y0;
    },
    wiggle: function(data) {
      var n = data.length, x = data[0], m = x.length, i, j, k, s1, s2, s3, dx, o, o0, y0 = [];
      y0[0] = o = o0 = 0;
      for (j = 1; j < m; ++j) {
        for (i = 0, s1 = 0; i < n; ++i) s1 += data[i][j][1];
        for (i = 0, s2 = 0, dx = x[j][0] - x[j - 1][0]; i < n; ++i) {
          for (k = 0, s3 = (data[i][j][1] - data[i][j - 1][1]) / (2 * dx); k < i; ++k) {
            s3 += (data[k][j][1] - data[k][j - 1][1]) / dx;
          }
          s2 += s3 * data[i][j][1];
        }
        y0[j] = o -= s1 ? s2 / s1 * dx : 0;
        if (o < o0) o0 = o;
      }
      for (j = 0; j < m; ++j) y0[j] -= o0;
      return y0;
    },
    expand: function(data) {
      var n = data.length, m = data[0].length, k = 1 / n, i, j, o, y0 = [];
      for (j = 0; j < m; ++j) {
        for (i = 0, o = 0; i < n; i++) o += data[i][j][1];
        if (o) for (i = 0; i < n; i++) data[i][j][1] /= o; else for (i = 0; i < n; i++) data[i][j][1] = k;
      }
      for (j = 0; j < m; ++j) y0[j] = 0;
      return y0;
    },
    zero: d3_layout_stackOffsetZero
  });
  function d3_layout_stackOrderDefault(data) {
    return d3.range(data.length);
  }
  function d3_layout_stackOffsetZero(data) {
    var j = -1, m = data[0].length, y0 = [];
    while (++j < m) y0[j] = 0;
    return y0;
  }
  function d3_layout_stackMaxIndex(array) {
    var i = 1, j = 0, v = array[0][1], k, n = array.length;
    for (;i < n; ++i) {
      if ((k = array[i][1]) > v) {
        j = i;
        v = k;
      }
    }
    return j;
  }
  function d3_layout_stackReduceSum(d) {
    return d.reduce(d3_layout_stackSum, 0);
  }
  function d3_layout_stackSum(p, d) {
    return p + d[1];
  }
  d3.layout.histogram = function() {
    var frequency = true, valuer = Number, ranger = d3_layout_histogramRange, binner = d3_layout_histogramBinSturges;
    function histogram(data, i) {
      var bins = [], values = data.map(valuer, this), range = ranger.call(this, values, i), thresholds = binner.call(this, range, values, i), bin, i = -1, n = values.length, m = thresholds.length - 1, k = frequency ? 1 : 1 / n, x;
      while (++i < m) {
        bin = bins[i] = [];
        bin.dx = thresholds[i + 1] - (bin.x = thresholds[i]);
        bin.y = 0;
      }
      if (m > 0) {
        i = -1;
        while (++i < n) {
          x = values[i];
          if (x >= range[0] && x <= range[1]) {
            bin = bins[d3.bisect(thresholds, x, 1, m) - 1];
            bin.y += k;
            bin.push(data[i]);
          }
        }
      }
      return bins;
    }
    histogram.value = function(x) {
      if (!arguments.length) return valuer;
      valuer = x;
      return histogram;
    };
    histogram.range = function(x) {
      if (!arguments.length) return ranger;
      ranger = d3_functor(x);
      return histogram;
    };
    histogram.bins = function(x) {
      if (!arguments.length) return binner;
      binner = typeof x === "number" ? function(range) {
        return d3_layout_histogramBinFixed(range, x);
      } : d3_functor(x);
      return histogram;
    };
    histogram.frequency = function(x) {
      if (!arguments.length) return frequency;
      frequency = !!x;
      return histogram;
    };
    return histogram;
  };
  function d3_layout_histogramBinSturges(range, values) {
    return d3_layout_histogramBinFixed(range, Math.ceil(Math.log(values.length) / Math.LN2 + 1));
  }
  function d3_layout_histogramBinFixed(range, n) {
    var x = -1, b = +range[0], m = (range[1] - b) / n, f = [];
    while (++x <= n) f[x] = m * x + b;
    return f;
  }
  function d3_layout_histogramRange(values) {
    return [ d3.min(values), d3.max(values) ];
  }
  d3.layout.pack = function() {
    var hierarchy = d3.layout.hierarchy().sort(d3_layout_packSort), padding = 0, size = [ 1, 1 ], radius;
    function pack(d, i) {
      var nodes = hierarchy.call(this, d, i), root = nodes[0], w = size[0], h = size[1], r = radius == null ? Math.sqrt : typeof radius === "function" ? radius : function() {
        return radius;
      };
      root.x = root.y = 0;
      d3_layout_hierarchyVisitAfter(root, function(d) {
        d.r = +r(d.value);
      });
      d3_layout_hierarchyVisitAfter(root, d3_layout_packSiblings);
      if (padding) {
        var dr = padding * (radius ? 1 : Math.max(2 * root.r / w, 2 * root.r / h)) / 2;
        d3_layout_hierarchyVisitAfter(root, function(d) {
          d.r += dr;
        });
        d3_layout_hierarchyVisitAfter(root, d3_layout_packSiblings);
        d3_layout_hierarchyVisitAfter(root, function(d) {
          d.r -= dr;
        });
      }
      d3_layout_packTransform(root, w / 2, h / 2, radius ? 1 : 1 / Math.max(2 * root.r / w, 2 * root.r / h));
      return nodes;
    }
    pack.size = function(_) {
      if (!arguments.length) return size;
      size = _;
      return pack;
    };
    pack.radius = function(_) {
      if (!arguments.length) return radius;
      radius = _ == null || typeof _ === "function" ? _ : +_;
      return pack;
    };
    pack.padding = function(_) {
      if (!arguments.length) return padding;
      padding = +_;
      return pack;
    };
    return d3_layout_hierarchyRebind(pack, hierarchy);
  };
  function d3_layout_packSort(a, b) {
    return a.value - b.value;
  }
  function d3_layout_packInsert(a, b) {
    var c = a._pack_next;
    a._pack_next = b;
    b._pack_prev = a;
    b._pack_next = c;
    c._pack_prev = b;
  }
  function d3_layout_packSplice(a, b) {
    a._pack_next = b;
    b._pack_prev = a;
  }
  function d3_layout_packIntersects(a, b) {
    var dx = b.x - a.x, dy = b.y - a.y, dr = a.r + b.r;
    return .999 * dr * dr > dx * dx + dy * dy;
  }
  function d3_layout_packSiblings(node) {
    if (!(nodes = node.children) || !(n = nodes.length)) return;
    var nodes, xMin = Infinity, xMax = -Infinity, yMin = Infinity, yMax = -Infinity, a, b, c, i, j, k, n;
    function bound(node) {
      xMin = Math.min(node.x - node.r, xMin);
      xMax = Math.max(node.x + node.r, xMax);
      yMin = Math.min(node.y - node.r, yMin);
      yMax = Math.max(node.y + node.r, yMax);
    }
    nodes.forEach(d3_layout_packLink);
    a = nodes[0];
    a.x = -a.r;
    a.y = 0;
    bound(a);
    if (n > 1) {
      b = nodes[1];
      b.x = b.r;
      b.y = 0;
      bound(b);
      if (n > 2) {
        c = nodes[2];
        d3_layout_packPlace(a, b, c);
        bound(c);
        d3_layout_packInsert(a, c);
        a._pack_prev = c;
        d3_layout_packInsert(c, b);
        b = a._pack_next;
        for (i = 3; i < n; i++) {
          d3_layout_packPlace(a, b, c = nodes[i]);
          var isect = 0, s1 = 1, s2 = 1;
          for (j = b._pack_next; j !== b; j = j._pack_next, s1++) {
            if (d3_layout_packIntersects(j, c)) {
              isect = 1;
              break;
            }
          }
          if (isect == 1) {
            for (k = a._pack_prev; k !== j._pack_prev; k = k._pack_prev, s2++) {
              if (d3_layout_packIntersects(k, c)) {
                break;
              }
            }
          }
          if (isect) {
            if (s1 < s2 || s1 == s2 && b.r < a.r) d3_layout_packSplice(a, b = j); else d3_layout_packSplice(a = k, b);
            i--;
          } else {
            d3_layout_packInsert(a, c);
            b = c;
            bound(c);
          }
        }
      }
    }
    var cx = (xMin + xMax) / 2, cy = (yMin + yMax) / 2, cr = 0;
    for (i = 0; i < n; i++) {
      c = nodes[i];
      c.x -= cx;
      c.y -= cy;
      cr = Math.max(cr, c.r + Math.sqrt(c.x * c.x + c.y * c.y));
    }
    node.r = cr;
    nodes.forEach(d3_layout_packUnlink);
  }
  function d3_layout_packLink(node) {
    node._pack_next = node._pack_prev = node;
  }
  function d3_layout_packUnlink(node) {
    delete node._pack_next;
    delete node._pack_prev;
  }
  function d3_layout_packTransform(node, x, y, k) {
    var children = node.children;
    node.x = x += k * node.x;
    node.y = y += k * node.y;
    node.r *= k;
    if (children) {
      var i = -1, n = children.length;
      while (++i < n) d3_layout_packTransform(children[i], x, y, k);
    }
  }
  function d3_layout_packPlace(a, b, c) {
    var db = a.r + c.r, dx = b.x - a.x, dy = b.y - a.y;
    if (db && (dx || dy)) {
      var da = b.r + c.r, dc = dx * dx + dy * dy;
      da *= da;
      db *= db;
      var x = .5 + (db - da) / (2 * dc), y = Math.sqrt(Math.max(0, 2 * da * (db + dc) - (db -= dc) * db - da * da)) / (2 * dc);
      c.x = a.x + x * dx + y * dy;
      c.y = a.y + x * dy - y * dx;
    } else {
      c.x = a.x + db;
      c.y = a.y;
    }
  }
  d3.layout.tree = function() {
    var hierarchy = d3.layout.hierarchy().sort(null).value(null), separation = d3_layout_treeSeparation, size = [ 1, 1 ], nodeSize = null;
    function tree(d, i) {
      var nodes = hierarchy.call(this, d, i), root0 = nodes[0], root1 = wrapTree(root0);
      d3_layout_hierarchyVisitAfter(root1, firstWalk), root1.parent.m = -root1.z;
      d3_layout_hierarchyVisitBefore(root1, secondWalk);
      if (nodeSize) d3_layout_hierarchyVisitBefore(root0, sizeNode); else {
        var left = root0, right = root0, bottom = root0;
        d3_layout_hierarchyVisitBefore(root0, function(node) {
          if (node.x < left.x) left = node;
          if (node.x > right.x) right = node;
          if (node.depth > bottom.depth) bottom = node;
        });
        var tx = separation(left, right) / 2 - left.x, kx = size[0] / (right.x + separation(right, left) / 2 + tx), ky = size[1] / (bottom.depth || 1);
        d3_layout_hierarchyVisitBefore(root0, function(node) {
          node.x = (node.x + tx) * kx;
          node.y = node.depth * ky;
        });
      }
      return nodes;
    }
    function wrapTree(root0) {
      var root1 = {
        A: null,
        children: [ root0 ]
      }, queue = [ root1 ], node1;
      while ((node1 = queue.pop()) != null) {
        for (var children = node1.children, child, i = 0, n = children.length; i < n; ++i) {
          queue.push((children[i] = child = {
            _: children[i],
            parent: node1,
            children: (child = children[i].children) && child.slice() || [],
            A: null,
            a: null,
            z: 0,
            m: 0,
            c: 0,
            s: 0,
            t: null,
            i: i
          }).a = child);
        }
      }
      return root1.children[0];
    }
    function firstWalk(v) {
      var children = v.children, siblings = v.parent.children, w = v.i ? siblings[v.i - 1] : null;
      if (children.length) {
        d3_layout_treeShift(v);
        var midpoint = (children[0].z + children[children.length - 1].z) / 2;
        if (w) {
          v.z = w.z + separation(v._, w._);
          v.m = v.z - midpoint;
        } else {
          v.z = midpoint;
        }
      } else if (w) {
        v.z = w.z + separation(v._, w._);
      }
      v.parent.A = apportion(v, w, v.parent.A || siblings[0]);
    }
    function secondWalk(v) {
      v._.x = v.z + v.parent.m;
      v.m += v.parent.m;
    }
    function apportion(v, w, ancestor) {
      if (w) {
        var vip = v, vop = v, vim = w, vom = vip.parent.children[0], sip = vip.m, sop = vop.m, sim = vim.m, som = vom.m, shift;
        while (vim = d3_layout_treeRight(vim), vip = d3_layout_treeLeft(vip), vim && vip) {
          vom = d3_layout_treeLeft(vom);
          vop = d3_layout_treeRight(vop);
          vop.a = v;
          shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);
          if (shift > 0) {
            d3_layout_treeMove(d3_layout_treeAncestor(vim, v, ancestor), v, shift);
            sip += shift;
            sop += shift;
          }
          sim += vim.m;
          sip += vip.m;
          som += vom.m;
          sop += vop.m;
        }
        if (vim && !d3_layout_treeRight(vop)) {
          vop.t = vim;
          vop.m += sim - sop;
        }
        if (vip && !d3_layout_treeLeft(vom)) {
          vom.t = vip;
          vom.m += sip - som;
          ancestor = v;
        }
      }
      return ancestor;
    }
    function sizeNode(node) {
      node.x *= size[0];
      node.y = node.depth * size[1];
    }
    tree.separation = function(x) {
      if (!arguments.length) return separation;
      separation = x;
      return tree;
    };
    tree.size = function(x) {
      if (!arguments.length) return nodeSize ? null : size;
      nodeSize = (size = x) == null ? sizeNode : null;
      return tree;
    };
    tree.nodeSize = function(x) {
      if (!arguments.length) return nodeSize ? size : null;
      nodeSize = (size = x) == null ? null : sizeNode;
      return tree;
    };
    return d3_layout_hierarchyRebind(tree, hierarchy);
  };
  function d3_layout_treeSeparation(a, b) {
    return a.parent == b.parent ? 1 : 2;
  }
  function d3_layout_treeLeft(v) {
    var children = v.children;
    return children.length ? children[0] : v.t;
  }
  function d3_layout_treeRight(v) {
    var children = v.children, n;
    return (n = children.length) ? children[n - 1] : v.t;
  }
  function d3_layout_treeMove(wm, wp, shift) {
    var change = shift / (wp.i - wm.i);
    wp.c -= change;
    wp.s += shift;
    wm.c += change;
    wp.z += shift;
    wp.m += shift;
  }
  function d3_layout_treeShift(v) {
    var shift = 0, change = 0, children = v.children, i = children.length, w;
    while (--i >= 0) {
      w = children[i];
      w.z += shift;
      w.m += shift;
      shift += w.s + (change += w.c);
    }
  }
  function d3_layout_treeAncestor(vim, v, ancestor) {
    return vim.a.parent === v.parent ? vim.a : ancestor;
  }
  d3.layout.cluster = function() {
    var hierarchy = d3.layout.hierarchy().sort(null).value(null), separation = d3_layout_treeSeparation, size = [ 1, 1 ], nodeSize = false;
    function cluster(d, i) {
      var nodes = hierarchy.call(this, d, i), root = nodes[0], previousNode, x = 0;
      d3_layout_hierarchyVisitAfter(root, function(node) {
        var children = node.children;
        if (children && children.length) {
          node.x = d3_layout_clusterX(children);
          node.y = d3_layout_clusterY(children);
        } else {
          node.x = previousNode ? x += separation(node, previousNode) : 0;
          node.y = 0;
          previousNode = node;
        }
      });
      var left = d3_layout_clusterLeft(root), right = d3_layout_clusterRight(root), x0 = left.x - separation(left, right) / 2, x1 = right.x + separation(right, left) / 2;
      d3_layout_hierarchyVisitAfter(root, nodeSize ? function(node) {
        node.x = (node.x - root.x) * size[0];
        node.y = (root.y - node.y) * size[1];
      } : function(node) {
        node.x = (node.x - x0) / (x1 - x0) * size[0];
        node.y = (1 - (root.y ? node.y / root.y : 1)) * size[1];
      });
      return nodes;
    }
    cluster.separation = function(x) {
      if (!arguments.length) return separation;
      separation = x;
      return cluster;
    };
    cluster.size = function(x) {
      if (!arguments.length) return nodeSize ? null : size;
      nodeSize = (size = x) == null;
      return cluster;
    };
    cluster.nodeSize = function(x) {
      if (!arguments.length) return nodeSize ? size : null;
      nodeSize = (size = x) != null;
      return cluster;
    };
    return d3_layout_hierarchyRebind(cluster, hierarchy);
  };
  function d3_layout_clusterY(children) {
    return 1 + d3.max(children, function(child) {
      return child.y;
    });
  }
  function d3_layout_clusterX(children) {
    return children.reduce(function(x, child) {
      return x + child.x;
    }, 0) / children.length;
  }
  function d3_layout_clusterLeft(node) {
    var children = node.children;
    return children && children.length ? d3_layout_clusterLeft(children[0]) : node;
  }
  function d3_layout_clusterRight(node) {
    var children = node.children, n;
    return children && (n = children.length) ? d3_layout_clusterRight(children[n - 1]) : node;
  }
  d3.layout.treemap = function() {
    var hierarchy = d3.layout.hierarchy(), round = Math.round, size = [ 1, 1 ], padding = null, pad = d3_layout_treemapPadNull, sticky = false, stickies, mode = "squarify", ratio = .5 * (1 + Math.sqrt(5));
    function scale(children, k) {
      var i = -1, n = children.length, child, area;
      while (++i < n) {
        area = (child = children[i]).value * (k < 0 ? 0 : k);
        child.area = isNaN(area) || area <= 0 ? 0 : area;
      }
    }
    function squarify(node) {
      var children = node.children;
      if (children && children.length) {
        var rect = pad(node), row = [], remaining = children.slice(), child, best = Infinity, score, u = mode === "slice" ? rect.dx : mode === "dice" ? rect.dy : mode === "slice-dice" ? node.depth & 1 ? rect.dy : rect.dx : Math.min(rect.dx, rect.dy), n;
        scale(remaining, rect.dx * rect.dy / node.value);
        row.area = 0;
        while ((n = remaining.length) > 0) {
          row.push(child = remaining[n - 1]);
          row.area += child.area;
          if (mode !== "squarify" || (score = worst(row, u)) <= best) {
            remaining.pop();
            best = score;
          } else {
            row.area -= row.pop().area;
            position(row, u, rect, false);
            u = Math.min(rect.dx, rect.dy);
            row.length = row.area = 0;
            best = Infinity;
          }
        }
        if (row.length) {
          position(row, u, rect, true);
          row.length = row.area = 0;
        }
        children.forEach(squarify);
      }
    }
    function stickify(node) {
      var children = node.children;
      if (children && children.length) {
        var rect = pad(node), remaining = children.slice(), child, row = [];
        scale(remaining, rect.dx * rect.dy / node.value);
        row.area = 0;
        while (child = remaining.pop()) {
          row.push(child);
          row.area += child.area;
          if (child.z != null) {
            position(row, child.z ? rect.dx : rect.dy, rect, !remaining.length);
            row.length = row.area = 0;
          }
        }
        children.forEach(stickify);
      }
    }
    function worst(row, u) {
      var s = row.area, r, rmax = 0, rmin = Infinity, i = -1, n = row.length;
      while (++i < n) {
        if (!(r = row[i].area)) continue;
        if (r < rmin) rmin = r;
        if (r > rmax) rmax = r;
      }
      s *= s;
      u *= u;
      return s ? Math.max(u * rmax * ratio / s, s / (u * rmin * ratio)) : Infinity;
    }
    function position(row, u, rect, flush) {
      var i = -1, n = row.length, x = rect.x, y = rect.y, v = u ? round(row.area / u) : 0, o;
      if (u == rect.dx) {
        if (flush || v > rect.dy) v = rect.dy;
        while (++i < n) {
          o = row[i];
          o.x = x;
          o.y = y;
          o.dy = v;
          x += o.dx = Math.min(rect.x + rect.dx - x, v ? round(o.area / v) : 0);
        }
        o.z = true;
        o.dx += rect.x + rect.dx - x;
        rect.y += v;
        rect.dy -= v;
      } else {
        if (flush || v > rect.dx) v = rect.dx;
        while (++i < n) {
          o = row[i];
          o.x = x;
          o.y = y;
          o.dx = v;
          y += o.dy = Math.min(rect.y + rect.dy - y, v ? round(o.area / v) : 0);
        }
        o.z = false;
        o.dy += rect.y + rect.dy - y;
        rect.x += v;
        rect.dx -= v;
      }
    }
    function treemap(d) {
      var nodes = stickies || hierarchy(d), root = nodes[0];
      root.x = 0;
      root.y = 0;
      root.dx = size[0];
      root.dy = size[1];
      if (stickies) hierarchy.revalue(root);
      scale([ root ], root.dx * root.dy / root.value);
      (stickies ? stickify : squarify)(root);
      if (sticky) stickies = nodes;
      return nodes;
    }
    treemap.size = function(x) {
      if (!arguments.length) return size;
      size = x;
      return treemap;
    };
    treemap.padding = function(x) {
      if (!arguments.length) return padding;
      function padFunction(node) {
        var p = x.call(treemap, node, node.depth);
        return p == null ? d3_layout_treemapPadNull(node) : d3_layout_treemapPad(node, typeof p === "number" ? [ p, p, p, p ] : p);
      }
      function padConstant(node) {
        return d3_layout_treemapPad(node, x);
      }
      var type;
      pad = (padding = x) == null ? d3_layout_treemapPadNull : (type = typeof x) === "function" ? padFunction : type === "number" ? (x = [ x, x, x, x ], 
      padConstant) : padConstant;
      return treemap;
    };
    treemap.round = function(x) {
      if (!arguments.length) return round != Number;
      round = x ? Math.round : Number;
      return treemap;
    };
    treemap.sticky = function(x) {
      if (!arguments.length) return sticky;
      sticky = x;
      stickies = null;
      return treemap;
    };
    treemap.ratio = function(x) {
      if (!arguments.length) return ratio;
      ratio = x;
      return treemap;
    };
    treemap.mode = function(x) {
      if (!arguments.length) return mode;
      mode = x + "";
      return treemap;
    };
    return d3_layout_hierarchyRebind(treemap, hierarchy);
  };
  function d3_layout_treemapPadNull(node) {
    return {
      x: node.x,
      y: node.y,
      dx: node.dx,
      dy: node.dy
    };
  }
  function d3_layout_treemapPad(node, padding) {
    var x = node.x + padding[3], y = node.y + padding[0], dx = node.dx - padding[1] - padding[3], dy = node.dy - padding[0] - padding[2];
    if (dx < 0) {
      x += dx / 2;
      dx = 0;
    }
    if (dy < 0) {
      y += dy / 2;
      dy = 0;
    }
    return {
      x: x,
      y: y,
      dx: dx,
      dy: dy
    };
  }
  d3.random = {
    normal: function(µ, σ) {
      var n = arguments.length;
      if (n < 2) σ = 1;
      if (n < 1) µ = 0;
      return function() {
        var x, y, r;
        do {
          x = Math.random() * 2 - 1;
          y = Math.random() * 2 - 1;
          r = x * x + y * y;
        } while (!r || r > 1);
        return µ + σ * x * Math.sqrt(-2 * Math.log(r) / r);
      };
    },
    logNormal: function() {
      var random = d3.random.normal.apply(d3, arguments);
      return function() {
        return Math.exp(random());
      };
    },
    bates: function(m) {
      var random = d3.random.irwinHall(m);
      return function() {
        return random() / m;
      };
    },
    irwinHall: function(m) {
      return function() {
        for (var s = 0, j = 0; j < m; j++) s += Math.random();
        return s;
      };
    }
  };
  d3.scale = {};
  function d3_scaleExtent(domain) {
    var start = domain[0], stop = domain[domain.length - 1];
    return start < stop ? [ start, stop ] : [ stop, start ];
  }
  function d3_scaleRange(scale) {
    return scale.rangeExtent ? scale.rangeExtent() : d3_scaleExtent(scale.range());
  }
  function d3_scale_bilinear(domain, range, uninterpolate, interpolate) {
    var u = uninterpolate(domain[0], domain[1]), i = interpolate(range[0], range[1]);
    return function(x) {
      return i(u(x));
    };
  }
  function d3_scale_nice(domain, nice) {
    var i0 = 0, i1 = domain.length - 1, x0 = domain[i0], x1 = domain[i1], dx;
    if (x1 < x0) {
      dx = i0, i0 = i1, i1 = dx;
      dx = x0, x0 = x1, x1 = dx;
    }
    domain[i0] = nice.floor(x0);
    domain[i1] = nice.ceil(x1);
    return domain;
  }
  function d3_scale_niceStep(step) {
    return step ? {
      floor: function(x) {
        return Math.floor(x / step) * step;
      },
      ceil: function(x) {
        return Math.ceil(x / step) * step;
      }
    } : d3_scale_niceIdentity;
  }
  var d3_scale_niceIdentity = {
    floor: d3_identity,
    ceil: d3_identity
  };
  function d3_scale_polylinear(domain, range, uninterpolate, interpolate) {
    var u = [], i = [], j = 0, k = Math.min(domain.length, range.length) - 1;
    if (domain[k] < domain[0]) {
      domain = domain.slice().reverse();
      range = range.slice().reverse();
    }
    while (++j <= k) {
      u.push(uninterpolate(domain[j - 1], domain[j]));
      i.push(interpolate(range[j - 1], range[j]));
    }
    return function(x) {
      var j = d3.bisect(domain, x, 1, k) - 1;
      return i[j](u[j](x));
    };
  }
  d3.scale.linear = function() {
    return d3_scale_linear([ 0, 1 ], [ 0, 1 ], d3_interpolate, false);
  };
  function d3_scale_linear(domain, range, interpolate, clamp) {
    var output, input;
    function rescale() {
      var linear = Math.min(domain.length, range.length) > 2 ? d3_scale_polylinear : d3_scale_bilinear, uninterpolate = clamp ? d3_uninterpolateClamp : d3_uninterpolateNumber;
      output = linear(domain, range, uninterpolate, interpolate);
      input = linear(range, domain, uninterpolate, d3_interpolate);
      return scale;
    }
    function scale(x) {
      return output(x);
    }
    scale.invert = function(y) {
      return input(y);
    };
    scale.domain = function(x) {
      if (!arguments.length) return domain;
      domain = x.map(Number);
      return rescale();
    };
    scale.range = function(x) {
      if (!arguments.length) return range;
      range = x;
      return rescale();
    };
    scale.rangeRound = function(x) {
      return scale.range(x).interpolate(d3_interpolateRound);
    };
    scale.clamp = function(x) {
      if (!arguments.length) return clamp;
      clamp = x;
      return rescale();
    };
    scale.interpolate = function(x) {
      if (!arguments.length) return interpolate;
      interpolate = x;
      return rescale();
    };
    scale.ticks = function(m) {
      return d3_scale_linearTicks(domain, m);
    };
    scale.tickFormat = function(m, format) {
      return d3_scale_linearTickFormat(domain, m, format);
    };
    scale.nice = function(m) {
      d3_scale_linearNice(domain, m);
      return rescale();
    };
    scale.copy = function() {
      return d3_scale_linear(domain, range, interpolate, clamp);
    };
    return rescale();
  }
  function d3_scale_linearRebind(scale, linear) {
    return d3.rebind(scale, linear, "range", "rangeRound", "interpolate", "clamp");
  }
  function d3_scale_linearNice(domain, m) {
    return d3_scale_nice(domain, d3_scale_niceStep(d3_scale_linearTickRange(domain, m)[2]));
  }
  function d3_scale_linearTickRange(domain, m) {
    if (m == null) m = 10;
    var extent = d3_scaleExtent(domain), span = extent[1] - extent[0], step = Math.pow(10, Math.floor(Math.log(span / m) / Math.LN10)), err = m / span * step;
    if (err <= .15) step *= 10; else if (err <= .35) step *= 5; else if (err <= .75) step *= 2;
    extent[0] = Math.ceil(extent[0] / step) * step;
    extent[1] = Math.floor(extent[1] / step) * step + step * .5;
    extent[2] = step;
    return extent;
  }
  function d3_scale_linearTicks(domain, m) {
    return d3.range.apply(d3, d3_scale_linearTickRange(domain, m));
  }
  function d3_scale_linearTickFormat(domain, m, format) {
    var range = d3_scale_linearTickRange(domain, m);
    if (format) {
      var match = d3_format_re.exec(format);
      match.shift();
      if (match[8] === "s") {
        var prefix = d3.formatPrefix(Math.max(abs(range[0]), abs(range[1])));
        if (!match[7]) match[7] = "." + d3_scale_linearPrecision(prefix.scale(range[2]));
        match[8] = "f";
        format = d3.format(match.join(""));
        return function(d) {
          return format(prefix.scale(d)) + prefix.symbol;
        };
      }
      if (!match[7]) match[7] = "." + d3_scale_linearFormatPrecision(match[8], range);
      format = match.join("");
    } else {
      format = ",." + d3_scale_linearPrecision(range[2]) + "f";
    }
    return d3.format(format);
  }
  var d3_scale_linearFormatSignificant = {
    s: 1,
    g: 1,
    p: 1,
    r: 1,
    e: 1
  };
  function d3_scale_linearPrecision(value) {
    return -Math.floor(Math.log(value) / Math.LN10 + .01);
  }
  function d3_scale_linearFormatPrecision(type, range) {
    var p = d3_scale_linearPrecision(range[2]);
    return type in d3_scale_linearFormatSignificant ? Math.abs(p - d3_scale_linearPrecision(Math.max(abs(range[0]), abs(range[1])))) + +(type !== "e") : p - (type === "%") * 2;
  }
  d3.scale.log = function() {
    return d3_scale_log(d3.scale.linear().domain([ 0, 1 ]), 10, true, [ 1, 10 ]);
  };
  function d3_scale_log(linear, base, positive, domain) {
    function log(x) {
      return (positive ? Math.log(x < 0 ? 0 : x) : -Math.log(x > 0 ? 0 : -x)) / Math.log(base);
    }
    function pow(x) {
      return positive ? Math.pow(base, x) : -Math.pow(base, -x);
    }
    function scale(x) {
      return linear(log(x));
    }
    scale.invert = function(x) {
      return pow(linear.invert(x));
    };
    scale.domain = function(x) {
      if (!arguments.length) return domain;
      positive = x[0] >= 0;
      linear.domain((domain = x.map(Number)).map(log));
      return scale;
    };
    scale.base = function(_) {
      if (!arguments.length) return base;
      base = +_;
      linear.domain(domain.map(log));
      return scale;
    };
    scale.nice = function() {
      var niced = d3_scale_nice(domain.map(log), positive ? Math : d3_scale_logNiceNegative);
      linear.domain(niced);
      domain = niced.map(pow);
      return scale;
    };
    scale.ticks = function() {
      var extent = d3_scaleExtent(domain), ticks = [], u = extent[0], v = extent[1], i = Math.floor(log(u)), j = Math.ceil(log(v)), n = base % 1 ? 2 : base;
      if (isFinite(j - i)) {
        if (positive) {
          for (;i < j; i++) for (var k = 1; k < n; k++) ticks.push(pow(i) * k);
          ticks.push(pow(i));
        } else {
          ticks.push(pow(i));
          for (;i++ < j; ) for (var k = n - 1; k > 0; k--) ticks.push(pow(i) * k);
        }
        for (i = 0; ticks[i] < u; i++) {}
        for (j = ticks.length; ticks[j - 1] > v; j--) {}
        ticks = ticks.slice(i, j);
      }
      return ticks;
    };
    scale.tickFormat = function(n, format) {
      if (!arguments.length) return d3_scale_logFormat;
      if (arguments.length < 2) format = d3_scale_logFormat; else if (typeof format !== "function") format = d3.format(format);
      var k = Math.max(.1, n / scale.ticks().length), f = positive ? (e = 1e-12, Math.ceil) : (e = -1e-12, 
      Math.floor), e;
      return function(d) {
        return d / pow(f(log(d) + e)) <= k ? format(d) : "";
      };
    };
    scale.copy = function() {
      return d3_scale_log(linear.copy(), base, positive, domain);
    };
    return d3_scale_linearRebind(scale, linear);
  }
  var d3_scale_logFormat = d3.format(".0e"), d3_scale_logNiceNegative = {
    floor: function(x) {
      return -Math.ceil(-x);
    },
    ceil: function(x) {
      return -Math.floor(-x);
    }
  };
  d3.scale.pow = function() {
    return d3_scale_pow(d3.scale.linear(), 1, [ 0, 1 ]);
  };
  function d3_scale_pow(linear, exponent, domain) {
    var powp = d3_scale_powPow(exponent), powb = d3_scale_powPow(1 / exponent);
    function scale(x) {
      return linear(powp(x));
    }
    scale.invert = function(x) {
      return powb(linear.invert(x));
    };
    scale.domain = function(x) {
      if (!arguments.length) return domain;
      linear.domain((domain = x.map(Number)).map(powp));
      return scale;
    };
    scale.ticks = function(m) {
      return d3_scale_linearTicks(domain, m);
    };
    scale.tickFormat = function(m, format) {
      return d3_scale_linearTickFormat(domain, m, format);
    };
    scale.nice = function(m) {
      return scale.domain(d3_scale_linearNice(domain, m));
    };
    scale.exponent = function(x) {
      if (!arguments.length) return exponent;
      powp = d3_scale_powPow(exponent = x);
      powb = d3_scale_powPow(1 / exponent);
      linear.domain(domain.map(powp));
      return scale;
    };
    scale.copy = function() {
      return d3_scale_pow(linear.copy(), exponent, domain);
    };
    return d3_scale_linearRebind(scale, linear);
  }
  function d3_scale_powPow(e) {
    return function(x) {
      return x < 0 ? -Math.pow(-x, e) : Math.pow(x, e);
    };
  }
  d3.scale.sqrt = function() {
    return d3.scale.pow().exponent(.5);
  };
  d3.scale.ordinal = function() {
    return d3_scale_ordinal([], {
      t: "range",
      a: [ [] ]
    });
  };
  function d3_scale_ordinal(domain, ranger) {
    var index, range, rangeBand;
    function scale(x) {
      return range[((index.get(x) || (ranger.t === "range" ? index.set(x, domain.push(x)) : NaN)) - 1) % range.length];
    }
    function steps(start, step) {
      return d3.range(domain.length).map(function(i) {
        return start + step * i;
      });
    }
    scale.domain = function(x) {
      if (!arguments.length) return domain;
      domain = [];
      index = new d3_Map();
      var i = -1, n = x.length, xi;
      while (++i < n) if (!index.has(xi = x[i])) index.set(xi, domain.push(xi));
      return scale[ranger.t].apply(scale, ranger.a);
    };
    scale.range = function(x) {
      if (!arguments.length) return range;
      range = x;
      rangeBand = 0;
      ranger = {
        t: "range",
        a: arguments
      };
      return scale;
    };
    scale.rangePoints = function(x, padding) {
      if (arguments.length < 2) padding = 0;
      var start = x[0], stop = x[1], step = domain.length < 2 ? (start = (start + stop) / 2, 
      0) : (stop - start) / (domain.length - 1 + padding);
      range = steps(start + step * padding / 2, step);
      rangeBand = 0;
      ranger = {
        t: "rangePoints",
        a: arguments
      };
      return scale;
    };
    scale.rangeRoundPoints = function(x, padding) {
      if (arguments.length < 2) padding = 0;
      var start = x[0], stop = x[1], step = domain.length < 2 ? (start = stop = Math.round((start + stop) / 2), 
      0) : (stop - start) / (domain.length - 1 + padding) | 0;
      range = steps(start + Math.round(step * padding / 2 + (stop - start - (domain.length - 1 + padding) * step) / 2), step);
      rangeBand = 0;
      ranger = {
        t: "rangeRoundPoints",
        a: arguments
      };
      return scale;
    };
    scale.rangeBands = function(x, padding, outerPadding) {
      if (arguments.length < 2) padding = 0;
      if (arguments.length < 3) outerPadding = padding;
      var reverse = x[1] < x[0], start = x[reverse - 0], stop = x[1 - reverse], step = (stop - start) / (domain.length - padding + 2 * outerPadding);
      range = steps(start + step * outerPadding, step);
      if (reverse) range.reverse();
      rangeBand = step * (1 - padding);
      ranger = {
        t: "rangeBands",
        a: arguments
      };
      return scale;
    };
    scale.rangeRoundBands = function(x, padding, outerPadding) {
      if (arguments.length < 2) padding = 0;
      if (arguments.length < 3) outerPadding = padding;
      var reverse = x[1] < x[0], start = x[reverse - 0], stop = x[1 - reverse], step = Math.floor((stop - start) / (domain.length - padding + 2 * outerPadding));
      range = steps(start + Math.round((stop - start - (domain.length - padding) * step) / 2), step);
      if (reverse) range.reverse();
      rangeBand = Math.round(step * (1 - padding));
      ranger = {
        t: "rangeRoundBands",
        a: arguments
      };
      return scale;
    };
    scale.rangeBand = function() {
      return rangeBand;
    };
    scale.rangeExtent = function() {
      return d3_scaleExtent(ranger.a[0]);
    };
    scale.copy = function() {
      return d3_scale_ordinal(domain, ranger);
    };
    return scale.domain(domain);
  }
  d3.scale.category10 = function() {
    return d3.scale.ordinal().range(d3_category10);
  };
  d3.scale.category20 = function() {
    return d3.scale.ordinal().range(d3_category20);
  };
  d3.scale.category20b = function() {
    return d3.scale.ordinal().range(d3_category20b);
  };
  d3.scale.category20c = function() {
    return d3.scale.ordinal().range(d3_category20c);
  };
  var d3_category10 = [ 2062260, 16744206, 2924588, 14034728, 9725885, 9197131, 14907330, 8355711, 12369186, 1556175 ].map(d3_rgbString);
  var d3_category20 = [ 2062260, 11454440, 16744206, 16759672, 2924588, 10018698, 14034728, 16750742, 9725885, 12955861, 9197131, 12885140, 14907330, 16234194, 8355711, 13092807, 12369186, 14408589, 1556175, 10410725 ].map(d3_rgbString);
  var d3_category20b = [ 3750777, 5395619, 7040719, 10264286, 6519097, 9216594, 11915115, 13556636, 9202993, 12426809, 15186514, 15190932, 8666169, 11356490, 14049643, 15177372, 8077683, 10834324, 13528509, 14589654 ].map(d3_rgbString);
  var d3_category20c = [ 3244733, 7057110, 10406625, 13032431, 15095053, 16616764, 16625259, 16634018, 3253076, 7652470, 10607003, 13101504, 7695281, 10394312, 12369372, 14342891, 6513507, 9868950, 12434877, 14277081 ].map(d3_rgbString);
  d3.scale.quantile = function() {
    return d3_scale_quantile([], []);
  };
  function d3_scale_quantile(domain, range) {
    var thresholds;
    function rescale() {
      var k = 0, q = range.length;
      thresholds = [];
      while (++k < q) thresholds[k - 1] = d3.quantile(domain, k / q);
      return scale;
    }
    function scale(x) {
      if (!isNaN(x = +x)) return range[d3.bisect(thresholds, x)];
    }
    scale.domain = function(x) {
      if (!arguments.length) return domain;
      domain = x.map(d3_number).filter(d3_numeric).sort(d3_ascending);
      return rescale();
    };
    scale.range = function(x) {
      if (!arguments.length) return range;
      range = x;
      return rescale();
    };
    scale.quantiles = function() {
      return thresholds;
    };
    scale.invertExtent = function(y) {
      y = range.indexOf(y);
      return y < 0 ? [ NaN, NaN ] : [ y > 0 ? thresholds[y - 1] : domain[0], y < thresholds.length ? thresholds[y] : domain[domain.length - 1] ];
    };
    scale.copy = function() {
      return d3_scale_quantile(domain, range);
    };
    return rescale();
  }
  d3.scale.quantize = function() {
    return d3_scale_quantize(0, 1, [ 0, 1 ]);
  };
  function d3_scale_quantize(x0, x1, range) {
    var kx, i;
    function scale(x) {
      return range[Math.max(0, Math.min(i, Math.floor(kx * (x - x0))))];
    }
    function rescale() {
      kx = range.length / (x1 - x0);
      i = range.length - 1;
      return scale;
    }
    scale.domain = function(x) {
      if (!arguments.length) return [ x0, x1 ];
      x0 = +x[0];
      x1 = +x[x.length - 1];
      return rescale();
    };
    scale.range = function(x) {
      if (!arguments.length) return range;
      range = x;
      return rescale();
    };
    scale.invertExtent = function(y) {
      y = range.indexOf(y);
      y = y < 0 ? NaN : y / kx + x0;
      return [ y, y + 1 / kx ];
    };
    scale.copy = function() {
      return d3_scale_quantize(x0, x1, range);
    };
    return rescale();
  }
  d3.scale.threshold = function() {
    return d3_scale_threshold([ .5 ], [ 0, 1 ]);
  };
  function d3_scale_threshold(domain, range) {
    function scale(x) {
      if (x <= x) return range[d3.bisect(domain, x)];
    }
    scale.domain = function(_) {
      if (!arguments.length) return domain;
      domain = _;
      return scale;
    };
    scale.range = function(_) {
      if (!arguments.length) return range;
      range = _;
      return scale;
    };
    scale.invertExtent = function(y) {
      y = range.indexOf(y);
      return [ domain[y - 1], domain[y] ];
    };
    scale.copy = function() {
      return d3_scale_threshold(domain, range);
    };
    return scale;
  }
  d3.scale.identity = function() {
    return d3_scale_identity([ 0, 1 ]);
  };
  function d3_scale_identity(domain) {
    function identity(x) {
      return +x;
    }
    identity.invert = identity;
    identity.domain = identity.range = function(x) {
      if (!arguments.length) return domain;
      domain = x.map(identity);
      return identity;
    };
    identity.ticks = function(m) {
      return d3_scale_linearTicks(domain, m);
    };
    identity.tickFormat = function(m, format) {
      return d3_scale_linearTickFormat(domain, m, format);
    };
    identity.copy = function() {
      return d3_scale_identity(domain);
    };
    return identity;
  }
  d3.svg = {};
  function d3_zero() {
    return 0;
  }
  d3.svg.arc = function() {
    var innerRadius = d3_svg_arcInnerRadius, outerRadius = d3_svg_arcOuterRadius, cornerRadius = d3_zero, padRadius = d3_svg_arcAuto, startAngle = d3_svg_arcStartAngle, endAngle = d3_svg_arcEndAngle, padAngle = d3_svg_arcPadAngle;
    function arc() {
      var r0 = Math.max(0, +innerRadius.apply(this, arguments)), r1 = Math.max(0, +outerRadius.apply(this, arguments)), a0 = startAngle.apply(this, arguments) - halfπ, a1 = endAngle.apply(this, arguments) - halfπ, da = Math.abs(a1 - a0), cw = a0 > a1 ? 0 : 1;
      if (r1 < r0) rc = r1, r1 = r0, r0 = rc;
      if (da >= τε) return circleSegment(r1, cw) + (r0 ? circleSegment(r0, 1 - cw) : "") + "Z";
      var rc, cr, rp, ap, p0 = 0, p1 = 0, x0, y0, x1, y1, x2, y2, x3, y3, path = [];
      if (ap = (+padAngle.apply(this, arguments) || 0) / 2) {
        rp = padRadius === d3_svg_arcAuto ? Math.sqrt(r0 * r0 + r1 * r1) : +padRadius.apply(this, arguments);
        if (!cw) p1 *= -1;
        if (r1) p1 = d3_asin(rp / r1 * Math.sin(ap));
        if (r0) p0 = d3_asin(rp / r0 * Math.sin(ap));
      }
      if (r1) {
        x0 = r1 * Math.cos(a0 + p1);
        y0 = r1 * Math.sin(a0 + p1);
        x1 = r1 * Math.cos(a1 - p1);
        y1 = r1 * Math.sin(a1 - p1);
        var l1 = Math.abs(a1 - a0 - 2 * p1) <= π ? 0 : 1;
        if (p1 && d3_svg_arcSweep(x0, y0, x1, y1) === cw ^ l1) {
          var h1 = (a0 + a1) / 2;
          x0 = r1 * Math.cos(h1);
          y0 = r1 * Math.sin(h1);
          x1 = y1 = null;
        }
      } else {
        x0 = y0 = 0;
      }
      if (r0) {
        x2 = r0 * Math.cos(a1 - p0);
        y2 = r0 * Math.sin(a1 - p0);
        x3 = r0 * Math.cos(a0 + p0);
        y3 = r0 * Math.sin(a0 + p0);
        var l0 = Math.abs(a0 - a1 + 2 * p0) <= π ? 0 : 1;
        if (p0 && d3_svg_arcSweep(x2, y2, x3, y3) === 1 - cw ^ l0) {
          var h0 = (a0 + a1) / 2;
          x2 = r0 * Math.cos(h0);
          y2 = r0 * Math.sin(h0);
          x3 = y3 = null;
        }
      } else {
        x2 = y2 = 0;
      }
      if ((rc = Math.min(Math.abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments))) > .001) {
        cr = r0 < r1 ^ cw ? 0 : 1;
        var oc = x3 == null ? [ x2, y2 ] : x1 == null ? [ x0, y0 ] : d3_geom_polygonIntersect([ x0, y0 ], [ x3, y3 ], [ x1, y1 ], [ x2, y2 ]), ax = x0 - oc[0], ay = y0 - oc[1], bx = x1 - oc[0], by = y1 - oc[1], kc = 1 / Math.sin(Math.acos((ax * bx + ay * by) / (Math.sqrt(ax * ax + ay * ay) * Math.sqrt(bx * bx + by * by))) / 2), lc = Math.sqrt(oc[0] * oc[0] + oc[1] * oc[1]);
        if (x1 != null) {
          var rc1 = Math.min(rc, (r1 - lc) / (kc + 1)), t30 = d3_svg_arcCornerTangents(x3 == null ? [ x2, y2 ] : [ x3, y3 ], [ x0, y0 ], r1, rc1, cw), t12 = d3_svg_arcCornerTangents([ x1, y1 ], [ x2, y2 ], r1, rc1, cw);
          if (rc === rc1) {
            path.push("M", t30[0], "A", rc1, ",", rc1, " 0 0,", cr, " ", t30[1], "A", r1, ",", r1, " 0 ", 1 - cw ^ d3_svg_arcSweep(t30[1][0], t30[1][1], t12[1][0], t12[1][1]), ",", cw, " ", t12[1], "A", rc1, ",", rc1, " 0 0,", cr, " ", t12[0]);
          } else {
            path.push("M", t30[0], "A", rc1, ",", rc1, " 0 1,", cr, " ", t12[0]);
          }
        } else {
          path.push("M", x0, ",", y0);
        }
        if (x3 != null) {
          var rc0 = Math.min(rc, (r0 - lc) / (kc - 1)), t03 = d3_svg_arcCornerTangents([ x0, y0 ], [ x3, y3 ], r0, -rc0, cw), t21 = d3_svg_arcCornerTangents([ x2, y2 ], x1 == null ? [ x0, y0 ] : [ x1, y1 ], r0, -rc0, cw);
          if (rc === rc0) {
            path.push("L", t21[0], "A", rc0, ",", rc0, " 0 0,", cr, " ", t21[1], "A", r0, ",", r0, " 0 ", cw ^ d3_svg_arcSweep(t21[1][0], t21[1][1], t03[1][0], t03[1][1]), ",", 1 - cw, " ", t03[1], "A", rc0, ",", rc0, " 0 0,", cr, " ", t03[0]);
          } else {
            path.push("L", t21[0], "A", rc0, ",", rc0, " 0 0,", cr, " ", t03[0]);
          }
        } else {
          path.push("L", x2, ",", y2);
        }
      } else {
        path.push("M", x0, ",", y0);
        if (x1 != null) path.push("A", r1, ",", r1, " 0 ", l1, ",", cw, " ", x1, ",", y1);
        path.push("L", x2, ",", y2);
        if (x3 != null) path.push("A", r0, ",", r0, " 0 ", l0, ",", 1 - cw, " ", x3, ",", y3);
      }
      path.push("Z");
      return path.join("");
    }
    function circleSegment(r1, cw) {
      return "M0," + r1 + "A" + r1 + "," + r1 + " 0 1," + cw + " 0," + -r1 + "A" + r1 + "," + r1 + " 0 1," + cw + " 0," + r1;
    }
    arc.innerRadius = function(v) {
      if (!arguments.length) return innerRadius;
      innerRadius = d3_functor(v);
      return arc;
    };
    arc.outerRadius = function(v) {
      if (!arguments.length) return outerRadius;
      outerRadius = d3_functor(v);
      return arc;
    };
    arc.cornerRadius = function(v) {
      if (!arguments.length) return cornerRadius;
      cornerRadius = d3_functor(v);
      return arc;
    };
    arc.padRadius = function(v) {
      if (!arguments.length) return padRadius;
      padRadius = v == d3_svg_arcAuto ? d3_svg_arcAuto : d3_functor(v);
      return arc;
    };
    arc.startAngle = function(v) {
      if (!arguments.length) return startAngle;
      startAngle = d3_functor(v);
      return arc;
    };
    arc.endAngle = function(v) {
      if (!arguments.length) return endAngle;
      endAngle = d3_functor(v);
      return arc;
    };
    arc.padAngle = function(v) {
      if (!arguments.length) return padAngle;
      padAngle = d3_functor(v);
      return arc;
    };
    arc.centroid = function() {
      var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2, a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - halfπ;
      return [ Math.cos(a) * r, Math.sin(a) * r ];
    };
    return arc;
  };
  var d3_svg_arcAuto = "auto";
  function d3_svg_arcInnerRadius(d) {
    return d.innerRadius;
  }
  function d3_svg_arcOuterRadius(d) {
    return d.outerRadius;
  }
  function d3_svg_arcStartAngle(d) {
    return d.startAngle;
  }
  function d3_svg_arcEndAngle(d) {
    return d.endAngle;
  }
  function d3_svg_arcPadAngle(d) {
    return d && d.padAngle;
  }
  function d3_svg_arcSweep(x0, y0, x1, y1) {
    return (x0 - x1) * y0 - (y0 - y1) * x0 > 0 ? 0 : 1;
  }
  function d3_svg_arcCornerTangents(p0, p1, r1, rc, cw) {
    var x01 = p0[0] - p1[0], y01 = p0[1] - p1[1], lo = (cw ? rc : -rc) / Math.sqrt(x01 * x01 + y01 * y01), ox = lo * y01, oy = -lo * x01, x1 = p0[0] + ox, y1 = p0[1] + oy, x2 = p1[0] + ox, y2 = p1[1] + oy, x3 = (x1 + x2) / 2, y3 = (y1 + y2) / 2, dx = x2 - x1, dy = y2 - y1, d2 = dx * dx + dy * dy, r = r1 - rc, D = x1 * y2 - x2 * y1, d = (dy < 0 ? -1 : 1) * Math.sqrt(r * r * d2 - D * D), cx0 = (D * dy - dx * d) / d2, cy0 = (-D * dx - dy * d) / d2, cx1 = (D * dy + dx * d) / d2, cy1 = (-D * dx + dy * d) / d2, dx0 = cx0 - x3, dy0 = cy0 - y3, dx1 = cx1 - x3, dy1 = cy1 - y3;
    if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;
    return [ [ cx0 - ox, cy0 - oy ], [ cx0 * r1 / r, cy0 * r1 / r ] ];
  }
  function d3_svg_line(projection) {
    var x = d3_geom_pointX, y = d3_geom_pointY, defined = d3_true, interpolate = d3_svg_lineLinear, interpolateKey = interpolate.key, tension = .7;
    function line(data) {
      var segments = [], points = [], i = -1, n = data.length, d, fx = d3_functor(x), fy = d3_functor(y);
      function segment() {
        segments.push("M", interpolate(projection(points), tension));
      }
      while (++i < n) {
        if (defined.call(this, d = data[i], i)) {
          points.push([ +fx.call(this, d, i), +fy.call(this, d, i) ]);
        } else if (points.length) {
          segment();
          points = [];
        }
      }
      if (points.length) segment();
      return segments.length ? segments.join("") : null;
    }
    line.x = function(_) {
      if (!arguments.length) return x;
      x = _;
      return line;
    };
    line.y = function(_) {
      if (!arguments.length) return y;
      y = _;
      return line;
    };
    line.defined = function(_) {
      if (!arguments.length) return defined;
      defined = _;
      return line;
    };
    line.interpolate = function(_) {
      if (!arguments.length) return interpolateKey;
      if (typeof _ === "function") interpolateKey = interpolate = _; else interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;
      return line;
    };
    line.tension = function(_) {
      if (!arguments.length) return tension;
      tension = _;
      return line;
    };
    return line;
  }
  d3.svg.line = function() {
    return d3_svg_line(d3_identity);
  };
  var d3_svg_lineInterpolators = d3.map({
    linear: d3_svg_lineLinear,
    "linear-closed": d3_svg_lineLinearClosed,
    step: d3_svg_lineStep,
    "step-before": d3_svg_lineStepBefore,
    "step-after": d3_svg_lineStepAfter,
    basis: d3_svg_lineBasis,
    "basis-open": d3_svg_lineBasisOpen,
    "basis-closed": d3_svg_lineBasisClosed,
    bundle: d3_svg_lineBundle,
    cardinal: d3_svg_lineCardinal,
    "cardinal-open": d3_svg_lineCardinalOpen,
    "cardinal-closed": d3_svg_lineCardinalClosed,
    monotone: d3_svg_lineMonotone
  });
  d3_svg_lineInterpolators.forEach(function(key, value) {
    value.key = key;
    value.closed = /-closed$/.test(key);
  });
  function d3_svg_lineLinear(points) {
    return points.join("L");
  }
  function d3_svg_lineLinearClosed(points) {
    return d3_svg_lineLinear(points) + "Z";
  }
  function d3_svg_lineStep(points) {
    var i = 0, n = points.length, p = points[0], path = [ p[0], ",", p[1] ];
    while (++i < n) path.push("H", (p[0] + (p = points[i])[0]) / 2, "V", p[1]);
    if (n > 1) path.push("H", p[0]);
    return path.join("");
  }
  function d3_svg_lineStepBefore(points) {
    var i = 0, n = points.length, p = points[0], path = [ p[0], ",", p[1] ];
    while (++i < n) path.push("V", (p = points[i])[1], "H", p[0]);
    return path.join("");
  }
  function d3_svg_lineStepAfter(points) {
    var i = 0, n = points.length, p = points[0], path = [ p[0], ",", p[1] ];
    while (++i < n) path.push("H", (p = points[i])[0], "V", p[1]);
    return path.join("");
  }
  function d3_svg_lineCardinalOpen(points, tension) {
    return points.length < 4 ? d3_svg_lineLinear(points) : points[1] + d3_svg_lineHermite(points.slice(1, -1), d3_svg_lineCardinalTangents(points, tension));
  }
  function d3_svg_lineCardinalClosed(points, tension) {
    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite((points.push(points[0]), 
    points), d3_svg_lineCardinalTangents([ points[points.length - 2] ].concat(points, [ points[1] ]), tension));
  }
  function d3_svg_lineCardinal(points, tension) {
    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineCardinalTangents(points, tension));
  }
  function d3_svg_lineHermite(points, tangents) {
    if (tangents.length < 1 || points.length != tangents.length && points.length != tangents.length + 2) {
      return d3_svg_lineLinear(points);
    }
    var quad = points.length != tangents.length, path = "", p0 = points[0], p = points[1], t0 = tangents[0], t = t0, pi = 1;
    if (quad) {
      path += "Q" + (p[0] - t0[0] * 2 / 3) + "," + (p[1] - t0[1] * 2 / 3) + "," + p[0] + "," + p[1];
      p0 = points[1];
      pi = 2;
    }
    if (tangents.length > 1) {
      t = tangents[1];
      p = points[pi];
      pi++;
      path += "C" + (p0[0] + t0[0]) + "," + (p0[1] + t0[1]) + "," + (p[0] - t[0]) + "," + (p[1] - t[1]) + "," + p[0] + "," + p[1];
      for (var i = 2; i < tangents.length; i++, pi++) {
        p = points[pi];
        t = tangents[i];
        path += "S" + (p[0] - t[0]) + "," + (p[1] - t[1]) + "," + p[0] + "," + p[1];
      }
    }
    if (quad) {
      var lp = points[pi];
      path += "Q" + (p[0] + t[0] * 2 / 3) + "," + (p[1] + t[1] * 2 / 3) + "," + lp[0] + "," + lp[1];
    }
    return path;
  }
  function d3_svg_lineCardinalTangents(points, tension) {
    var tangents = [], a = (1 - tension) / 2, p0, p1 = points[0], p2 = points[1], i = 1, n = points.length;
    while (++i < n) {
      p0 = p1;
      p1 = p2;
      p2 = points[i];
      tangents.push([ a * (p2[0] - p0[0]), a * (p2[1] - p0[1]) ]);
    }
    return tangents;
  }
  function d3_svg_lineBasis(points) {
    if (points.length < 3) return d3_svg_lineLinear(points);
    var i = 1, n = points.length, pi = points[0], x0 = pi[0], y0 = pi[1], px = [ x0, x0, x0, (pi = points[1])[0] ], py = [ y0, y0, y0, pi[1] ], path = [ x0, ",", y0, "L", d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, py) ];
    points.push(points[n - 1]);
    while (++i <= n) {
      pi = points[i];
      px.shift();
      px.push(pi[0]);
      py.shift();
      py.push(pi[1]);
      d3_svg_lineBasisBezier(path, px, py);
    }
    points.pop();
    path.push("L", pi);
    return path.join("");
  }
  function d3_svg_lineBasisOpen(points) {
    if (points.length < 4) return d3_svg_lineLinear(points);
    var path = [], i = -1, n = points.length, pi, px = [ 0 ], py = [ 0 ];
    while (++i < 3) {
      pi = points[i];
      px.push(pi[0]);
      py.push(pi[1]);
    }
    path.push(d3_svg_lineDot4(d3_svg_lineBasisBezier3, px) + "," + d3_svg_lineDot4(d3_svg_lineBasisBezier3, py));
    --i;
    while (++i < n) {
      pi = points[i];
      px.shift();
      px.push(pi[0]);
      py.shift();
      py.push(pi[1]);
      d3_svg_lineBasisBezier(path, px, py);
    }
    return path.join("");
  }
  function d3_svg_lineBasisClosed(points) {
    var path, i = -1, n = points.length, m = n + 4, pi, px = [], py = [];
    while (++i < 4) {
      pi = points[i % n];
      px.push(pi[0]);
      py.push(pi[1]);
    }
    path = [ d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, py) ];
    --i;
    while (++i < m) {
      pi = points[i % n];
      px.shift();
      px.push(pi[0]);
      py.shift();
      py.push(pi[1]);
      d3_svg_lineBasisBezier(path, px, py);
    }
    return path.join("");
  }
  function d3_svg_lineBundle(points, tension) {
    var n = points.length - 1;
    if (n) {
      var x0 = points[0][0], y0 = points[0][1], dx = points[n][0] - x0, dy = points[n][1] - y0, i = -1, p, t;
      while (++i <= n) {
        p = points[i];
        t = i / n;
        p[0] = tension * p[0] + (1 - tension) * (x0 + t * dx);
        p[1] = tension * p[1] + (1 - tension) * (y0 + t * dy);
      }
    }
    return d3_svg_lineBasis(points);
  }
  function d3_svg_lineDot4(a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
  }
  var d3_svg_lineBasisBezier1 = [ 0, 2 / 3, 1 / 3, 0 ], d3_svg_lineBasisBezier2 = [ 0, 1 / 3, 2 / 3, 0 ], d3_svg_lineBasisBezier3 = [ 0, 1 / 6, 2 / 3, 1 / 6 ];
  function d3_svg_lineBasisBezier(path, x, y) {
    path.push("C", d3_svg_lineDot4(d3_svg_lineBasisBezier1, x), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier1, y), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier2, x), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier2, y), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, x), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, y));
  }
  function d3_svg_lineSlope(p0, p1) {
    return (p1[1] - p0[1]) / (p1[0] - p0[0]);
  }
  function d3_svg_lineFiniteDifferences(points) {
    var i = 0, j = points.length - 1, m = [], p0 = points[0], p1 = points[1], d = m[0] = d3_svg_lineSlope(p0, p1);
    while (++i < j) {
      m[i] = (d + (d = d3_svg_lineSlope(p0 = p1, p1 = points[i + 1]))) / 2;
    }
    m[i] = d;
    return m;
  }
  function d3_svg_lineMonotoneTangents(points) {
    var tangents = [], d, a, b, s, m = d3_svg_lineFiniteDifferences(points), i = -1, j = points.length - 1;
    while (++i < j) {
      d = d3_svg_lineSlope(points[i], points[i + 1]);
      if (abs(d) < ε) {
        m[i] = m[i + 1] = 0;
      } else {
        a = m[i] / d;
        b = m[i + 1] / d;
        s = a * a + b * b;
        if (s > 9) {
          s = d * 3 / Math.sqrt(s);
          m[i] = s * a;
          m[i + 1] = s * b;
        }
      }
    }
    i = -1;
    while (++i <= j) {
      s = (points[Math.min(j, i + 1)][0] - points[Math.max(0, i - 1)][0]) / (6 * (1 + m[i] * m[i]));
      tangents.push([ s || 0, m[i] * s || 0 ]);
    }
    return tangents;
  }
  function d3_svg_lineMonotone(points) {
    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineMonotoneTangents(points));
  }
  d3.svg.line.radial = function() {
    var line = d3_svg_line(d3_svg_lineRadial);
    line.radius = line.x, delete line.x;
    line.angle = line.y, delete line.y;
    return line;
  };
  function d3_svg_lineRadial(points) {
    var point, i = -1, n = points.length, r, a;
    while (++i < n) {
      point = points[i];
      r = point[0];
      a = point[1] - halfπ;
      point[0] = r * Math.cos(a);
      point[1] = r * Math.sin(a);
    }
    return points;
  }
  function d3_svg_area(projection) {
    var x0 = d3_geom_pointX, x1 = d3_geom_pointX, y0 = 0, y1 = d3_geom_pointY, defined = d3_true, interpolate = d3_svg_lineLinear, interpolateKey = interpolate.key, interpolateReverse = interpolate, L = "L", tension = .7;
    function area(data) {
      var segments = [], points0 = [], points1 = [], i = -1, n = data.length, d, fx0 = d3_functor(x0), fy0 = d3_functor(y0), fx1 = x0 === x1 ? function() {
        return x;
      } : d3_functor(x1), fy1 = y0 === y1 ? function() {
        return y;
      } : d3_functor(y1), x, y;
      function segment() {
        segments.push("M", interpolate(projection(points1), tension), L, interpolateReverse(projection(points0.reverse()), tension), "Z");
      }
      while (++i < n) {
        if (defined.call(this, d = data[i], i)) {
          points0.push([ x = +fx0.call(this, d, i), y = +fy0.call(this, d, i) ]);
          points1.push([ +fx1.call(this, d, i), +fy1.call(this, d, i) ]);
        } else if (points0.length) {
          segment();
          points0 = [];
          points1 = [];
        }
      }
      if (points0.length) segment();
      return segments.length ? segments.join("") : null;
    }
    area.x = function(_) {
      if (!arguments.length) return x1;
      x0 = x1 = _;
      return area;
    };
    area.x0 = function(_) {
      if (!arguments.length) return x0;
      x0 = _;
      return area;
    };
    area.x1 = function(_) {
      if (!arguments.length) return x1;
      x1 = _;
      return area;
    };
    area.y = function(_) {
      if (!arguments.length) return y1;
      y0 = y1 = _;
      return area;
    };
    area.y0 = function(_) {
      if (!arguments.length) return y0;
      y0 = _;
      return area;
    };
    area.y1 = function(_) {
      if (!arguments.length) return y1;
      y1 = _;
      return area;
    };
    area.defined = function(_) {
      if (!arguments.length) return defined;
      defined = _;
      return area;
    };
    area.interpolate = function(_) {
      if (!arguments.length) return interpolateKey;
      if (typeof _ === "function") interpolateKey = interpolate = _; else interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;
      interpolateReverse = interpolate.reverse || interpolate;
      L = interpolate.closed ? "M" : "L";
      return area;
    };
    area.tension = function(_) {
      if (!arguments.length) return tension;
      tension = _;
      return area;
    };
    return area;
  }
  d3_svg_lineStepBefore.reverse = d3_svg_lineStepAfter;
  d3_svg_lineStepAfter.reverse = d3_svg_lineStepBefore;
  d3.svg.area = function() {
    return d3_svg_area(d3_identity);
  };
  d3.svg.area.radial = function() {
    var area = d3_svg_area(d3_svg_lineRadial);
    area.radius = area.x, delete area.x;
    area.innerRadius = area.x0, delete area.x0;
    area.outerRadius = area.x1, delete area.x1;
    area.angle = area.y, delete area.y;
    area.startAngle = area.y0, delete area.y0;
    area.endAngle = area.y1, delete area.y1;
    return area;
  };
  d3.svg.chord = function() {
    var source = d3_source, target = d3_target, radius = d3_svg_chordRadius, startAngle = d3_svg_arcStartAngle, endAngle = d3_svg_arcEndAngle;
    function chord(d, i) {
      var s = subgroup(this, source, d, i), t = subgroup(this, target, d, i);
      return "M" + s.p0 + arc(s.r, s.p1, s.a1 - s.a0) + (equals(s, t) ? curve(s.r, s.p1, s.r, s.p0) : curve(s.r, s.p1, t.r, t.p0) + arc(t.r, t.p1, t.a1 - t.a0) + curve(t.r, t.p1, s.r, s.p0)) + "Z";
    }
    function subgroup(self, f, d, i) {
      var subgroup = f.call(self, d, i), r = radius.call(self, subgroup, i), a0 = startAngle.call(self, subgroup, i) - halfπ, a1 = endAngle.call(self, subgroup, i) - halfπ;
      return {
        r: r,
        a0: a0,
        a1: a1,
        p0: [ r * Math.cos(a0), r * Math.sin(a0) ],
        p1: [ r * Math.cos(a1), r * Math.sin(a1) ]
      };
    }
    function equals(a, b) {
      return a.a0 == b.a0 && a.a1 == b.a1;
    }
    function arc(r, p, a) {
      return "A" + r + "," + r + " 0 " + +(a > π) + ",1 " + p;
    }
    function curve(r0, p0, r1, p1) {
      return "Q 0,0 " + p1;
    }
    chord.radius = function(v) {
      if (!arguments.length) return radius;
      radius = d3_functor(v);
      return chord;
    };
    chord.source = function(v) {
      if (!arguments.length) return source;
      source = d3_functor(v);
      return chord;
    };
    chord.target = function(v) {
      if (!arguments.length) return target;
      target = d3_functor(v);
      return chord;
    };
    chord.startAngle = function(v) {
      if (!arguments.length) return startAngle;
      startAngle = d3_functor(v);
      return chord;
    };
    chord.endAngle = function(v) {
      if (!arguments.length) return endAngle;
      endAngle = d3_functor(v);
      return chord;
    };
    return chord;
  };
  function d3_svg_chordRadius(d) {
    return d.radius;
  }
  d3.svg.diagonal = function() {
    var source = d3_source, target = d3_target, projection = d3_svg_diagonalProjection;
    function diagonal(d, i) {
      var p0 = source.call(this, d, i), p3 = target.call(this, d, i), m = (p0.y + p3.y) / 2, p = [ p0, {
        x: p0.x,
        y: m
      }, {
        x: p3.x,
        y: m
      }, p3 ];
      p = p.map(projection);
      return "M" + p[0] + "C" + p[1] + " " + p[2] + " " + p[3];
    }
    diagonal.source = function(x) {
      if (!arguments.length) return source;
      source = d3_functor(x);
      return diagonal;
    };
    diagonal.target = function(x) {
      if (!arguments.length) return target;
      target = d3_functor(x);
      return diagonal;
    };
    diagonal.projection = function(x) {
      if (!arguments.length) return projection;
      projection = x;
      return diagonal;
    };
    return diagonal;
  };
  function d3_svg_diagonalProjection(d) {
    return [ d.x, d.y ];
  }
  d3.svg.diagonal.radial = function() {
    var diagonal = d3.svg.diagonal(), projection = d3_svg_diagonalProjection, projection_ = diagonal.projection;
    diagonal.projection = function(x) {
      return arguments.length ? projection_(d3_svg_diagonalRadialProjection(projection = x)) : projection;
    };
    return diagonal;
  };
  function d3_svg_diagonalRadialProjection(projection) {
    return function() {
      var d = projection.apply(this, arguments), r = d[0], a = d[1] - halfπ;
      return [ r * Math.cos(a), r * Math.sin(a) ];
    };
  }
  d3.svg.symbol = function() {
    var type = d3_svg_symbolType, size = d3_svg_symbolSize;
    function symbol(d, i) {
      return (d3_svg_symbols.get(type.call(this, d, i)) || d3_svg_symbolCircle)(size.call(this, d, i));
    }
    symbol.type = function(x) {
      if (!arguments.length) return type;
      type = d3_functor(x);
      return symbol;
    };
    symbol.size = function(x) {
      if (!arguments.length) return size;
      size = d3_functor(x);
      return symbol;
    };
    return symbol;
  };
  function d3_svg_symbolSize() {
    return 64;
  }
  function d3_svg_symbolType() {
    return "circle";
  }
  function d3_svg_symbolCircle(size) {
    var r = Math.sqrt(size / π);
    return "M0," + r + "A" + r + "," + r + " 0 1,1 0," + -r + "A" + r + "," + r + " 0 1,1 0," + r + "Z";
  }
  var d3_svg_symbols = d3.map({
    circle: d3_svg_symbolCircle,
    cross: function(size) {
      var r = Math.sqrt(size / 5) / 2;
      return "M" + -3 * r + "," + -r + "H" + -r + "V" + -3 * r + "H" + r + "V" + -r + "H" + 3 * r + "V" + r + "H" + r + "V" + 3 * r + "H" + -r + "V" + r + "H" + -3 * r + "Z";
    },
    diamond: function(size) {
      var ry = Math.sqrt(size / (2 * d3_svg_symbolTan30)), rx = ry * d3_svg_symbolTan30;
      return "M0," + -ry + "L" + rx + ",0" + " 0," + ry + " " + -rx + ",0" + "Z";
    },
    square: function(size) {
      var r = Math.sqrt(size) / 2;
      return "M" + -r + "," + -r + "L" + r + "," + -r + " " + r + "," + r + " " + -r + "," + r + "Z";
    },
    "triangle-down": function(size) {
      var rx = Math.sqrt(size / d3_svg_symbolSqrt3), ry = rx * d3_svg_symbolSqrt3 / 2;
      return "M0," + ry + "L" + rx + "," + -ry + " " + -rx + "," + -ry + "Z";
    },
    "triangle-up": function(size) {
      var rx = Math.sqrt(size / d3_svg_symbolSqrt3), ry = rx * d3_svg_symbolSqrt3 / 2;
      return "M0," + -ry + "L" + rx + "," + ry + " " + -rx + "," + ry + "Z";
    }
  });
  d3.svg.symbolTypes = d3_svg_symbols.keys();
  var d3_svg_symbolSqrt3 = Math.sqrt(3), d3_svg_symbolTan30 = Math.tan(30 * d3_radians);
  d3_selectionPrototype.transition = function(name) {
    var id = d3_transitionInheritId || ++d3_transitionId, ns = d3_transitionNamespace(name), subgroups = [], subgroup, node, transition = d3_transitionInherit || {
      time: Date.now(),
      ease: d3_ease_cubicInOut,
      delay: 0,
      duration: 250
    };
    for (var j = -1, m = this.length; ++j < m; ) {
      subgroups.push(subgroup = []);
      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
        if (node = group[i]) d3_transitionNode(node, i, ns, id, transition);
        subgroup.push(node);
      }
    }
    return d3_transition(subgroups, ns, id);
  };
  d3_selectionPrototype.interrupt = function(name) {
    return this.each(name == null ? d3_selection_interrupt : d3_selection_interruptNS(d3_transitionNamespace(name)));
  };
  var d3_selection_interrupt = d3_selection_interruptNS(d3_transitionNamespace());
  function d3_selection_interruptNS(ns) {
    return function() {
      var lock, active;
      if ((lock = this[ns]) && (active = lock[lock.active])) {
        if (--lock.count) delete lock[lock.active]; else delete this[ns];
        lock.active += .5;
        active.event && active.event.interrupt.call(this, this.__data__, active.index);
      }
    };
  }
  function d3_transition(groups, ns, id) {
    d3_subclass(groups, d3_transitionPrototype);
    groups.namespace = ns;
    groups.id = id;
    return groups;
  }
  var d3_transitionPrototype = [], d3_transitionId = 0, d3_transitionInheritId, d3_transitionInherit;
  d3_transitionPrototype.call = d3_selectionPrototype.call;
  d3_transitionPrototype.empty = d3_selectionPrototype.empty;
  d3_transitionPrototype.node = d3_selectionPrototype.node;
  d3_transitionPrototype.size = d3_selectionPrototype.size;
  d3.transition = function(selection, name) {
    return selection && selection.transition ? d3_transitionInheritId ? selection.transition(name) : selection : d3.selection().transition(selection);
  };
  d3.transition.prototype = d3_transitionPrototype;
  d3_transitionPrototype.select = function(selector) {
    var id = this.id, ns = this.namespace, subgroups = [], subgroup, subnode, node;
    selector = d3_selection_selector(selector);
    for (var j = -1, m = this.length; ++j < m; ) {
      subgroups.push(subgroup = []);
      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
        if ((node = group[i]) && (subnode = selector.call(node, node.__data__, i, j))) {
          if ("__data__" in node) subnode.__data__ = node.__data__;
          d3_transitionNode(subnode, i, ns, id, node[ns][id]);
          subgroup.push(subnode);
        } else {
          subgroup.push(null);
        }
      }
    }
    return d3_transition(subgroups, ns, id);
  };
  d3_transitionPrototype.selectAll = function(selector) {
    var id = this.id, ns = this.namespace, subgroups = [], subgroup, subnodes, node, subnode, transition;
    selector = d3_selection_selectorAll(selector);
    for (var j = -1, m = this.length; ++j < m; ) {
      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
        if (node = group[i]) {
          transition = node[ns][id];
          subnodes = selector.call(node, node.__data__, i, j);
          subgroups.push(subgroup = []);
          for (var k = -1, o = subnodes.length; ++k < o; ) {
            if (subnode = subnodes[k]) d3_transitionNode(subnode, k, ns, id, transition);
            subgroup.push(subnode);
          }
        }
      }
    }
    return d3_transition(subgroups, ns, id);
  };
  d3_transitionPrototype.filter = function(filter) {
    var subgroups = [], subgroup, group, node;
    if (typeof filter !== "function") filter = d3_selection_filter(filter);
    for (var j = 0, m = this.length; j < m; j++) {
      subgroups.push(subgroup = []);
      for (var group = this[j], i = 0, n = group.length; i < n; i++) {
        if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {
          subgroup.push(node);
        }
      }
    }
    return d3_transition(subgroups, this.namespace, this.id);
  };
  d3_transitionPrototype.tween = function(name, tween) {
    var id = this.id, ns = this.namespace;
    if (arguments.length < 2) return this.node()[ns][id].tween.get(name);
    return d3_selection_each(this, tween == null ? function(node) {
      node[ns][id].tween.remove(name);
    } : function(node) {
      node[ns][id].tween.set(name, tween);
    });
  };
  function d3_transition_tween(groups, name, value, tween) {
    var id = groups.id, ns = groups.namespace;
    return d3_selection_each(groups, typeof value === "function" ? function(node, i, j) {
      node[ns][id].tween.set(name, tween(value.call(node, node.__data__, i, j)));
    } : (value = tween(value), function(node) {
      node[ns][id].tween.set(name, value);
    }));
  }
  d3_transitionPrototype.attr = function(nameNS, value) {
    if (arguments.length < 2) {
      for (value in nameNS) this.attr(value, nameNS[value]);
      return this;
    }
    var interpolate = nameNS == "transform" ? d3_interpolateTransform : d3_interpolate, name = d3.ns.qualify(nameNS);
    function attrNull() {
      this.removeAttribute(name);
    }
    function attrNullNS() {
      this.removeAttributeNS(name.space, name.local);
    }
    function attrTween(b) {
      return b == null ? attrNull : (b += "", function() {
        var a = this.getAttribute(name), i;
        return a !== b && (i = interpolate(a, b), function(t) {
          this.setAttribute(name, i(t));
        });
      });
    }
    function attrTweenNS(b) {
      return b == null ? attrNullNS : (b += "", function() {
        var a = this.getAttributeNS(name.space, name.local), i;
        return a !== b && (i = interpolate(a, b), function(t) {
          this.setAttributeNS(name.space, name.local, i(t));
        });
      });
    }
    return d3_transition_tween(this, "attr." + nameNS, value, name.local ? attrTweenNS : attrTween);
  };
  d3_transitionPrototype.attrTween = function(nameNS, tween) {
    var name = d3.ns.qualify(nameNS);
    function attrTween(d, i) {
      var f = tween.call(this, d, i, this.getAttribute(name));
      return f && function(t) {
        this.setAttribute(name, f(t));
      };
    }
    function attrTweenNS(d, i) {
      var f = tween.call(this, d, i, this.getAttributeNS(name.space, name.local));
      return f && function(t) {
        this.setAttributeNS(name.space, name.local, f(t));
      };
    }
    return this.tween("attr." + nameNS, name.local ? attrTweenNS : attrTween);
  };
  d3_transitionPrototype.style = function(name, value, priority) {
    var n = arguments.length;
    if (n < 3) {
      if (typeof name !== "string") {
        if (n < 2) value = "";
        for (priority in name) this.style(priority, name[priority], value);
        return this;
      }
      priority = "";
    }
    function styleNull() {
      this.style.removeProperty(name);
    }
    function styleString(b) {
      return b == null ? styleNull : (b += "", function() {
        var a = d3_window(this).getComputedStyle(this, null).getPropertyValue(name), i;
        return a !== b && (i = d3_interpolate(a, b), function(t) {
          this.style.setProperty(name, i(t), priority);
        });
      });
    }
    return d3_transition_tween(this, "style." + name, value, styleString);
  };
  d3_transitionPrototype.styleTween = function(name, tween, priority) {
    if (arguments.length < 3) priority = "";
    function styleTween(d, i) {
      var f = tween.call(this, d, i, d3_window(this).getComputedStyle(this, null).getPropertyValue(name));
      return f && function(t) {
        this.style.setProperty(name, f(t), priority);
      };
    }
    return this.tween("style." + name, styleTween);
  };
  d3_transitionPrototype.text = function(value) {
    return d3_transition_tween(this, "text", value, d3_transition_text);
  };
  function d3_transition_text(b) {
    if (b == null) b = "";
    return function() {
      this.textContent = b;
    };
  }
  d3_transitionPrototype.remove = function() {
    var ns = this.namespace;
    return this.each("end.transition", function() {
      var p;
      if (this[ns].count < 2 && (p = this.parentNode)) p.removeChild(this);
    });
  };
  d3_transitionPrototype.ease = function(value) {
    var id = this.id, ns = this.namespace;
    if (arguments.length < 1) return this.node()[ns][id].ease;
    if (typeof value !== "function") value = d3.ease.apply(d3, arguments);
    return d3_selection_each(this, function(node) {
      node[ns][id].ease = value;
    });
  };
  d3_transitionPrototype.delay = function(value) {
    var id = this.id, ns = this.namespace;
    if (arguments.length < 1) return this.node()[ns][id].delay;
    return d3_selection_each(this, typeof value === "function" ? function(node, i, j) {
      node[ns][id].delay = +value.call(node, node.__data__, i, j);
    } : (value = +value, function(node) {
      node[ns][id].delay = value;
    }));
  };
  d3_transitionPrototype.duration = function(value) {
    var id = this.id, ns = this.namespace;
    if (arguments.length < 1) return this.node()[ns][id].duration;
    return d3_selection_each(this, typeof value === "function" ? function(node, i, j) {
      node[ns][id].duration = Math.max(1, value.call(node, node.__data__, i, j));
    } : (value = Math.max(1, value), function(node) {
      node[ns][id].duration = value;
    }));
  };
  d3_transitionPrototype.each = function(type, listener) {
    var id = this.id, ns = this.namespace;
    if (arguments.length < 2) {
      var inherit = d3_transitionInherit, inheritId = d3_transitionInheritId;
      try {
        d3_transitionInheritId = id;
        d3_selection_each(this, function(node, i, j) {
          d3_transitionInherit = node[ns][id];
          type.call(node, node.__data__, i, j);
        });
      } finally {
        d3_transitionInherit = inherit;
        d3_transitionInheritId = inheritId;
      }
    } else {
      d3_selection_each(this, function(node) {
        var transition = node[ns][id];
        (transition.event || (transition.event = d3.dispatch("start", "end", "interrupt"))).on(type, listener);
      });
    }
    return this;
  };
  d3_transitionPrototype.transition = function() {
    var id0 = this.id, id1 = ++d3_transitionId, ns = this.namespace, subgroups = [], subgroup, group, node, transition;
    for (var j = 0, m = this.length; j < m; j++) {
      subgroups.push(subgroup = []);
      for (var group = this[j], i = 0, n = group.length; i < n; i++) {
        if (node = group[i]) {
          transition = node[ns][id0];
          d3_transitionNode(node, i, ns, id1, {
            time: transition.time,
            ease: transition.ease,
            delay: transition.delay + transition.duration,
            duration: transition.duration
          });
        }
        subgroup.push(node);
      }
    }
    return d3_transition(subgroups, ns, id1);
  };
  function d3_transitionNamespace(name) {
    return name == null ? "__transition__" : "__transition_" + name + "__";
  }
  function d3_transitionNode(node, i, ns, id, inherit) {
    var lock = node[ns] || (node[ns] = {
      active: 0,
      count: 0
    }), transition = lock[id];
    if (!transition) {
      var time = inherit.time;
      transition = lock[id] = {
        tween: new d3_Map(),
        time: time,
        delay: inherit.delay,
        duration: inherit.duration,
        ease: inherit.ease,
        index: i
      };
      inherit = null;
      ++lock.count;
      d3.timer(function(elapsed) {
        var delay = transition.delay, duration, ease, timer = d3_timer_active, tweened = [];
        timer.t = delay + time;
        if (delay <= elapsed) return start(elapsed - delay);
        timer.c = start;
        function start(elapsed) {
          if (lock.active > id) return stop();
          var active = lock[lock.active];
          if (active) {
            --lock.count;
            delete lock[lock.active];
            active.event && active.event.interrupt.call(node, node.__data__, active.index);
          }
          lock.active = id;
          transition.event && transition.event.start.call(node, node.__data__, i);
          transition.tween.forEach(function(key, value) {
            if (value = value.call(node, node.__data__, i)) {
              tweened.push(value);
            }
          });
          ease = transition.ease;
          duration = transition.duration;
          d3.timer(function() {
            timer.c = tick(elapsed || 1) ? d3_true : tick;
            return 1;
          }, 0, time);
        }
        function tick(elapsed) {
          if (lock.active !== id) return 1;
          var t = elapsed / duration, e = ease(t), n = tweened.length;
          while (n > 0) {
            tweened[--n].call(node, e);
          }
          if (t >= 1) {
            transition.event && transition.event.end.call(node, node.__data__, i);
            return stop();
          }
        }
        function stop() {
          if (--lock.count) delete lock[id]; else delete node[ns];
          return 1;
        }
      }, 0, time);
    }
  }
  d3.svg.axis = function() {
    var scale = d3.scale.linear(), orient = d3_svg_axisDefaultOrient, innerTickSize = 6, outerTickSize = 6, tickPadding = 3, tickArguments_ = [ 10 ], tickValues = null, tickFormat_;
    function axis(g) {
      g.each(function() {
        var g = d3.select(this);
        var scale0 = this.__chart__ || scale, scale1 = this.__chart__ = scale.copy();
        var ticks = tickValues == null ? scale1.ticks ? scale1.ticks.apply(scale1, tickArguments_) : scale1.domain() : tickValues, tickFormat = tickFormat_ == null ? scale1.tickFormat ? scale1.tickFormat.apply(scale1, tickArguments_) : d3_identity : tickFormat_, tick = g.selectAll(".tick").data(ticks, scale1), tickEnter = tick.enter().insert("g", ".domain").attr("class", "tick").style("opacity", ε), tickExit = d3.transition(tick.exit()).style("opacity", ε).remove(), tickUpdate = d3.transition(tick.order()).style("opacity", 1), tickSpacing = Math.max(innerTickSize, 0) + tickPadding, tickTransform;
        var range = d3_scaleRange(scale1), path = g.selectAll(".domain").data([ 0 ]), pathUpdate = (path.enter().append("path").attr("class", "domain"), 
        d3.transition(path));
        tickEnter.append("line");
        tickEnter.append("text");
        var lineEnter = tickEnter.select("line"), lineUpdate = tickUpdate.select("line"), text = tick.select("text").text(tickFormat), textEnter = tickEnter.select("text"), textUpdate = tickUpdate.select("text"), sign = orient === "top" || orient === "left" ? -1 : 1, x1, x2, y1, y2;
        if (orient === "bottom" || orient === "top") {
          tickTransform = d3_svg_axisX, x1 = "x", y1 = "y", x2 = "x2", y2 = "y2";
          text.attr("dy", sign < 0 ? "0em" : ".71em").style("text-anchor", "middle");
          pathUpdate.attr("d", "M" + range[0] + "," + sign * outerTickSize + "V0H" + range[1] + "V" + sign * outerTickSize);
        } else {
          tickTransform = d3_svg_axisY, x1 = "y", y1 = "x", x2 = "y2", y2 = "x2";
          text.attr("dy", ".32em").style("text-anchor", sign < 0 ? "end" : "start");
          pathUpdate.attr("d", "M" + sign * outerTickSize + "," + range[0] + "H0V" + range[1] + "H" + sign * outerTickSize);
        }
        lineEnter.attr(y2, sign * innerTickSize);
        textEnter.attr(y1, sign * tickSpacing);
        lineUpdate.attr(x2, 0).attr(y2, sign * innerTickSize);
        textUpdate.attr(x1, 0).attr(y1, sign * tickSpacing);
        if (scale1.rangeBand) {
          var x = scale1, dx = x.rangeBand() / 2;
          scale0 = scale1 = function(d) {
            return x(d) + dx;
          };
        } else if (scale0.rangeBand) {
          scale0 = scale1;
        } else {
          tickExit.call(tickTransform, scale1, scale0);
        }
        tickEnter.call(tickTransform, scale0, scale1);
        tickUpdate.call(tickTransform, scale1, scale1);
      });
    }
    axis.scale = function(x) {
      if (!arguments.length) return scale;
      scale = x;
      return axis;
    };
    axis.orient = function(x) {
      if (!arguments.length) return orient;
      orient = x in d3_svg_axisOrients ? x + "" : d3_svg_axisDefaultOrient;
      return axis;
    };
    axis.ticks = function() {
      if (!arguments.length) return tickArguments_;
      tickArguments_ = arguments;
      return axis;
    };
    axis.tickValues = function(x) {
      if (!arguments.length) return tickValues;
      tickValues = x;
      return axis;
    };
    axis.tickFormat = function(x) {
      if (!arguments.length) return tickFormat_;
      tickFormat_ = x;
      return axis;
    };
    axis.tickSize = function(x) {
      var n = arguments.length;
      if (!n) return innerTickSize;
      innerTickSize = +x;
      outerTickSize = +arguments[n - 1];
      return axis;
    };
    axis.innerTickSize = function(x) {
      if (!arguments.length) return innerTickSize;
      innerTickSize = +x;
      return axis;
    };
    axis.outerTickSize = function(x) {
      if (!arguments.length) return outerTickSize;
      outerTickSize = +x;
      return axis;
    };
    axis.tickPadding = function(x) {
      if (!arguments.length) return tickPadding;
      tickPadding = +x;
      return axis;
    };
    axis.tickSubdivide = function() {
      return arguments.length && axis;
    };
    return axis;
  };
  var d3_svg_axisDefaultOrient = "bottom", d3_svg_axisOrients = {
    top: 1,
    right: 1,
    bottom: 1,
    left: 1
  };
  function d3_svg_axisX(selection, x0, x1) {
    selection.attr("transform", function(d) {
      var v0 = x0(d);
      return "translate(" + (isFinite(v0) ? v0 : x1(d)) + ",0)";
    });
  }
  function d3_svg_axisY(selection, y0, y1) {
    selection.attr("transform", function(d) {
      var v0 = y0(d);
      return "translate(0," + (isFinite(v0) ? v0 : y1(d)) + ")";
    });
  }
  d3.svg.brush = function() {
    var event = d3_eventDispatch(brush, "brushstart", "brush", "brushend"), x = null, y = null, xExtent = [ 0, 0 ], yExtent = [ 0, 0 ], xExtentDomain, yExtentDomain, xClamp = true, yClamp = true, resizes = d3_svg_brushResizes[0];
    function brush(g) {
      g.each(function() {
        var g = d3.select(this).style("pointer-events", "all").style("-webkit-tap-highlight-color", "rgba(0,0,0,0)").on("mousedown.brush", brushstart).on("touchstart.brush", brushstart);
        var background = g.selectAll(".background").data([ 0 ]);
        background.enter().append("rect").attr("class", "background").style("visibility", "hidden").style("cursor", "crosshair");
        g.selectAll(".extent").data([ 0 ]).enter().append("rect").attr("class", "extent").style("cursor", "move");
        var resize = g.selectAll(".resize").data(resizes, d3_identity);
        resize.exit().remove();
        resize.enter().append("g").attr("class", function(d) {
          return "resize " + d;
        }).style("cursor", function(d) {
          return d3_svg_brushCursor[d];
        }).append("rect").attr("x", function(d) {
          return /[ew]$/.test(d) ? -3 : null;
        }).attr("y", function(d) {
          return /^[ns]/.test(d) ? -3 : null;
        }).attr("width", 6).attr("height", 6).style("visibility", "hidden");
        resize.style("display", brush.empty() ? "none" : null);
        var gUpdate = d3.transition(g), backgroundUpdate = d3.transition(background), range;
        if (x) {
          range = d3_scaleRange(x);
          backgroundUpdate.attr("x", range[0]).attr("width", range[1] - range[0]);
          redrawX(gUpdate);
        }
        if (y) {
          range = d3_scaleRange(y);
          backgroundUpdate.attr("y", range[0]).attr("height", range[1] - range[0]);
          redrawY(gUpdate);
        }
        redraw(gUpdate);
      });
    }
    brush.event = function(g) {
      g.each(function() {
        var event_ = event.of(this, arguments), extent1 = {
          x: xExtent,
          y: yExtent,
          i: xExtentDomain,
          j: yExtentDomain
        }, extent0 = this.__chart__ || extent1;
        this.__chart__ = extent1;
        if (d3_transitionInheritId) {
          d3.select(this).transition().each("start.brush", function() {
            xExtentDomain = extent0.i;
            yExtentDomain = extent0.j;
            xExtent = extent0.x;
            yExtent = extent0.y;
            event_({
              type: "brushstart"
            });
          }).tween("brush:brush", function() {
            var xi = d3_interpolateArray(xExtent, extent1.x), yi = d3_interpolateArray(yExtent, extent1.y);
            xExtentDomain = yExtentDomain = null;
            return function(t) {
              xExtent = extent1.x = xi(t);
              yExtent = extent1.y = yi(t);
              event_({
                type: "brush",
                mode: "resize"
              });
            };
          }).each("end.brush", function() {
            xExtentDomain = extent1.i;
            yExtentDomain = extent1.j;
            event_({
              type: "brush",
              mode: "resize"
            });
            event_({
              type: "brushend"
            });
          });
        } else {
          event_({
            type: "brushstart"
          });
          event_({
            type: "brush",
            mode: "resize"
          });
          event_({
            type: "brushend"
          });
        }
      });
    };
    function redraw(g) {
      g.selectAll(".resize").attr("transform", function(d) {
        return "translate(" + xExtent[+/e$/.test(d)] + "," + yExtent[+/^s/.test(d)] + ")";
      });
    }
    function redrawX(g) {
      g.select(".extent").attr("x", xExtent[0]);
      g.selectAll(".extent,.n>rect,.s>rect").attr("width", xExtent[1] - xExtent[0]);
    }
    function redrawY(g) {
      g.select(".extent").attr("y", yExtent[0]);
      g.selectAll(".extent,.e>rect,.w>rect").attr("height", yExtent[1] - yExtent[0]);
    }
    function brushstart() {
      var target = this, eventTarget = d3.select(d3.event.target), event_ = event.of(target, arguments), g = d3.select(target), resizing = eventTarget.datum(), resizingX = !/^(n|s)$/.test(resizing) && x, resizingY = !/^(e|w)$/.test(resizing) && y, dragging = eventTarget.classed("extent"), dragRestore = d3_event_dragSuppress(target), center, origin = d3.mouse(target), offset;
      var w = d3.select(d3_window(target)).on("keydown.brush", keydown).on("keyup.brush", keyup);
      if (d3.event.changedTouches) {
        w.on("touchmove.brush", brushmove).on("touchend.brush", brushend);
      } else {
        w.on("mousemove.brush", brushmove).on("mouseup.brush", brushend);
      }
      g.interrupt().selectAll("*").interrupt();
      if (dragging) {
        origin[0] = xExtent[0] - origin[0];
        origin[1] = yExtent[0] - origin[1];
      } else if (resizing) {
        var ex = +/w$/.test(resizing), ey = +/^n/.test(resizing);
        offset = [ xExtent[1 - ex] - origin[0], yExtent[1 - ey] - origin[1] ];
        origin[0] = xExtent[ex];
        origin[1] = yExtent[ey];
      } else if (d3.event.altKey) center = origin.slice();
      g.style("pointer-events", "none").selectAll(".resize").style("display", null);
      d3.select("body").style("cursor", eventTarget.style("cursor"));
      event_({
        type: "brushstart"
      });
      brushmove();
      function keydown() {
        if (d3.event.keyCode == 32) {
          if (!dragging) {
            center = null;
            origin[0] -= xExtent[1];
            origin[1] -= yExtent[1];
            dragging = 2;
          }
          d3_eventPreventDefault();
        }
      }
      function keyup() {
        if (d3.event.keyCode == 32 && dragging == 2) {
          origin[0] += xExtent[1];
          origin[1] += yExtent[1];
          dragging = 0;
          d3_eventPreventDefault();
        }
      }
      function brushmove() {
        var point = d3.mouse(target), moved = false;
        if (offset) {
          point[0] += offset[0];
          point[1] += offset[1];
        }
        if (!dragging) {
          if (d3.event.altKey) {
            if (!center) center = [ (xExtent[0] + xExtent[1]) / 2, (yExtent[0] + yExtent[1]) / 2 ];
            origin[0] = xExtent[+(point[0] < center[0])];
            origin[1] = yExtent[+(point[1] < center[1])];
          } else center = null;
        }
        if (resizingX && move1(point, x, 0)) {
          redrawX(g);
          moved = true;
        }
        if (resizingY && move1(point, y, 1)) {
          redrawY(g);
          moved = true;
        }
        if (moved) {
          redraw(g);
          event_({
            type: "brush",
            mode: dragging ? "move" : "resize"
          });
        }
      }
      function move1(point, scale, i) {
        var range = d3_scaleRange(scale), r0 = range[0], r1 = range[1], position = origin[i], extent = i ? yExtent : xExtent, size = extent[1] - extent[0], min, max;
        if (dragging) {
          r0 -= position;
          r1 -= size + position;
        }
        min = (i ? yClamp : xClamp) ? Math.max(r0, Math.min(r1, point[i])) : point[i];
        if (dragging) {
          max = (min += position) + size;
        } else {
          if (center) position = Math.max(r0, Math.min(r1, 2 * center[i] - min));
          if (position < min) {
            max = min;
            min = position;
          } else {
            max = position;
          }
        }
        if (extent[0] != min || extent[1] != max) {
          if (i) yExtentDomain = null; else xExtentDomain = null;
          extent[0] = min;
          extent[1] = max;
          return true;
        }
      }
      function brushend() {
        brushmove();
        g.style("pointer-events", "all").selectAll(".resize").style("display", brush.empty() ? "none" : null);
        d3.select("body").style("cursor", null);
        w.on("mousemove.brush", null).on("mouseup.brush", null).on("touchmove.brush", null).on("touchend.brush", null).on("keydown.brush", null).on("keyup.brush", null);
        dragRestore();
        event_({
          type: "brushend"
        });
      }
    }
    brush.x = function(z) {
      if (!arguments.length) return x;
      x = z;
      resizes = d3_svg_brushResizes[!x << 1 | !y];
      return brush;
    };
    brush.y = function(z) {
      if (!arguments.length) return y;
      y = z;
      resizes = d3_svg_brushResizes[!x << 1 | !y];
      return brush;
    };
    brush.clamp = function(z) {
      if (!arguments.length) return x && y ? [ xClamp, yClamp ] : x ? xClamp : y ? yClamp : null;
      if (x && y) xClamp = !!z[0], yClamp = !!z[1]; else if (x) xClamp = !!z; else if (y) yClamp = !!z;
      return brush;
    };
    brush.extent = function(z) {
      var x0, x1, y0, y1, t;
      if (!arguments.length) {
        if (x) {
          if (xExtentDomain) {
            x0 = xExtentDomain[0], x1 = xExtentDomain[1];
          } else {
            x0 = xExtent[0], x1 = xExtent[1];
            if (x.invert) x0 = x.invert(x0), x1 = x.invert(x1);
            if (x1 < x0) t = x0, x0 = x1, x1 = t;
          }
        }
        if (y) {
          if (yExtentDomain) {
            y0 = yExtentDomain[0], y1 = yExtentDomain[1];
          } else {
            y0 = yExtent[0], y1 = yExtent[1];
            if (y.invert) y0 = y.invert(y0), y1 = y.invert(y1);
            if (y1 < y0) t = y0, y0 = y1, y1 = t;
          }
        }
        return x && y ? [ [ x0, y0 ], [ x1, y1 ] ] : x ? [ x0, x1 ] : y && [ y0, y1 ];
      }
      if (x) {
        x0 = z[0], x1 = z[1];
        if (y) x0 = x0[0], x1 = x1[0];
        xExtentDomain = [ x0, x1 ];
        if (x.invert) x0 = x(x0), x1 = x(x1);
        if (x1 < x0) t = x0, x0 = x1, x1 = t;
        if (x0 != xExtent[0] || x1 != xExtent[1]) xExtent = [ x0, x1 ];
      }
      if (y) {
        y0 = z[0], y1 = z[1];
        if (x) y0 = y0[1], y1 = y1[1];
        yExtentDomain = [ y0, y1 ];
        if (y.invert) y0 = y(y0), y1 = y(y1);
        if (y1 < y0) t = y0, y0 = y1, y1 = t;
        if (y0 != yExtent[0] || y1 != yExtent[1]) yExtent = [ y0, y1 ];
      }
      return brush;
    };
    brush.clear = function() {
      if (!brush.empty()) {
        xExtent = [ 0, 0 ], yExtent = [ 0, 0 ];
        xExtentDomain = yExtentDomain = null;
      }
      return brush;
    };
    brush.empty = function() {
      return !!x && xExtent[0] == xExtent[1] || !!y && yExtent[0] == yExtent[1];
    };
    return d3.rebind(brush, event, "on");
  };
  var d3_svg_brushCursor = {
    n: "ns-resize",
    e: "ew-resize",
    s: "ns-resize",
    w: "ew-resize",
    nw: "nwse-resize",
    ne: "nesw-resize",
    se: "nwse-resize",
    sw: "nesw-resize"
  };
  var d3_svg_brushResizes = [ [ "n", "e", "s", "w", "nw", "ne", "se", "sw" ], [ "e", "w" ], [ "n", "s" ], [] ];
  var d3_time_format = d3_time.format = d3_locale_enUS.timeFormat;
  var d3_time_formatUtc = d3_time_format.utc;
  var d3_time_formatIso = d3_time_formatUtc("%Y-%m-%dT%H:%M:%S.%LZ");
  d3_time_format.iso = Date.prototype.toISOString && +new Date("2000-01-01T00:00:00.000Z") ? d3_time_formatIsoNative : d3_time_formatIso;
  function d3_time_formatIsoNative(date) {
    return date.toISOString();
  }
  d3_time_formatIsoNative.parse = function(string) {
    var date = new Date(string);
    return isNaN(date) ? null : date;
  };
  d3_time_formatIsoNative.toString = d3_time_formatIso.toString;
  d3_time.second = d3_time_interval(function(date) {
    return new d3_date(Math.floor(date / 1e3) * 1e3);
  }, function(date, offset) {
    date.setTime(date.getTime() + Math.floor(offset) * 1e3);
  }, function(date) {
    return date.getSeconds();
  });
  d3_time.seconds = d3_time.second.range;
  d3_time.seconds.utc = d3_time.second.utc.range;
  d3_time.minute = d3_time_interval(function(date) {
    return new d3_date(Math.floor(date / 6e4) * 6e4);
  }, function(date, offset) {
    date.setTime(date.getTime() + Math.floor(offset) * 6e4);
  }, function(date) {
    return date.getMinutes();
  });
  d3_time.minutes = d3_time.minute.range;
  d3_time.minutes.utc = d3_time.minute.utc.range;
  d3_time.hour = d3_time_interval(function(date) {
    var timezone = date.getTimezoneOffset() / 60;
    return new d3_date((Math.floor(date / 36e5 - timezone) + timezone) * 36e5);
  }, function(date, offset) {
    date.setTime(date.getTime() + Math.floor(offset) * 36e5);
  }, function(date) {
    return date.getHours();
  });
  d3_time.hours = d3_time.hour.range;
  d3_time.hours.utc = d3_time.hour.utc.range;
  d3_time.month = d3_time_interval(function(date) {
    date = d3_time.day(date);
    date.setDate(1);
    return date;
  }, function(date, offset) {
    date.setMonth(date.getMonth() + offset);
  }, function(date) {
    return date.getMonth();
  });
  d3_time.months = d3_time.month.range;
  d3_time.months.utc = d3_time.month.utc.range;
  function d3_time_scale(linear, methods, format) {
    function scale(x) {
      return linear(x);
    }
    scale.invert = function(x) {
      return d3_time_scaleDate(linear.invert(x));
    };
    scale.domain = function(x) {
      if (!arguments.length) return linear.domain().map(d3_time_scaleDate);
      linear.domain(x);
      return scale;
    };
    function tickMethod(extent, count) {
      var span = extent[1] - extent[0], target = span / count, i = d3.bisect(d3_time_scaleSteps, target);
      return i == d3_time_scaleSteps.length ? [ methods.year, d3_scale_linearTickRange(extent.map(function(d) {
        return d / 31536e6;
      }), count)[2] ] : !i ? [ d3_time_scaleMilliseconds, d3_scale_linearTickRange(extent, count)[2] ] : methods[target / d3_time_scaleSteps[i - 1] < d3_time_scaleSteps[i] / target ? i - 1 : i];
    }
    scale.nice = function(interval, skip) {
      var domain = scale.domain(), extent = d3_scaleExtent(domain), method = interval == null ? tickMethod(extent, 10) : typeof interval === "number" && tickMethod(extent, interval);
      if (method) interval = method[0], skip = method[1];
      function skipped(date) {
        return !isNaN(date) && !interval.range(date, d3_time_scaleDate(+date + 1), skip).length;
      }
      return scale.domain(d3_scale_nice(domain, skip > 1 ? {
        floor: function(date) {
          while (skipped(date = interval.floor(date))) date = d3_time_scaleDate(date - 1);
          return date;
        },
        ceil: function(date) {
          while (skipped(date = interval.ceil(date))) date = d3_time_scaleDate(+date + 1);
          return date;
        }
      } : interval));
    };
    scale.ticks = function(interval, skip) {
      var extent = d3_scaleExtent(scale.domain()), method = interval == null ? tickMethod(extent, 10) : typeof interval === "number" ? tickMethod(extent, interval) : !interval.range && [ {
        range: interval
      }, skip ];
      if (method) interval = method[0], skip = method[1];
      return interval.range(extent[0], d3_time_scaleDate(+extent[1] + 1), skip < 1 ? 1 : skip);
    };
    scale.tickFormat = function() {
      return format;
    };
    scale.copy = function() {
      return d3_time_scale(linear.copy(), methods, format);
    };
    return d3_scale_linearRebind(scale, linear);
  }
  function d3_time_scaleDate(t) {
    return new Date(t);
  }
  var d3_time_scaleSteps = [ 1e3, 5e3, 15e3, 3e4, 6e4, 3e5, 9e5, 18e5, 36e5, 108e5, 216e5, 432e5, 864e5, 1728e5, 6048e5, 2592e6, 7776e6, 31536e6 ];
  var d3_time_scaleLocalMethods = [ [ d3_time.second, 1 ], [ d3_time.second, 5 ], [ d3_time.second, 15 ], [ d3_time.second, 30 ], [ d3_time.minute, 1 ], [ d3_time.minute, 5 ], [ d3_time.minute, 15 ], [ d3_time.minute, 30 ], [ d3_time.hour, 1 ], [ d3_time.hour, 3 ], [ d3_time.hour, 6 ], [ d3_time.hour, 12 ], [ d3_time.day, 1 ], [ d3_time.day, 2 ], [ d3_time.week, 1 ], [ d3_time.month, 1 ], [ d3_time.month, 3 ], [ d3_time.year, 1 ] ];
  var d3_time_scaleLocalFormat = d3_time_format.multi([ [ ".%L", function(d) {
    return d.getMilliseconds();
  } ], [ ":%S", function(d) {
    return d.getSeconds();
  } ], [ "%I:%M", function(d) {
    return d.getMinutes();
  } ], [ "%I %p", function(d) {
    return d.getHours();
  } ], [ "%a %d", function(d) {
    return d.getDay() && d.getDate() != 1;
  } ], [ "%b %d", function(d) {
    return d.getDate() != 1;
  } ], [ "%B", function(d) {
    return d.getMonth();
  } ], [ "%Y", d3_true ] ]);
  var d3_time_scaleMilliseconds = {
    range: function(start, stop, step) {
      return d3.range(Math.ceil(start / step) * step, +stop, step).map(d3_time_scaleDate);
    },
    floor: d3_identity,
    ceil: d3_identity
  };
  d3_time_scaleLocalMethods.year = d3_time.year;
  d3_time.scale = function() {
    return d3_time_scale(d3.scale.linear(), d3_time_scaleLocalMethods, d3_time_scaleLocalFormat);
  };
  var d3_time_scaleUtcMethods = d3_time_scaleLocalMethods.map(function(m) {
    return [ m[0].utc, m[1] ];
  });
  var d3_time_scaleUtcFormat = d3_time_formatUtc.multi([ [ ".%L", function(d) {
    return d.getUTCMilliseconds();
  } ], [ ":%S", function(d) {
    return d.getUTCSeconds();
  } ], [ "%I:%M", function(d) {
    return d.getUTCMinutes();
  } ], [ "%I %p", function(d) {
    return d.getUTCHours();
  } ], [ "%a %d", function(d) {
    return d.getUTCDay() && d.getUTCDate() != 1;
  } ], [ "%b %d", function(d) {
    return d.getUTCDate() != 1;
  } ], [ "%B", function(d) {
    return d.getUTCMonth();
  } ], [ "%Y", d3_true ] ]);
  d3_time_scaleUtcMethods.year = d3_time.year.utc;
  d3_time.scale.utc = function() {
    return d3_time_scale(d3.scale.linear(), d3_time_scaleUtcMethods, d3_time_scaleUtcFormat);
  };
  d3.text = d3_xhrType(function(request) {
    return request.responseText;
  });
  d3.json = function(url, callback) {
    return d3_xhr(url, "application/json", d3_json, callback);
  };
  function d3_json(request) {
    return JSON.parse(request.responseText);
  }
  d3.html = function(url, callback) {
    return d3_xhr(url, "text/html", d3_html, callback);
  };
  function d3_html(request) {
    var range = d3_document.createRange();
    range.selectNode(d3_document.body);
    return range.createContextualFragment(request.responseText);
  }
  d3.xml = d3_xhrType(function(request) {
    return request.responseXML;
  });
  if (typeof define === "function" && define.amd) define(d3); else if (typeof module === "object" && module.exports) module.exports = d3;
  this.d3 = d3;
}();
},{}],7:[function(require,module,exports){


//
// Generated on Tue Dec 16 2014 12:13:47 GMT+0100 (CET) by Charlie Robbins, Paolo Fragomeni & the Contributors (Using Codesurgeon).
// Version 1.2.6
//

(function (exports) {

/*
 * browser.js: Browser specific functionality for director.
 *
 * (C) 2011, Charlie Robbins, Paolo Fragomeni, & the Contributors.
 * MIT LICENSE
 *
 */

var dloc = document.location;

function dlocHashEmpty() {
  // Non-IE browsers return '' when the address bar shows '#'; Director's logic
  // assumes both mean empty.
  return dloc.hash === '' || dloc.hash === '#';
}

var listener = {
  mode: 'modern',
  hash: dloc.hash,
  history: false,

  check: function () {
    var h = dloc.hash;
    if (h != this.hash) {
      this.hash = h;
      this.onHashChanged();
    }
  },

  fire: function () {
    if (this.mode === 'modern') {
      this.history === true ? window.onpopstate() : window.onhashchange();
    }
    else {
      this.onHashChanged();
    }
  },

  init: function (fn, history) {
    var self = this;
    this.history = history;

    if (!Router.listeners) {
      Router.listeners = [];
    }

    function onchange(onChangeEvent) {
      for (var i = 0, l = Router.listeners.length; i < l; i++) {
        Router.listeners[i](onChangeEvent);
      }
    }

    //note IE8 is being counted as 'modern' because it has the hashchange event
    if ('onhashchange' in window && (document.documentMode === undefined
      || document.documentMode > 7)) {
      // At least for now HTML5 history is available for 'modern' browsers only
      if (this.history === true) {
        // There is an old bug in Chrome that causes onpopstate to fire even
        // upon initial page load. Since the handler is run manually in init(),
        // this would cause Chrome to run it twise. Currently the only
        // workaround seems to be to set the handler after the initial page load
        // http://code.google.com/p/chromium/issues/detail?id=63040
        setTimeout(function() {
          window.onpopstate = onchange;
        }, 500);
      }
      else {
        window.onhashchange = onchange;
      }
      this.mode = 'modern';
    }
    else {
      //
      // IE support, based on a concept by Erik Arvidson ...
      //
      var frame = document.createElement('iframe');
      frame.id = 'state-frame';
      frame.style.display = 'none';
      document.body.appendChild(frame);
      this.writeFrame('');

      if ('onpropertychange' in document && 'attachEvent' in document) {
        document.attachEvent('onpropertychange', function () {
          if (event.propertyName === 'location') {
            self.check();
          }
        });
      }

      window.setInterval(function () { self.check(); }, 50);

      this.onHashChanged = onchange;
      this.mode = 'legacy';
    }

    Router.listeners.push(fn);

    return this.mode;
  },

  destroy: function (fn) {
    if (!Router || !Router.listeners) {
      return;
    }

    var listeners = Router.listeners;

    for (var i = listeners.length - 1; i >= 0; i--) {
      if (listeners[i] === fn) {
        listeners.splice(i, 1);
      }
    }
  },

  setHash: function (s) {
    // Mozilla always adds an entry to the history
    if (this.mode === 'legacy') {
      this.writeFrame(s);
    }

    if (this.history === true) {
      window.history.pushState({}, document.title, s);
      // Fire an onpopstate event manually since pushing does not obviously
      // trigger the pop event.
      this.fire();
    } else {
      dloc.hash = (s[0] === '/') ? s : '/' + s;
    }
    return this;
  },

  writeFrame: function (s) {
    // IE support...
    var f = document.getElementById('state-frame');
    var d = f.contentDocument || f.contentWindow.document;
    d.open();
    d.write("<script>_hash = '" + s + "'; onload = parent.listener.syncHash;<script>");
    d.close();
  },

  syncHash: function () {
    // IE support...
    var s = this._hash;
    if (s != dloc.hash) {
      dloc.hash = s;
    }
    return this;
  },

  onHashChanged: function () {}
};

var Router = exports.Router = function (routes) {
  if (!(this instanceof Router)) return new Router(routes);

  this.params   = {};
  this.routes   = {};
  this.methods  = ['on', 'once', 'after', 'before'];
  this.scope    = [];
  this._methods = {};

  this._insert = this.insert;
  this.insert = this.insertEx;

  this.historySupport = (window.history != null ? window.history.pushState : null) != null

  this.configure();
  this.mount(routes || {});
};

Router.prototype.init = function (r) {
  var self = this
    , routeTo;
  this.handler = function(onChangeEvent) {
    var newURL = onChangeEvent && onChangeEvent.newURL || window.location.hash;
    var url = self.history === true ? self.getPath() : newURL.replace(/.*#/, '');
    self.dispatch('on', url.charAt(0) === '/' ? url : '/' + url);
  };

  listener.init(this.handler, this.history);

  if (this.history === false) {
    if (dlocHashEmpty() && r) {
      dloc.hash = r;
    } else if (!dlocHashEmpty()) {
      self.dispatch('on', '/' + dloc.hash.replace(/^(#\/|#|\/)/, ''));
    }
  }
  else {
    if (this.convert_hash_in_init) {
      // Use hash as route
      routeTo = dlocHashEmpty() && r ? r : !dlocHashEmpty() ? dloc.hash.replace(/^#/, '') : null;
      if (routeTo) {
        window.history.replaceState({}, document.title, routeTo);
      }
    }
    else {
      // Use canonical url
      routeTo = this.getPath();
    }

    // Router has been initialized, but due to the chrome bug it will not
    // yet actually route HTML5 history state changes. Thus, decide if should route.
    if (routeTo || this.run_in_init === true) {
      this.handler();
    }
  }

  return this;
};

Router.prototype.explode = function () {
  var v = this.history === true ? this.getPath() : dloc.hash;
  if (v.charAt(1) === '/') { v=v.slice(1) }
  return v.slice(1, v.length).split("/");
};

Router.prototype.setRoute = function (i, v, val) {
  var url = this.explode();

  if (typeof i === 'number' && typeof v === 'string') {
    url[i] = v;
  }
  else if (typeof val === 'string') {
    url.splice(i, v, s);
  }
  else {
    url = [i];
  }

  listener.setHash(url.join('/'));
  return url;
};

//
// ### function insertEx(method, path, route, parent)
// #### @method {string} Method to insert the specific `route`.
// #### @path {Array} Parsed path to insert the `route` at.
// #### @route {Array|function} Route handlers to insert.
// #### @parent {Object} **Optional** Parent "routes" to insert into.
// insert a callback that will only occur once per the matched route.
//
Router.prototype.insertEx = function(method, path, route, parent) {
  if (method === "once") {
    method = "on";
    route = function(route) {
      var once = false;
      return function() {
        if (once) return;
        once = true;
        return route.apply(this, arguments);
      };
    }(route);
  }
  return this._insert(method, path, route, parent);
};

Router.prototype.getRoute = function (v) {
  var ret = v;

  if (typeof v === "number") {
    ret = this.explode()[v];
  }
  else if (typeof v === "string"){
    var h = this.explode();
    ret = h.indexOf(v);
  }
  else {
    ret = this.explode();
  }

  return ret;
};

Router.prototype.destroy = function () {
  listener.destroy(this.handler);
  return this;
};

Router.prototype.getPath = function () {
  var path = window.location.pathname;
  if (path.substr(0, 1) !== '/') {
    path = '/' + path;
  }
  return path;
};
function _every(arr, iterator) {
  for (var i = 0; i < arr.length; i += 1) {
    if (iterator(arr[i], i, arr) === false) {
      return;
    }
  }
}

function _flatten(arr) {
  var flat = [];
  for (var i = 0, n = arr.length; i < n; i++) {
    flat = flat.concat(arr[i]);
  }
  return flat;
}

function _asyncEverySeries(arr, iterator, callback) {
  if (!arr.length) {
    return callback();
  }
  var completed = 0;
  (function iterate() {
    iterator(arr[completed], function(err) {
      if (err || err === false) {
        callback(err);
        callback = function() {};
      } else {
        completed += 1;
        if (completed === arr.length) {
          callback();
        } else {
          iterate();
        }
      }
    });
  })();
}

function paramifyString(str, params, mod) {
  mod = str;
  for (var param in params) {
    if (params.hasOwnProperty(param)) {
      mod = params[param](str);
      if (mod !== str) {
        break;
      }
    }
  }
  return mod === str ? "([._a-zA-Z0-9-%()]+)" : mod;
}

function regifyString(str, params) {
  var matches, last = 0, out = "";
  while (matches = str.substr(last).match(/[^\w\d\- %@&]*\*[^\w\d\- %@&]*/)) {
    last = matches.index + matches[0].length;
    matches[0] = matches[0].replace(/^\*/, "([_.()!\\ %@&a-zA-Z0-9-]+)");
    out += str.substr(0, matches.index) + matches[0];
  }
  str = out += str.substr(last);
  var captures = str.match(/:([^\/]+)/ig), capture, length;
  if (captures) {
    length = captures.length;
    for (var i = 0; i < length; i++) {
      capture = captures[i];
      if (capture.slice(0, 2) === "::") {
        str = capture.slice(1);
      } else {
        str = str.replace(capture, paramifyString(capture, params));
      }
    }
  }
  return str;
}

function terminator(routes, delimiter, start, stop) {
  var last = 0, left = 0, right = 0, start = (start || "(").toString(), stop = (stop || ")").toString(), i;
  for (i = 0; i < routes.length; i++) {
    var chunk = routes[i];
    if (chunk.indexOf(start, last) > chunk.indexOf(stop, last) || ~chunk.indexOf(start, last) && !~chunk.indexOf(stop, last) || !~chunk.indexOf(start, last) && ~chunk.indexOf(stop, last)) {
      left = chunk.indexOf(start, last);
      right = chunk.indexOf(stop, last);
      if (~left && !~right || !~left && ~right) {
        var tmp = routes.slice(0, (i || 1) + 1).join(delimiter);
        routes = [ tmp ].concat(routes.slice((i || 1) + 1));
      }
      last = (right > left ? right : left) + 1;
      i = 0;
    } else {
      last = 0;
    }
  }
  return routes;
}

var QUERY_SEPARATOR = /\?.*/;

Router.prototype.configure = function(options) {
  options = options || {};
  for (var i = 0; i < this.methods.length; i++) {
    this._methods[this.methods[i]] = true;
  }
  this.recurse = options.recurse || this.recurse || false;
  this.async = options.async || false;
  this.delimiter = options.delimiter || "/";
  this.strict = typeof options.strict === "undefined" ? true : options.strict;
  this.notfound = options.notfound;
  this.resource = options.resource;
  this.history = options.html5history && this.historySupport || false;
  this.run_in_init = this.history === true && options.run_handler_in_init !== false;
  this.convert_hash_in_init = this.history === true && options.convert_hash_in_init !== false;
  this.every = {
    after: options.after || null,
    before: options.before || null,
    on: options.on || null
  };
  return this;
};

Router.prototype.param = function(token, matcher) {
  if (token[0] !== ":") {
    token = ":" + token;
  }
  var compiled = new RegExp(token, "g");
  this.params[token] = function(str) {
    return str.replace(compiled, matcher.source || matcher);
  };
  return this;
};

Router.prototype.on = Router.prototype.route = function(method, path, route) {
  var self = this;
  if (!route && typeof path == "function") {
    route = path;
    path = method;
    method = "on";
  }
  if (Array.isArray(path)) {
    return path.forEach(function(p) {
      self.on(method, p, route);
    });
  }
  if (path.source) {
    path = path.source.replace(/\\\//ig, "/");
  }
  if (Array.isArray(method)) {
    return method.forEach(function(m) {
      self.on(m.toLowerCase(), path, route);
    });
  }
  path = path.split(new RegExp(this.delimiter));
  path = terminator(path, this.delimiter);
  this.insert(method, this.scope.concat(path), route);
};

Router.prototype.path = function(path, routesFn) {
  var self = this, length = this.scope.length;
  if (path.source) {
    path = path.source.replace(/\\\//ig, "/");
  }
  path = path.split(new RegExp(this.delimiter));
  path = terminator(path, this.delimiter);
  this.scope = this.scope.concat(path);
  routesFn.call(this, this);
  this.scope.splice(length, path.length);
};

Router.prototype.dispatch = function(method, path, callback) {
  var self = this, fns = this.traverse(method, path.replace(QUERY_SEPARATOR, ""), this.routes, ""), invoked = this._invoked, after;
  this._invoked = true;
  if (!fns || fns.length === 0) {
    this.last = [];
    if (typeof this.notfound === "function") {
      this.invoke([ this.notfound ], {
        method: method,
        path: path
      }, callback);
    }
    return false;
  }
  if (this.recurse === "forward") {
    fns = fns.reverse();
  }
  function updateAndInvoke() {
    self.last = fns.after;
    self.invoke(self.runlist(fns), self, callback);
  }
  after = this.every && this.every.after ? [ this.every.after ].concat(this.last) : [ this.last ];
  if (after && after.length > 0 && invoked) {
    if (this.async) {
      this.invoke(after, this, updateAndInvoke);
    } else {
      this.invoke(after, this);
      updateAndInvoke();
    }
    return true;
  }
  updateAndInvoke();
  return true;
};

Router.prototype.invoke = function(fns, thisArg, callback) {
  var self = this;
  var apply;
  if (this.async) {
    apply = function(fn, next) {
      if (Array.isArray(fn)) {
        return _asyncEverySeries(fn, apply, next);
      } else if (typeof fn == "function") {
        fn.apply(thisArg, (fns.captures || []).concat(next));
      }
    };
    _asyncEverySeries(fns, apply, function() {
      if (callback) {
        callback.apply(thisArg, arguments);
      }
    });
  } else {
    apply = function(fn) {
      if (Array.isArray(fn)) {
        return _every(fn, apply);
      } else if (typeof fn === "function") {
        return fn.apply(thisArg, fns.captures || []);
      } else if (typeof fn === "string" && self.resource) {
        self.resource[fn].apply(thisArg, fns.captures || []);
      }
    };
    _every(fns, apply);
  }
};

Router.prototype.traverse = function(method, path, routes, regexp, filter) {
  var fns = [], current, exact, match, next, that;
  function filterRoutes(routes) {
    if (!filter) {
      return routes;
    }
    function deepCopy(source) {
      var result = [];
      for (var i = 0; i < source.length; i++) {
        result[i] = Array.isArray(source[i]) ? deepCopy(source[i]) : source[i];
      }
      return result;
    }
    function applyFilter(fns) {
      for (var i = fns.length - 1; i >= 0; i--) {
        if (Array.isArray(fns[i])) {
          applyFilter(fns[i]);
          if (fns[i].length === 0) {
            fns.splice(i, 1);
          }
        } else {
          if (!filter(fns[i])) {
            fns.splice(i, 1);
          }
        }
      }
    }
    var newRoutes = deepCopy(routes);
    newRoutes.matched = routes.matched;
    newRoutes.captures = routes.captures;
    newRoutes.after = routes.after.filter(filter);
    applyFilter(newRoutes);
    return newRoutes;
  }
  if (path === this.delimiter && routes[method]) {
    next = [ [ routes.before, routes[method] ].filter(Boolean) ];
    next.after = [ routes.after ].filter(Boolean);
    next.matched = true;
    next.captures = [];
    return filterRoutes(next);
  }
  for (var r in routes) {
    if (routes.hasOwnProperty(r) && (!this._methods[r] || this._methods[r] && typeof routes[r] === "object" && !Array.isArray(routes[r]))) {
      current = exact = regexp + this.delimiter + r;
      if (!this.strict) {
        exact += "[" + this.delimiter + "]?";
      }
      match = path.match(new RegExp("^" + exact));
      if (!match) {
        continue;
      }
      if (match[0] && match[0] == path && routes[r][method]) {
        next = [ [ routes[r].before, routes[r][method] ].filter(Boolean) ];
        next.after = [ routes[r].after ].filter(Boolean);
        next.matched = true;
        next.captures = match.slice(1);
        if (this.recurse && routes === this.routes) {
          next.push([ routes.before, routes.on ].filter(Boolean));
          next.after = next.after.concat([ routes.after ].filter(Boolean));
        }
        return filterRoutes(next);
      }
      next = this.traverse(method, path, routes[r], current);
      if (next.matched) {
        if (next.length > 0) {
          fns = fns.concat(next);
        }
        if (this.recurse) {
          fns.push([ routes[r].before, routes[r].on ].filter(Boolean));
          next.after = next.after.concat([ routes[r].after ].filter(Boolean));
          if (routes === this.routes) {
            fns.push([ routes["before"], routes["on"] ].filter(Boolean));
            next.after = next.after.concat([ routes["after"] ].filter(Boolean));
          }
        }
        fns.matched = true;
        fns.captures = next.captures;
        fns.after = next.after;
        return filterRoutes(fns);
      }
    }
  }
  return false;
};

Router.prototype.insert = function(method, path, route, parent) {
  var methodType, parentType, isArray, nested, part;
  path = path.filter(function(p) {
    return p && p.length > 0;
  });
  parent = parent || this.routes;
  part = path.shift();
  if (/\:|\*/.test(part) && !/\\d|\\w/.test(part)) {
    part = regifyString(part, this.params);
  }
  if (path.length > 0) {
    parent[part] = parent[part] || {};
    return this.insert(method, path, route, parent[part]);
  }
  if (!part && !path.length && parent === this.routes) {
    methodType = typeof parent[method];
    switch (methodType) {
     case "function":
      parent[method] = [ parent[method], route ];
      return;
     case "object":
      parent[method].push(route);
      return;
     case "undefined":
      parent[method] = route;
      return;
    }
    return;
  }
  parentType = typeof parent[part];
  isArray = Array.isArray(parent[part]);
  if (parent[part] && !isArray && parentType == "object") {
    methodType = typeof parent[part][method];
    switch (methodType) {
     case "function":
      parent[part][method] = [ parent[part][method], route ];
      return;
     case "object":
      parent[part][method].push(route);
      return;
     case "undefined":
      parent[part][method] = route;
      return;
    }
  } else if (parentType == "undefined") {
    nested = {};
    nested[method] = route;
    parent[part] = nested;
    return;
  }
  throw new Error("Invalid route context: " + parentType);
};



Router.prototype.extend = function(methods) {
  var self = this, len = methods.length, i;
  function extend(method) {
    self._methods[method] = true;
    self[method] = function() {
      var extra = arguments.length === 1 ? [ method, "" ] : [ method ];
      self.on.apply(self, extra.concat(Array.prototype.slice.call(arguments)));
    };
  }
  for (i = 0; i < len; i++) {
    extend(methods[i]);
  }
};

Router.prototype.runlist = function(fns) {
  var runlist = this.every && this.every.before ? [ this.every.before ].concat(_flatten(fns)) : _flatten(fns);
  if (this.every && this.every.on) {
    runlist.push(this.every.on);
  }
  runlist.captures = fns.captures;
  runlist.source = fns.source;
  return runlist;
};

Router.prototype.mount = function(routes, path) {
  if (!routes || typeof routes !== "object" || Array.isArray(routes)) {
    return;
  }
  var self = this;
  path = path || [];
  if (!Array.isArray(path)) {
    path = path.split(self.delimiter);
  }
  function insertOrMount(route, local) {
    var rename = route, parts = route.split(self.delimiter), routeType = typeof routes[route], isRoute = parts[0] === "" || !self._methods[parts[0]], event = isRoute ? "on" : rename;
    if (isRoute) {
      rename = rename.slice((rename.match(new RegExp("^" + self.delimiter)) || [ "" ])[0].length);
      parts.shift();
    }
    if (isRoute && routeType === "object" && !Array.isArray(routes[route])) {
      local = local.concat(parts);
      self.mount(routes[route], local);
      return;
    }
    if (isRoute) {
      local = local.concat(rename.split(self.delimiter));
      local = terminator(local, self.delimiter);
    }
    self.insert(event, local, routes[route]);
  }
  for (var route in routes) {
    if (routes.hasOwnProperty(route)) {
      insertOrMount(route, path.slice(0));
    }
  }
};



}(typeof exports === "object" ? exports : window));
},{}]},{},[5]);
